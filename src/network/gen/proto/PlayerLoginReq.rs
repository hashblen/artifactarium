// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerLoginReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:PlayerLoginReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerLoginReq {
    // message fields
    // @@protoc_insertion_point(field:PlayerLoginReq.platform)
    pub platform: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.FBKHEDNNFIF)
    pub FBKHEDNNFIF: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.JIPHKNNHBIE)
    pub JIPHKNNHBIE: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.CBIEHLMFBHI)
    pub CBIEHLMFBHI: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.IMACIIGIOGC)
    pub IMACIIGIOGC: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.JJIOHIJNGFP)
    pub JJIOHIJNGFP: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.extra_bin_data)
    pub extra_bin_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlayerLoginReq.LPFPAJBHJMH)
    pub LPFPAJBHJMH: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.OFMIHDNGFNM)
    pub OFMIHDNGFNM: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlayerLoginReq.online_id)
    pub online_id: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.KEODMFOKNGH)
    pub KEODMFOKNGH: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.MEEGOICDEFG)
    pub MEEGOICDEFG: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.MDIKIHJHHJJ)
    pub MDIKIHJHHJJ: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.HCJGLLHFCMA)
    pub HCJGLLHFCMA: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.LLIMBPCEABN)
    pub LLIMBPCEABN: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.country_code)
    pub country_code: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.PFDFHPKIHMO)
    pub PFDFHPKIHMO: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlayerLoginReq.IMCMLAGLODL)
    pub IMCMLAGLODL: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.NNBGJPGDGCP)
    pub NNBGJPGDGCP: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.CDDBBPKKOPM)
    pub CDDBBPKKOPM: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.psn_id)
    pub psn_id: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.birthday)
    pub birthday: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.PECPGFPBJEB)
    pub PECPGFPBJEB: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.account_uid)
    pub account_uid: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginReq.account_type)
    pub account_type: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.FNPPPMBIBEM)
    pub FNPPPMBIBEM: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.PLNNJPFPPAM)
    pub PLNNJPFPPAM: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.target_home_owner_uid)
    pub target_home_owner_uid: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.is_guest)
    pub is_guest: bool,
    // @@protoc_insertion_point(field:PlayerLoginReq.is_editor)
    pub is_editor: bool,
    // @@protoc_insertion_point(field:PlayerLoginReq.JAGELBDJFJH)
    pub JAGELBDJFJH: bool,
    // @@protoc_insertion_point(field:PlayerLoginReq.login_rand)
    pub login_rand: u64,
    // @@protoc_insertion_point(field:PlayerLoginReq.channel_id)
    pub channel_id: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.tag)
    pub tag: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.KPCGBPCHBMJ)
    pub KPCGBPCHBMJ: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.client_data_version)
    pub client_data_version: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.NCNKMDBAFEH)
    pub NCNKMDBAFEH: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.EPAGBFLKJBN)
    pub EPAGBFLKJBN: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.gm_uid)
    pub gm_uid: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.BFPJPDCLFNM)
    pub BFPJPDCLFNM: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.IKKKLHICPMF)
    pub IKKKLHICPMF: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.MCKEONLBAOA)
    pub MCKEONLBAOA: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.platform_type)
    pub platform_type: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.KEKHAKAPMIN)
    pub KEKHAKAPMIN: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.target_uid)
    pub target_uid: u32,
    // @@protoc_insertion_point(field:PlayerLoginReq.DKGAONKKOHA)
    pub DKGAONKKOHA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerLoginReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerLoginReq {
    fn default() -> &'a PlayerLoginReq {
        <PlayerLoginReq as ::protobuf::Message>::default_instance()
    }
}

impl PlayerLoginReq {
    pub fn new() -> PlayerLoginReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(47);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform",
            |m: &PlayerLoginReq| { &m.platform },
            |m: &mut PlayerLoginReq| { &mut m.platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FBKHEDNNFIF",
            |m: &PlayerLoginReq| { &m.FBKHEDNNFIF },
            |m: &mut PlayerLoginReq| { &mut m.FBKHEDNNFIF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JIPHKNNHBIE",
            |m: &PlayerLoginReq| { &m.JIPHKNNHBIE },
            |m: &mut PlayerLoginReq| { &mut m.JIPHKNNHBIE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBIEHLMFBHI",
            |m: &PlayerLoginReq| { &m.CBIEHLMFBHI },
            |m: &mut PlayerLoginReq| { &mut m.CBIEHLMFBHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IMACIIGIOGC",
            |m: &PlayerLoginReq| { &m.IMACIIGIOGC },
            |m: &mut PlayerLoginReq| { &mut m.IMACIIGIOGC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JJIOHIJNGFP",
            |m: &PlayerLoginReq| { &m.JJIOHIJNGFP },
            |m: &mut PlayerLoginReq| { &mut m.JJIOHIJNGFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &PlayerLoginReq| { &m.token },
            |m: &mut PlayerLoginReq| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extra_bin_data",
            |m: &PlayerLoginReq| { &m.extra_bin_data },
            |m: &mut PlayerLoginReq| { &mut m.extra_bin_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LPFPAJBHJMH",
            |m: &PlayerLoginReq| { &m.LPFPAJBHJMH },
            |m: &mut PlayerLoginReq| { &mut m.LPFPAJBHJMH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OFMIHDNGFNM",
            |m: &PlayerLoginReq| { &m.OFMIHDNGFNM },
            |m: &mut PlayerLoginReq| { &mut m.OFMIHDNGFNM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online_id",
            |m: &PlayerLoginReq| { &m.online_id },
            |m: &mut PlayerLoginReq| { &mut m.online_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KEODMFOKNGH",
            |m: &PlayerLoginReq| { &m.KEODMFOKNGH },
            |m: &mut PlayerLoginReq| { &mut m.KEODMFOKNGH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MEEGOICDEFG",
            |m: &PlayerLoginReq| { &m.MEEGOICDEFG },
            |m: &mut PlayerLoginReq| { &mut m.MEEGOICDEFG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MDIKIHJHHJJ",
            |m: &PlayerLoginReq| { &m.MDIKIHJHHJJ },
            |m: &mut PlayerLoginReq| { &mut m.MDIKIHJHHJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HCJGLLHFCMA",
            |m: &PlayerLoginReq| { &m.HCJGLLHFCMA },
            |m: &mut PlayerLoginReq| { &mut m.HCJGLLHFCMA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LLIMBPCEABN",
            |m: &PlayerLoginReq| { &m.LLIMBPCEABN },
            |m: &mut PlayerLoginReq| { &mut m.LLIMBPCEABN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "country_code",
            |m: &PlayerLoginReq| { &m.country_code },
            |m: &mut PlayerLoginReq| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PFDFHPKIHMO",
            |m: &PlayerLoginReq| { &m.PFDFHPKIHMO },
            |m: &mut PlayerLoginReq| { &mut m.PFDFHPKIHMO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IMCMLAGLODL",
            |m: &PlayerLoginReq| { &m.IMCMLAGLODL },
            |m: &mut PlayerLoginReq| { &mut m.IMCMLAGLODL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NNBGJPGDGCP",
            |m: &PlayerLoginReq| { &m.NNBGJPGDGCP },
            |m: &mut PlayerLoginReq| { &mut m.NNBGJPGDGCP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CDDBBPKKOPM",
            |m: &PlayerLoginReq| { &m.CDDBBPKKOPM },
            |m: &mut PlayerLoginReq| { &mut m.CDDBBPKKOPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "psn_id",
            |m: &PlayerLoginReq| { &m.psn_id },
            |m: &mut PlayerLoginReq| { &mut m.psn_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birthday",
            |m: &PlayerLoginReq| { &m.birthday },
            |m: &mut PlayerLoginReq| { &mut m.birthday },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PECPGFPBJEB",
            |m: &PlayerLoginReq| { &m.PECPGFPBJEB },
            |m: &mut PlayerLoginReq| { &mut m.PECPGFPBJEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_uid",
            |m: &PlayerLoginReq| { &m.account_uid },
            |m: &mut PlayerLoginReq| { &mut m.account_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_type",
            |m: &PlayerLoginReq| { &m.account_type },
            |m: &mut PlayerLoginReq| { &mut m.account_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FNPPPMBIBEM",
            |m: &PlayerLoginReq| { &m.FNPPPMBIBEM },
            |m: &mut PlayerLoginReq| { &mut m.FNPPPMBIBEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PLNNJPFPPAM",
            |m: &PlayerLoginReq| { &m.PLNNJPFPPAM },
            |m: &mut PlayerLoginReq| { &mut m.PLNNJPFPPAM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_home_owner_uid",
            |m: &PlayerLoginReq| { &m.target_home_owner_uid },
            |m: &mut PlayerLoginReq| { &mut m.target_home_owner_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_guest",
            |m: &PlayerLoginReq| { &m.is_guest },
            |m: &mut PlayerLoginReq| { &mut m.is_guest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_editor",
            |m: &PlayerLoginReq| { &m.is_editor },
            |m: &mut PlayerLoginReq| { &mut m.is_editor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JAGELBDJFJH",
            |m: &PlayerLoginReq| { &m.JAGELBDJFJH },
            |m: &mut PlayerLoginReq| { &mut m.JAGELBDJFJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "login_rand",
            |m: &PlayerLoginReq| { &m.login_rand },
            |m: &mut PlayerLoginReq| { &mut m.login_rand },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &PlayerLoginReq| { &m.channel_id },
            |m: &mut PlayerLoginReq| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &PlayerLoginReq| { &m.tag },
            |m: &mut PlayerLoginReq| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KPCGBPCHBMJ",
            |m: &PlayerLoginReq| { &m.KPCGBPCHBMJ },
            |m: &mut PlayerLoginReq| { &mut m.KPCGBPCHBMJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_data_version",
            |m: &PlayerLoginReq| { &m.client_data_version },
            |m: &mut PlayerLoginReq| { &mut m.client_data_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NCNKMDBAFEH",
            |m: &PlayerLoginReq| { &m.NCNKMDBAFEH },
            |m: &mut PlayerLoginReq| { &mut m.NCNKMDBAFEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EPAGBFLKJBN",
            |m: &PlayerLoginReq| { &m.EPAGBFLKJBN },
            |m: &mut PlayerLoginReq| { &mut m.EPAGBFLKJBN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gm_uid",
            |m: &PlayerLoginReq| { &m.gm_uid },
            |m: &mut PlayerLoginReq| { &mut m.gm_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BFPJPDCLFNM",
            |m: &PlayerLoginReq| { &m.BFPJPDCLFNM },
            |m: &mut PlayerLoginReq| { &mut m.BFPJPDCLFNM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IKKKLHICPMF",
            |m: &PlayerLoginReq| { &m.IKKKLHICPMF },
            |m: &mut PlayerLoginReq| { &mut m.IKKKLHICPMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MCKEONLBAOA",
            |m: &PlayerLoginReq| { &m.MCKEONLBAOA },
            |m: &mut PlayerLoginReq| { &mut m.MCKEONLBAOA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_type",
            |m: &PlayerLoginReq| { &m.platform_type },
            |m: &mut PlayerLoginReq| { &mut m.platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KEKHAKAPMIN",
            |m: &PlayerLoginReq| { &m.KEKHAKAPMIN },
            |m: &mut PlayerLoginReq| { &mut m.KEKHAKAPMIN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_uid",
            |m: &PlayerLoginReq| { &m.target_uid },
            |m: &mut PlayerLoginReq| { &mut m.target_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DKGAONKKOHA",
            |m: &PlayerLoginReq| { &m.DKGAONKKOHA },
            |m: &mut PlayerLoginReq| { &mut m.DKGAONKKOHA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerLoginReq>(
            "PlayerLoginReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerLoginReq {
    const NAME: &'static str = "PlayerLoginReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                114 => {
                    self.platform = is.read_string()?;
                },
                13354 => {
                    self.FBKHEDNNFIF = is.read_string()?;
                },
                7394 => {
                    self.JIPHKNNHBIE = is.read_string()?;
                },
                11466 => {
                    self.CBIEHLMFBHI = is.read_string()?;
                },
                82 => {
                    self.IMACIIGIOGC = is.read_string()?;
                },
                26 => {
                    self.JJIOHIJNGFP = is.read_string()?;
                },
                58 => {
                    self.token = is.read_string()?;
                },
                9466 => {
                    self.extra_bin_data = is.read_bytes()?;
                },
                370 => {
                    self.LPFPAJBHJMH = is.read_string()?;
                },
                2122 => {
                    self.OFMIHDNGFNM = is.read_bytes()?;
                },
                3010 => {
                    self.online_id = is.read_string()?;
                },
                42 => {
                    self.KEODMFOKNGH = is.read_string()?;
                },
                4202 => {
                    self.MEEGOICDEFG = is.read_string()?;
                },
                34 => {
                    self.MDIKIHJHHJJ = is.read_string()?;
                },
                12386 => {
                    self.HCJGLLHFCMA = is.read_string()?;
                },
                690 => {
                    self.LLIMBPCEABN = is.read_string()?;
                },
                14194 => {
                    self.country_code = is.read_string()?;
                },
                1578 => {
                    self.PFDFHPKIHMO = is.read_bytes()?;
                },
                9170 => {
                    self.IMCMLAGLODL = is.read_string()?;
                },
                106 => {
                    self.NNBGJPGDGCP = is.read_string()?;
                },
                7370 => {
                    self.CDDBBPKKOPM = is.read_string()?;
                },
                14098 => {
                    self.psn_id = is.read_string()?;
                },
                9434 => {
                    self.birthday = is.read_string()?;
                },
                1730 => {
                    self.PECPGFPBJEB = is.read_string()?;
                },
                90 => {
                    self.account_uid = is.read_string()?;
                },
                72 => {
                    self.account_type = is.read_uint32()?;
                },
                2760 => {
                    self.FNPPPMBIBEM = is.read_uint32()?;
                },
                16232 => {
                    self.PLNNJPFPPAM = is.read_uint32()?;
                },
                1808 => {
                    self.target_home_owner_uid = is.read_uint32()?;
                },
                48 => {
                    self.is_guest = is.read_bool()?;
                },
                8 => {
                    self.is_editor = is.read_bool()?;
                },
                13128 => {
                    self.JAGELBDJFJH = is.read_bool()?;
                },
                96 => {
                    self.login_rand = is.read_uint64()?;
                },
                5800 => {
                    self.channel_id = is.read_uint32()?;
                },
                9264 => {
                    self.tag = is.read_uint32()?;
                },
                4056 => {
                    self.KPCGBPCHBMJ = is.read_uint32()?;
                },
                3360 => {
                    self.client_data_version = is.read_uint32()?;
                },
                10960 => {
                    self.NCNKMDBAFEH = is.read_uint32()?;
                },
                13528 => {
                    self.EPAGBFLKJBN = is.read_uint32()?;
                },
                5512 => {
                    self.gm_uid = is.read_uint32()?;
                },
                120 => {
                    self.BFPJPDCLFNM = is.read_uint32()?;
                },
                15816 => {
                    self.IKKKLHICPMF = is.read_uint32()?;
                },
                12168 => {
                    self.MCKEONLBAOA = is.read_uint32()?;
                },
                16 => {
                    self.platform_type = is.read_uint32()?;
                },
                2048 => {
                    self.KEKHAKAPMIN = is.read_uint32()?;
                },
                64 => {
                    self.target_uid = is.read_uint32()?;
                },
                10240 => {
                    self.DKGAONKKOHA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.platform.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.platform);
        }
        if !self.FBKHEDNNFIF.is_empty() {
            my_size += ::protobuf::rt::string_size(1669, &self.FBKHEDNNFIF);
        }
        if !self.JIPHKNNHBIE.is_empty() {
            my_size += ::protobuf::rt::string_size(924, &self.JIPHKNNHBIE);
        }
        if !self.CBIEHLMFBHI.is_empty() {
            my_size += ::protobuf::rt::string_size(1433, &self.CBIEHLMFBHI);
        }
        if !self.IMACIIGIOGC.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.IMACIIGIOGC);
        }
        if !self.JJIOHIJNGFP.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.JJIOHIJNGFP);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.token);
        }
        if !self.extra_bin_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1183, &self.extra_bin_data);
        }
        if !self.LPFPAJBHJMH.is_empty() {
            my_size += ::protobuf::rt::string_size(46, &self.LPFPAJBHJMH);
        }
        if !self.OFMIHDNGFNM.is_empty() {
            my_size += ::protobuf::rt::bytes_size(265, &self.OFMIHDNGFNM);
        }
        if !self.online_id.is_empty() {
            my_size += ::protobuf::rt::string_size(376, &self.online_id);
        }
        if !self.KEODMFOKNGH.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.KEODMFOKNGH);
        }
        if !self.MEEGOICDEFG.is_empty() {
            my_size += ::protobuf::rt::string_size(525, &self.MEEGOICDEFG);
        }
        if !self.MDIKIHJHHJJ.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.MDIKIHJHHJJ);
        }
        if !self.HCJGLLHFCMA.is_empty() {
            my_size += ::protobuf::rt::string_size(1548, &self.HCJGLLHFCMA);
        }
        if !self.LLIMBPCEABN.is_empty() {
            my_size += ::protobuf::rt::string_size(86, &self.LLIMBPCEABN);
        }
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1774, &self.country_code);
        }
        if !self.PFDFHPKIHMO.is_empty() {
            my_size += ::protobuf::rt::bytes_size(197, &self.PFDFHPKIHMO);
        }
        if !self.IMCMLAGLODL.is_empty() {
            my_size += ::protobuf::rt::string_size(1146, &self.IMCMLAGLODL);
        }
        if !self.NNBGJPGDGCP.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.NNBGJPGDGCP);
        }
        if !self.CDDBBPKKOPM.is_empty() {
            my_size += ::protobuf::rt::string_size(921, &self.CDDBBPKKOPM);
        }
        if !self.psn_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1762, &self.psn_id);
        }
        if !self.birthday.is_empty() {
            my_size += ::protobuf::rt::string_size(1179, &self.birthday);
        }
        if !self.PECPGFPBJEB.is_empty() {
            my_size += ::protobuf::rt::string_size(216, &self.PECPGFPBJEB);
        }
        if !self.account_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.account_uid);
        }
        if self.account_type != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.account_type);
        }
        if self.FNPPPMBIBEM != 0 {
            my_size += ::protobuf::rt::uint32_size(345, self.FNPPPMBIBEM);
        }
        if self.PLNNJPFPPAM != 0 {
            my_size += ::protobuf::rt::uint32_size(2029, self.PLNNJPFPPAM);
        }
        if self.target_home_owner_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(226, self.target_home_owner_uid);
        }
        if self.is_guest != false {
            my_size += 1 + 1;
        }
        if self.is_editor != false {
            my_size += 1 + 1;
        }
        if self.JAGELBDJFJH != false {
            my_size += 2 + 1;
        }
        if self.login_rand != 0 {
            my_size += ::protobuf::rt::uint64_size(12, self.login_rand);
        }
        if self.channel_id != 0 {
            my_size += ::protobuf::rt::uint32_size(725, self.channel_id);
        }
        if self.tag != 0 {
            my_size += ::protobuf::rt::uint32_size(1158, self.tag);
        }
        if self.KPCGBPCHBMJ != 0 {
            my_size += ::protobuf::rt::uint32_size(507, self.KPCGBPCHBMJ);
        }
        if self.client_data_version != 0 {
            my_size += ::protobuf::rt::uint32_size(420, self.client_data_version);
        }
        if self.NCNKMDBAFEH != 0 {
            my_size += ::protobuf::rt::uint32_size(1370, self.NCNKMDBAFEH);
        }
        if self.EPAGBFLKJBN != 0 {
            my_size += ::protobuf::rt::uint32_size(1691, self.EPAGBFLKJBN);
        }
        if self.gm_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(689, self.gm_uid);
        }
        if self.BFPJPDCLFNM != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.BFPJPDCLFNM);
        }
        if self.IKKKLHICPMF != 0 {
            my_size += ::protobuf::rt::uint32_size(1977, self.IKKKLHICPMF);
        }
        if self.MCKEONLBAOA != 0 {
            my_size += ::protobuf::rt::uint32_size(1521, self.MCKEONLBAOA);
        }
        if self.platform_type != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.platform_type);
        }
        if self.KEKHAKAPMIN != 0 {
            my_size += ::protobuf::rt::uint32_size(256, self.KEKHAKAPMIN);
        }
        if self.target_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.target_uid);
        }
        if self.DKGAONKKOHA != 0 {
            my_size += ::protobuf::rt::uint32_size(1280, self.DKGAONKKOHA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.platform.is_empty() {
            os.write_string(14, &self.platform)?;
        }
        if !self.FBKHEDNNFIF.is_empty() {
            os.write_string(1669, &self.FBKHEDNNFIF)?;
        }
        if !self.JIPHKNNHBIE.is_empty() {
            os.write_string(924, &self.JIPHKNNHBIE)?;
        }
        if !self.CBIEHLMFBHI.is_empty() {
            os.write_string(1433, &self.CBIEHLMFBHI)?;
        }
        if !self.IMACIIGIOGC.is_empty() {
            os.write_string(10, &self.IMACIIGIOGC)?;
        }
        if !self.JJIOHIJNGFP.is_empty() {
            os.write_string(3, &self.JJIOHIJNGFP)?;
        }
        if !self.token.is_empty() {
            os.write_string(7, &self.token)?;
        }
        if !self.extra_bin_data.is_empty() {
            os.write_bytes(1183, &self.extra_bin_data)?;
        }
        if !self.LPFPAJBHJMH.is_empty() {
            os.write_string(46, &self.LPFPAJBHJMH)?;
        }
        if !self.OFMIHDNGFNM.is_empty() {
            os.write_bytes(265, &self.OFMIHDNGFNM)?;
        }
        if !self.online_id.is_empty() {
            os.write_string(376, &self.online_id)?;
        }
        if !self.KEODMFOKNGH.is_empty() {
            os.write_string(5, &self.KEODMFOKNGH)?;
        }
        if !self.MEEGOICDEFG.is_empty() {
            os.write_string(525, &self.MEEGOICDEFG)?;
        }
        if !self.MDIKIHJHHJJ.is_empty() {
            os.write_string(4, &self.MDIKIHJHHJJ)?;
        }
        if !self.HCJGLLHFCMA.is_empty() {
            os.write_string(1548, &self.HCJGLLHFCMA)?;
        }
        if !self.LLIMBPCEABN.is_empty() {
            os.write_string(86, &self.LLIMBPCEABN)?;
        }
        if !self.country_code.is_empty() {
            os.write_string(1774, &self.country_code)?;
        }
        if !self.PFDFHPKIHMO.is_empty() {
            os.write_bytes(197, &self.PFDFHPKIHMO)?;
        }
        if !self.IMCMLAGLODL.is_empty() {
            os.write_string(1146, &self.IMCMLAGLODL)?;
        }
        if !self.NNBGJPGDGCP.is_empty() {
            os.write_string(13, &self.NNBGJPGDGCP)?;
        }
        if !self.CDDBBPKKOPM.is_empty() {
            os.write_string(921, &self.CDDBBPKKOPM)?;
        }
        if !self.psn_id.is_empty() {
            os.write_string(1762, &self.psn_id)?;
        }
        if !self.birthday.is_empty() {
            os.write_string(1179, &self.birthday)?;
        }
        if !self.PECPGFPBJEB.is_empty() {
            os.write_string(216, &self.PECPGFPBJEB)?;
        }
        if !self.account_uid.is_empty() {
            os.write_string(11, &self.account_uid)?;
        }
        if self.account_type != 0 {
            os.write_uint32(9, self.account_type)?;
        }
        if self.FNPPPMBIBEM != 0 {
            os.write_uint32(345, self.FNPPPMBIBEM)?;
        }
        if self.PLNNJPFPPAM != 0 {
            os.write_uint32(2029, self.PLNNJPFPPAM)?;
        }
        if self.target_home_owner_uid != 0 {
            os.write_uint32(226, self.target_home_owner_uid)?;
        }
        if self.is_guest != false {
            os.write_bool(6, self.is_guest)?;
        }
        if self.is_editor != false {
            os.write_bool(1, self.is_editor)?;
        }
        if self.JAGELBDJFJH != false {
            os.write_bool(1641, self.JAGELBDJFJH)?;
        }
        if self.login_rand != 0 {
            os.write_uint64(12, self.login_rand)?;
        }
        if self.channel_id != 0 {
            os.write_uint32(725, self.channel_id)?;
        }
        if self.tag != 0 {
            os.write_uint32(1158, self.tag)?;
        }
        if self.KPCGBPCHBMJ != 0 {
            os.write_uint32(507, self.KPCGBPCHBMJ)?;
        }
        if self.client_data_version != 0 {
            os.write_uint32(420, self.client_data_version)?;
        }
        if self.NCNKMDBAFEH != 0 {
            os.write_uint32(1370, self.NCNKMDBAFEH)?;
        }
        if self.EPAGBFLKJBN != 0 {
            os.write_uint32(1691, self.EPAGBFLKJBN)?;
        }
        if self.gm_uid != 0 {
            os.write_uint32(689, self.gm_uid)?;
        }
        if self.BFPJPDCLFNM != 0 {
            os.write_uint32(15, self.BFPJPDCLFNM)?;
        }
        if self.IKKKLHICPMF != 0 {
            os.write_uint32(1977, self.IKKKLHICPMF)?;
        }
        if self.MCKEONLBAOA != 0 {
            os.write_uint32(1521, self.MCKEONLBAOA)?;
        }
        if self.platform_type != 0 {
            os.write_uint32(2, self.platform_type)?;
        }
        if self.KEKHAKAPMIN != 0 {
            os.write_uint32(256, self.KEKHAKAPMIN)?;
        }
        if self.target_uid != 0 {
            os.write_uint32(8, self.target_uid)?;
        }
        if self.DKGAONKKOHA != 0 {
            os.write_uint32(1280, self.DKGAONKKOHA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerLoginReq {
        PlayerLoginReq::new()
    }

    fn clear(&mut self) {
        self.platform.clear();
        self.FBKHEDNNFIF.clear();
        self.JIPHKNNHBIE.clear();
        self.CBIEHLMFBHI.clear();
        self.IMACIIGIOGC.clear();
        self.JJIOHIJNGFP.clear();
        self.token.clear();
        self.extra_bin_data.clear();
        self.LPFPAJBHJMH.clear();
        self.OFMIHDNGFNM.clear();
        self.online_id.clear();
        self.KEODMFOKNGH.clear();
        self.MEEGOICDEFG.clear();
        self.MDIKIHJHHJJ.clear();
        self.HCJGLLHFCMA.clear();
        self.LLIMBPCEABN.clear();
        self.country_code.clear();
        self.PFDFHPKIHMO.clear();
        self.IMCMLAGLODL.clear();
        self.NNBGJPGDGCP.clear();
        self.CDDBBPKKOPM.clear();
        self.psn_id.clear();
        self.birthday.clear();
        self.PECPGFPBJEB.clear();
        self.account_uid.clear();
        self.account_type = 0;
        self.FNPPPMBIBEM = 0;
        self.PLNNJPFPPAM = 0;
        self.target_home_owner_uid = 0;
        self.is_guest = false;
        self.is_editor = false;
        self.JAGELBDJFJH = false;
        self.login_rand = 0;
        self.channel_id = 0;
        self.tag = 0;
        self.KPCGBPCHBMJ = 0;
        self.client_data_version = 0;
        self.NCNKMDBAFEH = 0;
        self.EPAGBFLKJBN = 0;
        self.gm_uid = 0;
        self.BFPJPDCLFNM = 0;
        self.IKKKLHICPMF = 0;
        self.MCKEONLBAOA = 0;
        self.platform_type = 0;
        self.KEKHAKAPMIN = 0;
        self.target_uid = 0;
        self.DKGAONKKOHA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerLoginReq {
        static instance: PlayerLoginReq = PlayerLoginReq {
            platform: ::std::string::String::new(),
            FBKHEDNNFIF: ::std::string::String::new(),
            JIPHKNNHBIE: ::std::string::String::new(),
            CBIEHLMFBHI: ::std::string::String::new(),
            IMACIIGIOGC: ::std::string::String::new(),
            JJIOHIJNGFP: ::std::string::String::new(),
            token: ::std::string::String::new(),
            extra_bin_data: ::std::vec::Vec::new(),
            LPFPAJBHJMH: ::std::string::String::new(),
            OFMIHDNGFNM: ::std::vec::Vec::new(),
            online_id: ::std::string::String::new(),
            KEODMFOKNGH: ::std::string::String::new(),
            MEEGOICDEFG: ::std::string::String::new(),
            MDIKIHJHHJJ: ::std::string::String::new(),
            HCJGLLHFCMA: ::std::string::String::new(),
            LLIMBPCEABN: ::std::string::String::new(),
            country_code: ::std::string::String::new(),
            PFDFHPKIHMO: ::std::vec::Vec::new(),
            IMCMLAGLODL: ::std::string::String::new(),
            NNBGJPGDGCP: ::std::string::String::new(),
            CDDBBPKKOPM: ::std::string::String::new(),
            psn_id: ::std::string::String::new(),
            birthday: ::std::string::String::new(),
            PECPGFPBJEB: ::std::string::String::new(),
            account_uid: ::std::string::String::new(),
            account_type: 0,
            FNPPPMBIBEM: 0,
            PLNNJPFPPAM: 0,
            target_home_owner_uid: 0,
            is_guest: false,
            is_editor: false,
            JAGELBDJFJH: false,
            login_rand: 0,
            channel_id: 0,
            tag: 0,
            KPCGBPCHBMJ: 0,
            client_data_version: 0,
            NCNKMDBAFEH: 0,
            EPAGBFLKJBN: 0,
            gm_uid: 0,
            BFPJPDCLFNM: 0,
            IKKKLHICPMF: 0,
            MCKEONLBAOA: 0,
            platform_type: 0,
            KEKHAKAPMIN: 0,
            target_uid: 0,
            DKGAONKKOHA: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerLoginReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerLoginReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerLoginReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerLoginReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14PlayerLoginReq.proto\"\xbb\x0c\n\x0ePlayerLoginReq\x12\x1a\n\x08pl\
    atform\x18\x0e\x20\x01(\tR\x08platform\x12!\n\x0bFBKHEDNNFIF\x18\x85\r\
    \x20\x01(\tR\x0bFBKHEDNNFIF\x12!\n\x0bJIPHKNNHBIE\x18\x9c\x07\x20\x01(\t\
    R\x0bJIPHKNNHBIE\x12!\n\x0bCBIEHLMFBHI\x18\x99\x0b\x20\x01(\tR\x0bCBIEHL\
    MFBHI\x12\x20\n\x0bIMACIIGIOGC\x18\n\x20\x01(\tR\x0bIMACIIGIOGC\x12\x20\
    \n\x0bJJIOHIJNGFP\x18\x03\x20\x01(\tR\x0bJJIOHIJNGFP\x12\x14\n\x05token\
    \x18\x07\x20\x01(\tR\x05token\x12%\n\x0eextra_bin_data\x18\x9f\t\x20\x01\
    (\x0cR\x0cextraBinData\x12\x20\n\x0bLPFPAJBHJMH\x18.\x20\x01(\tR\x0bLPFP\
    AJBHJMH\x12!\n\x0bOFMIHDNGFNM\x18\x89\x02\x20\x01(\x0cR\x0bOFMIHDNGFNM\
    \x12\x1c\n\tonline_id\x18\xf8\x02\x20\x01(\tR\x08onlineId\x12\x20\n\x0bK\
    EODMFOKNGH\x18\x05\x20\x01(\tR\x0bKEODMFOKNGH\x12!\n\x0bMEEGOICDEFG\x18\
    \x8d\x04\x20\x01(\tR\x0bMEEGOICDEFG\x12\x20\n\x0bMDIKIHJHHJJ\x18\x04\x20\
    \x01(\tR\x0bMDIKIHJHHJJ\x12!\n\x0bHCJGLLHFCMA\x18\x8c\x0c\x20\x01(\tR\
    \x0bHCJGLLHFCMA\x12\x20\n\x0bLLIMBPCEABN\x18V\x20\x01(\tR\x0bLLIMBPCEABN\
    \x12\"\n\x0ccountry_code\x18\xee\r\x20\x01(\tR\x0bcountryCode\x12!\n\x0b\
    PFDFHPKIHMO\x18\xc5\x01\x20\x01(\x0cR\x0bPFDFHPKIHMO\x12!\n\x0bIMCMLAGLO\
    DL\x18\xfa\x08\x20\x01(\tR\x0bIMCMLAGLODL\x12\x20\n\x0bNNBGJPGDGCP\x18\r\
    \x20\x01(\tR\x0bNNBGJPGDGCP\x12!\n\x0bCDDBBPKKOPM\x18\x99\x07\x20\x01(\t\
    R\x0bCDDBBPKKOPM\x12\x16\n\x06psn_id\x18\xe2\r\x20\x01(\tR\x05psnId\x12\
    \x1b\n\x08birthday\x18\x9b\t\x20\x01(\tR\x08birthday\x12!\n\x0bPECPGFPBJ\
    EB\x18\xd8\x01\x20\x01(\tR\x0bPECPGFPBJEB\x12\x1f\n\x0baccount_uid\x18\
    \x0b\x20\x01(\tR\naccountUid\x12!\n\x0caccount_type\x18\t\x20\x01(\rR\
    \x0baccountType\x12!\n\x0bFNPPPMBIBEM\x18\xd9\x02\x20\x01(\rR\x0bFNPPPMB\
    IBEM\x12!\n\x0bPLNNJPFPPAM\x18\xed\x0f\x20\x01(\rR\x0bPLNNJPFPPAM\x122\n\
    \x15target_home_owner_uid\x18\xe2\x01\x20\x01(\rR\x12targetHomeOwnerUid\
    \x12\x19\n\x08is_guest\x18\x06\x20\x01(\x08R\x07isGuest\x12\x1b\n\tis_ed\
    itor\x18\x01\x20\x01(\x08R\x08isEditor\x12!\n\x0bJAGELBDJFJH\x18\xe9\x0c\
    \x20\x01(\x08R\x0bJAGELBDJFJH\x12\x1d\n\nlogin_rand\x18\x0c\x20\x01(\x04\
    R\tloginRand\x12\x1e\n\nchannel_id\x18\xd5\x05\x20\x01(\rR\tchannelId\
    \x12\x11\n\x03tag\x18\x86\t\x20\x01(\rR\x03tag\x12!\n\x0bKPCGBPCHBMJ\x18\
    \xfb\x03\x20\x01(\rR\x0bKPCGBPCHBMJ\x12/\n\x13client_data_version\x18\
    \xa4\x03\x20\x01(\rR\x11clientDataVersion\x12!\n\x0bNCNKMDBAFEH\x18\xda\
    \n\x20\x01(\rR\x0bNCNKMDBAFEH\x12!\n\x0bEPAGBFLKJBN\x18\x9b\r\x20\x01(\r\
    R\x0bEPAGBFLKJBN\x12\x16\n\x06gm_uid\x18\xb1\x05\x20\x01(\rR\x05gmUid\
    \x12\x20\n\x0bBFPJPDCLFNM\x18\x0f\x20\x01(\rR\x0bBFPJPDCLFNM\x12!\n\x0bI\
    KKKLHICPMF\x18\xb9\x0f\x20\x01(\rR\x0bIKKKLHICPMF\x12!\n\x0bMCKEONLBAOA\
    \x18\xf1\x0b\x20\x01(\rR\x0bMCKEONLBAOA\x12#\n\rplatform_type\x18\x02\
    \x20\x01(\rR\x0cplatformType\x12!\n\x0bKEKHAKAPMIN\x18\x80\x02\x20\x01(\
    \rR\x0bKEKHAKAPMIN\x12\x1d\n\ntarget_uid\x18\x08\x20\x01(\rR\ttargetUid\
    \x12!\n\x0bDKGAONKKOHA\x18\x80\n\x20\x01(\rR\x0bDKGAONKKOHAB\x1b\n\x19em\
    u.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerLoginReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
