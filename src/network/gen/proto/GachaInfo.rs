// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GachaInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:GachaInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GachaInfo {
    // message fields
    // @@protoc_insertion_point(field:GachaInfo.end_time)
    pub end_time: u32,
    // @@protoc_insertion_point(field:GachaInfo.wish_progress)
    pub wish_progress: u32,
    // @@protoc_insertion_point(field:GachaInfo.ten_cost_item_num)
    pub ten_cost_item_num: u32,
    // @@protoc_insertion_point(field:GachaInfo.gacha_preview_prefab_path)
    pub gacha_preview_prefab_path: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.begin_time)
    pub begin_time: u32,
    // @@protoc_insertion_point(field:GachaInfo.gacha_record_url)
    pub gacha_record_url: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.cost_item_num)
    pub cost_item_num: u32,
    // @@protoc_insertion_point(field:GachaInfo.schedule_id)
    pub schedule_id: u32,
    // @@protoc_insertion_point(field:GachaInfo.gacha_prob_url)
    pub gacha_prob_url: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.gacha_type)
    pub gacha_type: u32,
    // @@protoc_insertion_point(field:GachaInfo.gacha_prefab_path)
    pub gacha_prefab_path: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.cost_item_id)
    pub cost_item_id: u32,
    // @@protoc_insertion_point(field:GachaInfo.wish_max_progress)
    pub wish_max_progress: u32,
    // @@protoc_insertion_point(field:GachaInfo.left_gacha_times)
    pub left_gacha_times: u32,
    // @@protoc_insertion_point(field:GachaInfo.gacha_times_limit)
    pub gacha_times_limit: u32,
    // @@protoc_insertion_point(field:GachaInfo.display_up5_item_list)
    pub display_up5_item_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GachaInfo.ten_cost_item_id)
    pub ten_cost_item_id: u32,
    // @@protoc_insertion_point(field:GachaInfo.is_new_wish)
    pub is_new_wish: bool,
    // @@protoc_insertion_point(field:GachaInfo.wish_item_id)
    pub wish_item_id: u32,
    // @@protoc_insertion_point(field:GachaInfo.title_textmap)
    pub title_textmap: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.gacha_prob_url_oversea)
    pub gacha_prob_url_oversea: ::std::string::String,
    // @@protoc_insertion_point(field:GachaInfo.cur_schedule_daily_gacha_times)
    pub cur_schedule_daily_gacha_times: u32,
    // @@protoc_insertion_point(field:GachaInfo.EFPBICLMCGG)
    pub EFPBICLMCGG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GachaInfo.LAGAHPEKLHM)
    pub LAGAHPEKLHM: bool,
    // @@protoc_insertion_point(field:GachaInfo.gacha_up_info_list)
    pub gacha_up_info_list: ::std::vec::Vec<super::GachaUpInfo::GachaUpInfo>,
    // @@protoc_insertion_point(field:GachaInfo.display_up4_item_list)
    pub display_up4_item_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GachaInfo.gacha_sort_id)
    pub gacha_sort_id: u32,
    // @@protoc_insertion_point(field:GachaInfo.gacha_record_url_oversea)
    pub gacha_record_url_oversea: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GachaInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GachaInfo {
    fn default() -> &'a GachaInfo {
        <GachaInfo as ::protobuf::Message>::default_instance()
    }
}

impl GachaInfo {
    pub fn new() -> GachaInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(28);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &GachaInfo| { &m.end_time },
            |m: &mut GachaInfo| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wish_progress",
            |m: &GachaInfo| { &m.wish_progress },
            |m: &mut GachaInfo| { &mut m.wish_progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ten_cost_item_num",
            |m: &GachaInfo| { &m.ten_cost_item_num },
            |m: &mut GachaInfo| { &mut m.ten_cost_item_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_preview_prefab_path",
            |m: &GachaInfo| { &m.gacha_preview_prefab_path },
            |m: &mut GachaInfo| { &mut m.gacha_preview_prefab_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &GachaInfo| { &m.begin_time },
            |m: &mut GachaInfo| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_record_url",
            |m: &GachaInfo| { &m.gacha_record_url },
            |m: &mut GachaInfo| { &mut m.gacha_record_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cost_item_num",
            |m: &GachaInfo| { &m.cost_item_num },
            |m: &mut GachaInfo| { &mut m.cost_item_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &GachaInfo| { &m.schedule_id },
            |m: &mut GachaInfo| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_prob_url",
            |m: &GachaInfo| { &m.gacha_prob_url },
            |m: &mut GachaInfo| { &mut m.gacha_prob_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_type",
            |m: &GachaInfo| { &m.gacha_type },
            |m: &mut GachaInfo| { &mut m.gacha_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_prefab_path",
            |m: &GachaInfo| { &m.gacha_prefab_path },
            |m: &mut GachaInfo| { &mut m.gacha_prefab_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cost_item_id",
            |m: &GachaInfo| { &m.cost_item_id },
            |m: &mut GachaInfo| { &mut m.cost_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wish_max_progress",
            |m: &GachaInfo| { &m.wish_max_progress },
            |m: &mut GachaInfo| { &mut m.wish_max_progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "left_gacha_times",
            |m: &GachaInfo| { &m.left_gacha_times },
            |m: &mut GachaInfo| { &mut m.left_gacha_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_times_limit",
            |m: &GachaInfo| { &m.gacha_times_limit },
            |m: &mut GachaInfo| { &mut m.gacha_times_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "display_up5_item_list",
            |m: &GachaInfo| { &m.display_up5_item_list },
            |m: &mut GachaInfo| { &mut m.display_up5_item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ten_cost_item_id",
            |m: &GachaInfo| { &m.ten_cost_item_id },
            |m: &mut GachaInfo| { &mut m.ten_cost_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_new_wish",
            |m: &GachaInfo| { &m.is_new_wish },
            |m: &mut GachaInfo| { &mut m.is_new_wish },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wish_item_id",
            |m: &GachaInfo| { &m.wish_item_id },
            |m: &mut GachaInfo| { &mut m.wish_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title_textmap",
            |m: &GachaInfo| { &m.title_textmap },
            |m: &mut GachaInfo| { &mut m.title_textmap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_prob_url_oversea",
            |m: &GachaInfo| { &m.gacha_prob_url_oversea },
            |m: &mut GachaInfo| { &mut m.gacha_prob_url_oversea },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_schedule_daily_gacha_times",
            |m: &GachaInfo| { &m.cur_schedule_daily_gacha_times },
            |m: &mut GachaInfo| { &mut m.cur_schedule_daily_gacha_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EFPBICLMCGG",
            |m: &GachaInfo| { &m.EFPBICLMCGG },
            |m: &mut GachaInfo| { &mut m.EFPBICLMCGG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LAGAHPEKLHM",
            |m: &GachaInfo| { &m.LAGAHPEKLHM },
            |m: &mut GachaInfo| { &mut m.LAGAHPEKLHM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "gacha_up_info_list",
            |m: &GachaInfo| { &m.gacha_up_info_list },
            |m: &mut GachaInfo| { &mut m.gacha_up_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "display_up4_item_list",
            |m: &GachaInfo| { &m.display_up4_item_list },
            |m: &mut GachaInfo| { &mut m.display_up4_item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_sort_id",
            |m: &GachaInfo| { &m.gacha_sort_id },
            |m: &mut GachaInfo| { &mut m.gacha_sort_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_record_url_oversea",
            |m: &GachaInfo| { &m.gacha_record_url_oversea },
            |m: &mut GachaInfo| { &mut m.gacha_record_url_oversea },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GachaInfo>(
            "GachaInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GachaInfo {
    const NAME: &'static str = "GachaInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.end_time = is.read_uint32()?;
                },
                16 => {
                    self.wish_progress = is.read_uint32()?;
                },
                24 => {
                    self.ten_cost_item_num = is.read_uint32()?;
                },
                34 => {
                    self.gacha_preview_prefab_path = is.read_string()?;
                },
                40 => {
                    self.begin_time = is.read_uint32()?;
                },
                50 => {
                    self.gacha_record_url = is.read_string()?;
                },
                56 => {
                    self.cost_item_num = is.read_uint32()?;
                },
                64 => {
                    self.schedule_id = is.read_uint32()?;
                },
                74 => {
                    self.gacha_prob_url = is.read_string()?;
                },
                80 => {
                    self.gacha_type = is.read_uint32()?;
                },
                90 => {
                    self.gacha_prefab_path = is.read_string()?;
                },
                96 => {
                    self.cost_item_id = is.read_uint32()?;
                },
                104 => {
                    self.wish_max_progress = is.read_uint32()?;
                },
                112 => {
                    self.left_gacha_times = is.read_uint32()?;
                },
                120 => {
                    self.gacha_times_limit = is.read_uint32()?;
                },
                794 => {
                    is.read_repeated_packed_uint32_into(&mut self.display_up5_item_list)?;
                },
                792 => {
                    self.display_up5_item_list.push(is.read_uint32()?);
                },
                1944 => {
                    self.ten_cost_item_id = is.read_uint32()?;
                },
                2008 => {
                    self.is_new_wish = is.read_bool()?;
                },
                4792 => {
                    self.wish_item_id = is.read_uint32()?;
                },
                6258 => {
                    self.title_textmap = is.read_string()?;
                },
                6386 => {
                    self.gacha_prob_url_oversea = is.read_string()?;
                },
                8696 => {
                    self.cur_schedule_daily_gacha_times = is.read_uint32()?;
                },
                11586 => {
                    is.read_repeated_packed_uint32_into(&mut self.EFPBICLMCGG)?;
                },
                11584 => {
                    self.EFPBICLMCGG.push(is.read_uint32()?);
                },
                12072 => {
                    self.LAGAHPEKLHM = is.read_bool()?;
                },
                13690 => {
                    self.gacha_up_info_list.push(is.read_message()?);
                },
                15058 => {
                    is.read_repeated_packed_uint32_into(&mut self.display_up4_item_list)?;
                },
                15056 => {
                    self.display_up4_item_list.push(is.read_uint32()?);
                },
                15504 => {
                    self.gacha_sort_id = is.read_uint32()?;
                },
                15874 => {
                    self.gacha_record_url_oversea = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.end_time);
        }
        if self.wish_progress != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.wish_progress);
        }
        if self.ten_cost_item_num != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.ten_cost_item_num);
        }
        if !self.gacha_preview_prefab_path.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.gacha_preview_prefab_path);
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.begin_time);
        }
        if !self.gacha_record_url.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.gacha_record_url);
        }
        if self.cost_item_num != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.cost_item_num);
        }
        if self.schedule_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.schedule_id);
        }
        if !self.gacha_prob_url.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.gacha_prob_url);
        }
        if self.gacha_type != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.gacha_type);
        }
        if !self.gacha_prefab_path.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.gacha_prefab_path);
        }
        if self.cost_item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.cost_item_id);
        }
        if self.wish_max_progress != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.wish_max_progress);
        }
        if self.left_gacha_times != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.left_gacha_times);
        }
        if self.gacha_times_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.gacha_times_limit);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(99, &self.display_up5_item_list);
        if self.ten_cost_item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(243, self.ten_cost_item_id);
        }
        if self.is_new_wish != false {
            my_size += 2 + 1;
        }
        if self.wish_item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(599, self.wish_item_id);
        }
        if !self.title_textmap.is_empty() {
            my_size += ::protobuf::rt::string_size(782, &self.title_textmap);
        }
        if !self.gacha_prob_url_oversea.is_empty() {
            my_size += ::protobuf::rt::string_size(798, &self.gacha_prob_url_oversea);
        }
        if self.cur_schedule_daily_gacha_times != 0 {
            my_size += ::protobuf::rt::uint32_size(1087, self.cur_schedule_daily_gacha_times);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(1448, &self.EFPBICLMCGG);
        if self.LAGAHPEKLHM != false {
            my_size += 2 + 1;
        }
        for value in &self.gacha_up_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(1882, &self.display_up4_item_list);
        if self.gacha_sort_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1938, self.gacha_sort_id);
        }
        if !self.gacha_record_url_oversea.is_empty() {
            my_size += ::protobuf::rt::string_size(1984, &self.gacha_record_url_oversea);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.end_time != 0 {
            os.write_uint32(1, self.end_time)?;
        }
        if self.wish_progress != 0 {
            os.write_uint32(2, self.wish_progress)?;
        }
        if self.ten_cost_item_num != 0 {
            os.write_uint32(3, self.ten_cost_item_num)?;
        }
        if !self.gacha_preview_prefab_path.is_empty() {
            os.write_string(4, &self.gacha_preview_prefab_path)?;
        }
        if self.begin_time != 0 {
            os.write_uint32(5, self.begin_time)?;
        }
        if !self.gacha_record_url.is_empty() {
            os.write_string(6, &self.gacha_record_url)?;
        }
        if self.cost_item_num != 0 {
            os.write_uint32(7, self.cost_item_num)?;
        }
        if self.schedule_id != 0 {
            os.write_uint32(8, self.schedule_id)?;
        }
        if !self.gacha_prob_url.is_empty() {
            os.write_string(9, &self.gacha_prob_url)?;
        }
        if self.gacha_type != 0 {
            os.write_uint32(10, self.gacha_type)?;
        }
        if !self.gacha_prefab_path.is_empty() {
            os.write_string(11, &self.gacha_prefab_path)?;
        }
        if self.cost_item_id != 0 {
            os.write_uint32(12, self.cost_item_id)?;
        }
        if self.wish_max_progress != 0 {
            os.write_uint32(13, self.wish_max_progress)?;
        }
        if self.left_gacha_times != 0 {
            os.write_uint32(14, self.left_gacha_times)?;
        }
        if self.gacha_times_limit != 0 {
            os.write_uint32(15, self.gacha_times_limit)?;
        }
        os.write_repeated_packed_uint32(99, &self.display_up5_item_list)?;
        if self.ten_cost_item_id != 0 {
            os.write_uint32(243, self.ten_cost_item_id)?;
        }
        if self.is_new_wish != false {
            os.write_bool(251, self.is_new_wish)?;
        }
        if self.wish_item_id != 0 {
            os.write_uint32(599, self.wish_item_id)?;
        }
        if !self.title_textmap.is_empty() {
            os.write_string(782, &self.title_textmap)?;
        }
        if !self.gacha_prob_url_oversea.is_empty() {
            os.write_string(798, &self.gacha_prob_url_oversea)?;
        }
        if self.cur_schedule_daily_gacha_times != 0 {
            os.write_uint32(1087, self.cur_schedule_daily_gacha_times)?;
        }
        os.write_repeated_packed_uint32(1448, &self.EFPBICLMCGG)?;
        if self.LAGAHPEKLHM != false {
            os.write_bool(1509, self.LAGAHPEKLHM)?;
        }
        for v in &self.gacha_up_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(1711, v, os)?;
        };
        os.write_repeated_packed_uint32(1882, &self.display_up4_item_list)?;
        if self.gacha_sort_id != 0 {
            os.write_uint32(1938, self.gacha_sort_id)?;
        }
        if !self.gacha_record_url_oversea.is_empty() {
            os.write_string(1984, &self.gacha_record_url_oversea)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GachaInfo {
        GachaInfo::new()
    }

    fn clear(&mut self) {
        self.end_time = 0;
        self.wish_progress = 0;
        self.ten_cost_item_num = 0;
        self.gacha_preview_prefab_path.clear();
        self.begin_time = 0;
        self.gacha_record_url.clear();
        self.cost_item_num = 0;
        self.schedule_id = 0;
        self.gacha_prob_url.clear();
        self.gacha_type = 0;
        self.gacha_prefab_path.clear();
        self.cost_item_id = 0;
        self.wish_max_progress = 0;
        self.left_gacha_times = 0;
        self.gacha_times_limit = 0;
        self.display_up5_item_list.clear();
        self.ten_cost_item_id = 0;
        self.is_new_wish = false;
        self.wish_item_id = 0;
        self.title_textmap.clear();
        self.gacha_prob_url_oversea.clear();
        self.cur_schedule_daily_gacha_times = 0;
        self.EFPBICLMCGG.clear();
        self.LAGAHPEKLHM = false;
        self.gacha_up_info_list.clear();
        self.display_up4_item_list.clear();
        self.gacha_sort_id = 0;
        self.gacha_record_url_oversea.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GachaInfo {
        static instance: GachaInfo = GachaInfo {
            end_time: 0,
            wish_progress: 0,
            ten_cost_item_num: 0,
            gacha_preview_prefab_path: ::std::string::String::new(),
            begin_time: 0,
            gacha_record_url: ::std::string::String::new(),
            cost_item_num: 0,
            schedule_id: 0,
            gacha_prob_url: ::std::string::String::new(),
            gacha_type: 0,
            gacha_prefab_path: ::std::string::String::new(),
            cost_item_id: 0,
            wish_max_progress: 0,
            left_gacha_times: 0,
            gacha_times_limit: 0,
            display_up5_item_list: ::std::vec::Vec::new(),
            ten_cost_item_id: 0,
            is_new_wish: false,
            wish_item_id: 0,
            title_textmap: ::std::string::String::new(),
            gacha_prob_url_oversea: ::std::string::String::new(),
            cur_schedule_daily_gacha_times: 0,
            EFPBICLMCGG: ::std::vec::Vec::new(),
            LAGAHPEKLHM: false,
            gacha_up_info_list: ::std::vec::Vec::new(),
            display_up4_item_list: ::std::vec::Vec::new(),
            gacha_sort_id: 0,
            gacha_record_url_oversea: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GachaInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GachaInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GachaInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GachaInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fGachaInfo.proto\x1a\x11GachaUpInfo.proto\"\xab\t\n\tGachaInfo\x12\
    \x19\n\x08end_time\x18\x01\x20\x01(\rR\x07endTime\x12#\n\rwish_progress\
    \x18\x02\x20\x01(\rR\x0cwishProgress\x12)\n\x11ten_cost_item_num\x18\x03\
    \x20\x01(\rR\x0etenCostItemNum\x129\n\x19gacha_preview_prefab_path\x18\
    \x04\x20\x01(\tR\x16gachaPreviewPrefabPath\x12\x1d\n\nbegin_time\x18\x05\
    \x20\x01(\rR\tbeginTime\x12(\n\x10gacha_record_url\x18\x06\x20\x01(\tR\
    \x0egachaRecordUrl\x12\"\n\rcost_item_num\x18\x07\x20\x01(\rR\x0bcostIte\
    mNum\x12\x1f\n\x0bschedule_id\x18\x08\x20\x01(\rR\nscheduleId\x12$\n\x0e\
    gacha_prob_url\x18\t\x20\x01(\tR\x0cgachaProbUrl\x12\x1d\n\ngacha_type\
    \x18\n\x20\x01(\rR\tgachaType\x12*\n\x11gacha_prefab_path\x18\x0b\x20\
    \x01(\tR\x0fgachaPrefabPath\x12\x20\n\x0ccost_item_id\x18\x0c\x20\x01(\r\
    R\ncostItemId\x12*\n\x11wish_max_progress\x18\r\x20\x01(\rR\x0fwishMaxPr\
    ogress\x12(\n\x10left_gacha_times\x18\x0e\x20\x01(\rR\x0eleftGachaTimes\
    \x12*\n\x11gacha_times_limit\x18\x0f\x20\x01(\rR\x0fgachaTimesLimit\x121\
    \n\x15display_up5_item_list\x18c\x20\x03(\rR\x12displayUp5ItemList\x12(\
    \n\x10ten_cost_item_id\x18\xf3\x01\x20\x01(\rR\rtenCostItemId\x12\x1f\n\
    \x0bis_new_wish\x18\xfb\x01\x20\x01(\x08R\tisNewWish\x12!\n\x0cwish_item\
    _id\x18\xd7\x04\x20\x01(\rR\nwishItemId\x12$\n\rtitle_textmap\x18\x8e\
    \x06\x20\x01(\tR\x0ctitleTextmap\x124\n\x16gacha_prob_url_oversea\x18\
    \x9e\x06\x20\x01(\tR\x13gachaProbUrlOversea\x12C\n\x1ecur_schedule_daily\
    _gacha_times\x18\xbf\x08\x20\x01(\rR\x1acurScheduleDailyGachaTimes\x12!\
    \n\x0bEFPBICLMCGG\x18\xa8\x0b\x20\x03(\rR\x0bEFPBICLMCGG\x12!\n\x0bLAGAH\
    PEKLHM\x18\xe5\x0b\x20\x01(\x08R\x0bLAGAHPEKLHM\x12:\n\x12gacha_up_info_\
    list\x18\xaf\r\x20\x03(\x0b2\x0c.GachaUpInfoR\x0fgachaUpInfoList\x122\n\
    \x15display_up4_item_list\x18\xda\x0e\x20\x03(\rR\x12displayUp4ItemList\
    \x12#\n\rgacha_sort_id\x18\x92\x0f\x20\x01(\rR\x0bgachaSortId\x128\n\x18\
    gacha_record_url_oversea\x18\xc0\x0f\x20\x01(\tR\x15gachaRecordUrlOverse\
    aB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::GachaUpInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GachaInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
