// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EvtAvatarEnterFocusNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:EvtAvatarEnterFocusNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvtAvatarEnterFocusNotify {
    // message fields
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.focus_forward)
    pub focus_forward: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.forward_type)
    pub forward_type: ::protobuf::EnumOrUnknown<super::ForwardType::ForwardType>,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.entity_id)
    pub entity_id: u32,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt1)
    pub bt1: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt2)
    pub bt2: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt3)
    pub bt3: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt4)
    pub bt4: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt5)
    pub bt5: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt6)
    pub bt6: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt7)
    pub bt7: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt8)
    pub bt8: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt9)
    pub bt9: bool,
    // @@protoc_insertion_point(field:EvtAvatarEnterFocusNotify.bt110)
    pub bt110: bool,
    // special fields
    // @@protoc_insertion_point(special_field:EvtAvatarEnterFocusNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvtAvatarEnterFocusNotify {
    fn default() -> &'a EvtAvatarEnterFocusNotify {
        <EvtAvatarEnterFocusNotify as ::protobuf::Message>::default_instance()
    }
}

impl EvtAvatarEnterFocusNotify {
    pub fn new() -> EvtAvatarEnterFocusNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "focus_forward",
            |m: &EvtAvatarEnterFocusNotify| { &m.focus_forward },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.focus_forward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "forward_type",
            |m: &EvtAvatarEnterFocusNotify| { &m.forward_type },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.forward_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_id",
            |m: &EvtAvatarEnterFocusNotify| { &m.entity_id },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.entity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt1",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt1 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt2",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt2 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt3",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt3 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt4",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt4 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt5",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt5 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt6",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt6 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt7",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt7 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt7 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt8",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt8 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt8 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt9",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt9 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt9 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bt110",
            |m: &EvtAvatarEnterFocusNotify| { &m.bt110 },
            |m: &mut EvtAvatarEnterFocusNotify| { &mut m.bt110 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvtAvatarEnterFocusNotify>(
            "EvtAvatarEnterFocusNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvtAvatarEnterFocusNotify {
    const NAME: &'static str = "EvtAvatarEnterFocusNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.focus_forward)?;
                },
                96 => {
                    self.forward_type = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.entity_id = is.read_uint32()?;
                },
                8 => {
                    self.bt1 = is.read_bool()?;
                },
                16 => {
                    self.bt2 = is.read_bool()?;
                },
                40 => {
                    self.bt3 = is.read_bool()?;
                },
                48 => {
                    self.bt4 = is.read_bool()?;
                },
                64 => {
                    self.bt5 = is.read_bool()?;
                },
                72 => {
                    self.bt6 = is.read_bool()?;
                },
                80 => {
                    self.bt7 = is.read_bool()?;
                },
                104 => {
                    self.bt8 = is.read_bool()?;
                },
                112 => {
                    self.bt9 = is.read_bool()?;
                },
                120 => {
                    self.bt110 = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.focus_forward.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.forward_type != ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL) {
            my_size += ::protobuf::rt::int32_size(12, self.forward_type.value());
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.entity_id);
        }
        if self.bt1 != false {
            my_size += 1 + 1;
        }
        if self.bt2 != false {
            my_size += 1 + 1;
        }
        if self.bt3 != false {
            my_size += 1 + 1;
        }
        if self.bt4 != false {
            my_size += 1 + 1;
        }
        if self.bt5 != false {
            my_size += 1 + 1;
        }
        if self.bt6 != false {
            my_size += 1 + 1;
        }
        if self.bt7 != false {
            my_size += 1 + 1;
        }
        if self.bt8 != false {
            my_size += 1 + 1;
        }
        if self.bt9 != false {
            my_size += 1 + 1;
        }
        if self.bt110 != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.focus_forward.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.forward_type != ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL) {
            os.write_enum(12, ::protobuf::EnumOrUnknown::value(&self.forward_type))?;
        }
        if self.entity_id != 0 {
            os.write_uint32(3, self.entity_id)?;
        }
        if self.bt1 != false {
            os.write_bool(1, self.bt1)?;
        }
        if self.bt2 != false {
            os.write_bool(2, self.bt2)?;
        }
        if self.bt3 != false {
            os.write_bool(5, self.bt3)?;
        }
        if self.bt4 != false {
            os.write_bool(6, self.bt4)?;
        }
        if self.bt5 != false {
            os.write_bool(8, self.bt5)?;
        }
        if self.bt6 != false {
            os.write_bool(9, self.bt6)?;
        }
        if self.bt7 != false {
            os.write_bool(10, self.bt7)?;
        }
        if self.bt8 != false {
            os.write_bool(13, self.bt8)?;
        }
        if self.bt9 != false {
            os.write_bool(14, self.bt9)?;
        }
        if self.bt110 != false {
            os.write_bool(15, self.bt110)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvtAvatarEnterFocusNotify {
        EvtAvatarEnterFocusNotify::new()
    }

    fn clear(&mut self) {
        self.focus_forward.clear();
        self.forward_type = ::protobuf::EnumOrUnknown::new(super::ForwardType::ForwardType::FORWARD_TYPE_LOCAL);
        self.entity_id = 0;
        self.bt1 = false;
        self.bt2 = false;
        self.bt3 = false;
        self.bt4 = false;
        self.bt5 = false;
        self.bt6 = false;
        self.bt7 = false;
        self.bt8 = false;
        self.bt9 = false;
        self.bt110 = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvtAvatarEnterFocusNotify {
        static instance: EvtAvatarEnterFocusNotify = EvtAvatarEnterFocusNotify {
            focus_forward: ::protobuf::MessageField::none(),
            forward_type: ::protobuf::EnumOrUnknown::from_i32(0),
            entity_id: 0,
            bt1: false,
            bt2: false,
            bt3: false,
            bt4: false,
            bt5: false,
            bt6: false,
            bt7: false,
            bt8: false,
            bt9: false,
            bt110: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvtAvatarEnterFocusNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvtAvatarEnterFocusNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvtAvatarEnterFocusNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvtAvatarEnterFocusNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fEvtAvatarEnterFocusNotify.proto\x1a\x0cVector.proto\x1a\x11Forward\
    Type.proto\"\xcf\x02\n\x19EvtAvatarEnterFocusNotify\x12,\n\rfocus_forwar\
    d\x18\x04\x20\x01(\x0b2\x07.VectorR\x0cfocusForward\x12/\n\x0cforward_ty\
    pe\x18\x0c\x20\x01(\x0e2\x0c.ForwardTypeR\x0bforwardType\x12\x1b\n\tenti\
    ty_id\x18\x03\x20\x01(\rR\x08entityId\x12\x10\n\x03bt1\x18\x01\x20\x01(\
    \x08R\x03bt1\x12\x10\n\x03bt2\x18\x02\x20\x01(\x08R\x03bt2\x12\x10\n\x03\
    bt3\x18\x05\x20\x01(\x08R\x03bt3\x12\x10\n\x03bt4\x18\x06\x20\x01(\x08R\
    \x03bt4\x12\x10\n\x03bt5\x18\x08\x20\x01(\x08R\x03bt5\x12\x10\n\x03bt6\
    \x18\t\x20\x01(\x08R\x03bt6\x12\x10\n\x03bt7\x18\n\x20\x01(\x08R\x03bt7\
    \x12\x10\n\x03bt8\x18\r\x20\x01(\x08R\x03bt8\x12\x10\n\x03bt9\x18\x0e\
    \x20\x01(\x08R\x03bt9\x12\x14\n\x05bt110\x18\x0f\x20\x01(\x08R\x05bt110B\
    \x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::Vector::file_descriptor().clone());
            deps.push(super::ForwardType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EvtAvatarEnterFocusNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
