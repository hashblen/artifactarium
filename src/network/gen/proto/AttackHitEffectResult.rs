// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AttackHitEffectResult.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:AttackHitEffectResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AttackHitEffectResult {
    // message fields
    // @@protoc_insertion_point(field:AttackHitEffectResult.KIHHJKCGGCC)
    pub KIHHJKCGGCC: u32,
    // @@protoc_insertion_point(field:AttackHitEffectResult.HFHKMEOPFBI)
    pub HFHKMEOPFBI: f32,
    // @@protoc_insertion_point(field:AttackHitEffectResult.ECBDDJLPPMK)
    pub ECBDDJLPPMK: u32,
    // @@protoc_insertion_point(field:AttackHitEffectResult.DADJPJBELMO)
    pub DADJPJBELMO: f32,
    // @@protoc_insertion_point(field:AttackHitEffectResult.HDJALIDKDPN)
    pub HDJALIDKDPN: f32,
    // @@protoc_insertion_point(field:AttackHitEffectResult.CCLCOGCLHKO)
    pub CCLCOGCLHKO: f32,
    // special fields
    // @@protoc_insertion_point(special_field:AttackHitEffectResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttackHitEffectResult {
    fn default() -> &'a AttackHitEffectResult {
        <AttackHitEffectResult as ::protobuf::Message>::default_instance()
    }
}

impl AttackHitEffectResult {
    pub fn new() -> AttackHitEffectResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KIHHJKCGGCC",
            |m: &AttackHitEffectResult| { &m.KIHHJKCGGCC },
            |m: &mut AttackHitEffectResult| { &mut m.KIHHJKCGGCC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HFHKMEOPFBI",
            |m: &AttackHitEffectResult| { &m.HFHKMEOPFBI },
            |m: &mut AttackHitEffectResult| { &mut m.HFHKMEOPFBI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ECBDDJLPPMK",
            |m: &AttackHitEffectResult| { &m.ECBDDJLPPMK },
            |m: &mut AttackHitEffectResult| { &mut m.ECBDDJLPPMK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DADJPJBELMO",
            |m: &AttackHitEffectResult| { &m.DADJPJBELMO },
            |m: &mut AttackHitEffectResult| { &mut m.DADJPJBELMO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDJALIDKDPN",
            |m: &AttackHitEffectResult| { &m.HDJALIDKDPN },
            |m: &mut AttackHitEffectResult| { &mut m.HDJALIDKDPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCLCOGCLHKO",
            |m: &AttackHitEffectResult| { &m.CCLCOGCLHKO },
            |m: &mut AttackHitEffectResult| { &mut m.CCLCOGCLHKO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttackHitEffectResult>(
            "AttackHitEffectResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttackHitEffectResult {
    const NAME: &'static str = "AttackHitEffectResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.KIHHJKCGGCC = is.read_uint32()?;
                },
                45 => {
                    self.HFHKMEOPFBI = is.read_float()?;
                },
                48 => {
                    self.ECBDDJLPPMK = is.read_uint32()?;
                },
                69 => {
                    self.DADJPJBELMO = is.read_float()?;
                },
                85 => {
                    self.HDJALIDKDPN = is.read_float()?;
                },
                109 => {
                    self.CCLCOGCLHKO = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.KIHHJKCGGCC != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.KIHHJKCGGCC);
        }
        if self.HFHKMEOPFBI != 0. {
            my_size += 1 + 4;
        }
        if self.ECBDDJLPPMK != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.ECBDDJLPPMK);
        }
        if self.DADJPJBELMO != 0. {
            my_size += 1 + 4;
        }
        if self.HDJALIDKDPN != 0. {
            my_size += 1 + 4;
        }
        if self.CCLCOGCLHKO != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.KIHHJKCGGCC != 0 {
            os.write_uint32(3, self.KIHHJKCGGCC)?;
        }
        if self.HFHKMEOPFBI != 0. {
            os.write_float(5, self.HFHKMEOPFBI)?;
        }
        if self.ECBDDJLPPMK != 0 {
            os.write_uint32(6, self.ECBDDJLPPMK)?;
        }
        if self.DADJPJBELMO != 0. {
            os.write_float(8, self.DADJPJBELMO)?;
        }
        if self.HDJALIDKDPN != 0. {
            os.write_float(10, self.HDJALIDKDPN)?;
        }
        if self.CCLCOGCLHKO != 0. {
            os.write_float(13, self.CCLCOGCLHKO)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttackHitEffectResult {
        AttackHitEffectResult::new()
    }

    fn clear(&mut self) {
        self.KIHHJKCGGCC = 0;
        self.HFHKMEOPFBI = 0.;
        self.ECBDDJLPPMK = 0;
        self.DADJPJBELMO = 0.;
        self.HDJALIDKDPN = 0.;
        self.CCLCOGCLHKO = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttackHitEffectResult {
        static instance: AttackHitEffectResult = AttackHitEffectResult {
            KIHHJKCGGCC: 0,
            HFHKMEOPFBI: 0.,
            ECBDDJLPPMK: 0,
            DADJPJBELMO: 0.,
            HDJALIDKDPN: 0.,
            CCLCOGCLHKO: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttackHitEffectResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttackHitEffectResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttackHitEffectResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttackHitEffectResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bAttackHitEffectResult.proto\"\xe3\x01\n\x15AttackHitEffectResult\
    \x12\x20\n\x0bKIHHJKCGGCC\x18\x03\x20\x01(\rR\x0bKIHHJKCGGCC\x12\x20\n\
    \x0bHFHKMEOPFBI\x18\x05\x20\x01(\x02R\x0bHFHKMEOPFBI\x12\x20\n\x0bECBDDJ\
    LPPMK\x18\x06\x20\x01(\rR\x0bECBDDJLPPMK\x12\x20\n\x0bDADJPJBELMO\x18\
    \x08\x20\x01(\x02R\x0bDADJPJBELMO\x12\x20\n\x0bHDJALIDKDPN\x18\n\x20\x01\
    (\x02R\x0bHDJALIDKDPN\x12\x20\n\x0bCCLCOGCLHKO\x18\r\x20\x01(\x02R\x0bCC\
    LCOGCLHKOB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AttackHitEffectResult::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
