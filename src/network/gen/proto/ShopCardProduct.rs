// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ShopCardProduct.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:ShopCardProduct)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ShopCardProduct {
    // message fields
    // @@protoc_insertion_point(field:ShopCardProduct.product_id)
    pub product_id: ::std::string::String,
    // @@protoc_insertion_point(field:ShopCardProduct.price_tier)
    pub price_tier: ::std::string::String,
    // @@protoc_insertion_point(field:ShopCardProduct.mcoin_base)
    pub mcoin_base: u32,
    // @@protoc_insertion_point(field:ShopCardProduct.hcoin_per_day)
    pub hcoin_per_day: u32,
    // @@protoc_insertion_point(field:ShopCardProduct.days)
    pub days: u32,
    // @@protoc_insertion_point(field:ShopCardProduct.remain_reward_days)
    pub remain_reward_days: u32,
    // @@protoc_insertion_point(field:ShopCardProduct.card_product_type)
    pub card_product_type: u32,
    // message oneof groups
    pub HLAOFKPENGI: ::std::option::Option<shop_card_product::HLAOFKPENGI>,
    // special fields
    // @@protoc_insertion_point(special_field:ShopCardProduct.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShopCardProduct {
    fn default() -> &'a ShopCardProduct {
        <ShopCardProduct as ::protobuf::Message>::default_instance()
    }
}

impl ShopCardProduct {
    pub fn new() -> ShopCardProduct {
        ::std::default::Default::default()
    }

    // .ResinCard resin_card = 101;

    pub fn resin_card(&self) -> &super::ResinCard::ResinCard {
        match self.HLAOFKPENGI {
            ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(ref v)) => v,
            _ => <super::ResinCard::ResinCard as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_resin_card(&mut self) {
        self.HLAOFKPENGI = ::std::option::Option::None;
    }

    pub fn has_resin_card(&self) -> bool {
        match self.HLAOFKPENGI {
            ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resin_card(&mut self, v: super::ResinCard::ResinCard) {
        self.HLAOFKPENGI = ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resin_card(&mut self) -> &mut super::ResinCard::ResinCard {
        if let ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(_)) = self.HLAOFKPENGI {
        } else {
            self.HLAOFKPENGI = ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(super::ResinCard::ResinCard::new()));
        }
        match self.HLAOFKPENGI {
            ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resin_card(&mut self) -> super::ResinCard::ResinCard {
        if self.has_resin_card() {
            match self.HLAOFKPENGI.take() {
                ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ResinCard::ResinCard::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "product_id",
            |m: &ShopCardProduct| { &m.product_id },
            |m: &mut ShopCardProduct| { &mut m.product_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price_tier",
            |m: &ShopCardProduct| { &m.price_tier },
            |m: &mut ShopCardProduct| { &mut m.price_tier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mcoin_base",
            |m: &ShopCardProduct| { &m.mcoin_base },
            |m: &mut ShopCardProduct| { &mut m.mcoin_base },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hcoin_per_day",
            |m: &ShopCardProduct| { &m.hcoin_per_day },
            |m: &mut ShopCardProduct| { &mut m.hcoin_per_day },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "days",
            |m: &ShopCardProduct| { &m.days },
            |m: &mut ShopCardProduct| { &mut m.days },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remain_reward_days",
            |m: &ShopCardProduct| { &m.remain_reward_days },
            |m: &mut ShopCardProduct| { &mut m.remain_reward_days },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "card_product_type",
            |m: &ShopCardProduct| { &m.card_product_type },
            |m: &mut ShopCardProduct| { &mut m.card_product_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ResinCard::ResinCard>(
            "resin_card",
            ShopCardProduct::has_resin_card,
            ShopCardProduct::resin_card,
            ShopCardProduct::mut_resin_card,
            ShopCardProduct::set_resin_card,
        ));
        oneofs.push(shop_card_product::HLAOFKPENGI::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShopCardProduct>(
            "ShopCardProduct",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShopCardProduct {
    const NAME: &'static str = "ShopCardProduct";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.product_id = is.read_string()?;
                },
                18 => {
                    self.price_tier = is.read_string()?;
                },
                24 => {
                    self.mcoin_base = is.read_uint32()?;
                },
                32 => {
                    self.hcoin_per_day = is.read_uint32()?;
                },
                40 => {
                    self.days = is.read_uint32()?;
                },
                48 => {
                    self.remain_reward_days = is.read_uint32()?;
                },
                56 => {
                    self.card_product_type = is.read_uint32()?;
                },
                810 => {
                    self.HLAOFKPENGI = ::std::option::Option::Some(shop_card_product::HLAOFKPENGI::ResinCard(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.product_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.product_id);
        }
        if !self.price_tier.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.price_tier);
        }
        if self.mcoin_base != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.mcoin_base);
        }
        if self.hcoin_per_day != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.hcoin_per_day);
        }
        if self.days != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.days);
        }
        if self.remain_reward_days != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.remain_reward_days);
        }
        if self.card_product_type != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.card_product_type);
        }
        if let ::std::option::Option::Some(ref v) = self.HLAOFKPENGI {
            match v {
                &shop_card_product::HLAOFKPENGI::ResinCard(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.product_id.is_empty() {
            os.write_string(1, &self.product_id)?;
        }
        if !self.price_tier.is_empty() {
            os.write_string(2, &self.price_tier)?;
        }
        if self.mcoin_base != 0 {
            os.write_uint32(3, self.mcoin_base)?;
        }
        if self.hcoin_per_day != 0 {
            os.write_uint32(4, self.hcoin_per_day)?;
        }
        if self.days != 0 {
            os.write_uint32(5, self.days)?;
        }
        if self.remain_reward_days != 0 {
            os.write_uint32(6, self.remain_reward_days)?;
        }
        if self.card_product_type != 0 {
            os.write_uint32(7, self.card_product_type)?;
        }
        if let ::std::option::Option::Some(ref v) = self.HLAOFKPENGI {
            match v {
                &shop_card_product::HLAOFKPENGI::ResinCard(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShopCardProduct {
        ShopCardProduct::new()
    }

    fn clear(&mut self) {
        self.product_id.clear();
        self.price_tier.clear();
        self.mcoin_base = 0;
        self.hcoin_per_day = 0;
        self.days = 0;
        self.remain_reward_days = 0;
        self.card_product_type = 0;
        self.HLAOFKPENGI = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShopCardProduct {
        static instance: ShopCardProduct = ShopCardProduct {
            product_id: ::std::string::String::new(),
            price_tier: ::std::string::String::new(),
            mcoin_base: 0,
            hcoin_per_day: 0,
            days: 0,
            remain_reward_days: 0,
            card_product_type: 0,
            HLAOFKPENGI: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShopCardProduct {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShopCardProduct").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShopCardProduct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShopCardProduct {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ShopCardProduct`
pub mod shop_card_product {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ShopCardProduct.HLAOFKPENGI)
    pub enum HLAOFKPENGI {
        // @@protoc_insertion_point(oneof_field:ShopCardProduct.resin_card)
        ResinCard(super::super::ResinCard::ResinCard),
    }

    impl ::protobuf::Oneof for HLAOFKPENGI {
    }

    impl ::protobuf::OneofFull for HLAOFKPENGI {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ShopCardProduct as ::protobuf::MessageFull>::descriptor().oneof_by_name("HLAOFKPENGI").unwrap()).clone()
        }
    }

    impl HLAOFKPENGI {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<HLAOFKPENGI>("HLAOFKPENGI")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15ShopCardProduct.proto\x1a\x0fResinCard.proto\"\xbc\x02\n\x0fShopCa\
    rdProduct\x12\x1d\n\nproduct_id\x18\x01\x20\x01(\tR\tproductId\x12\x1d\n\
    \nprice_tier\x18\x02\x20\x01(\tR\tpriceTier\x12\x1d\n\nmcoin_base\x18\
    \x03\x20\x01(\rR\tmcoinBase\x12\"\n\rhcoin_per_day\x18\x04\x20\x01(\rR\
    \x0bhcoinPerDay\x12\x12\n\x04days\x18\x05\x20\x01(\rR\x04days\x12,\n\x12\
    remain_reward_days\x18\x06\x20\x01(\rR\x10remainRewardDays\x12*\n\x11car\
    d_product_type\x18\x07\x20\x01(\rR\x0fcardProductType\x12+\n\nresin_card\
    \x18e\x20\x01(\x0b2\n.ResinCardH\0R\tresinCardB\r\n\x0bHLAOFKPENGIB\x1b\
    \n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ResinCard::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ShopCardProduct::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
