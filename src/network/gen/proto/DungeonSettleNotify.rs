// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DungeonSettleNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:DungeonSettleNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DungeonSettleNotify {
    // message fields
    // @@protoc_insertion_point(field:DungeonSettleNotify.strengthen_point_data_map)
    pub strengthen_point_data_map: ::std::collections::HashMap<u32, super::StrengthenPointData::StrengthenPointData>,
    // @@protoc_insertion_point(field:DungeonSettleNotify.is_success)
    pub is_success: bool,
    // @@protoc_insertion_point(field:DungeonSettleNotify.fail_cond_list)
    pub fail_cond_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:DungeonSettleNotify.dungeon_id)
    pub dungeon_id: u32,
    // @@protoc_insertion_point(field:DungeonSettleNotify.FJHHIKOIHKA)
    pub FJHHIKOIHKA: u32,
    // @@protoc_insertion_point(field:DungeonSettleNotify.PDLMKFLEKDL)
    pub PDLMKFLEKDL: u32,
    // @@protoc_insertion_point(field:DungeonSettleNotify.settle_show)
    pub settle_show: ::std::collections::HashMap<u32, super::ParamList::ParamList>,
    // @@protoc_insertion_point(field:DungeonSettleNotify.create_player_uid)
    pub create_player_uid: u32,
    // @@protoc_insertion_point(field:DungeonSettleNotify.MHHCOEDMPDP)
    pub MHHCOEDMPDP: u32,
    // message oneof groups
    pub detail: ::std::option::Option<dungeon_settle_notify::Detail>,
    // special fields
    // @@protoc_insertion_point(special_field:DungeonSettleNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DungeonSettleNotify {
    fn default() -> &'a DungeonSettleNotify {
        <DungeonSettleNotify as ::protobuf::Message>::default_instance()
    }
}

impl DungeonSettleNotify {
    pub fn new() -> DungeonSettleNotify {
        ::std::default::Default::default()
    }

    // .TowerLevelEndNotify tower_level_end_notify = 682;

    pub fn tower_level_end_notify(&self) -> &super::TowerLevelEndNotify::TowerLevelEndNotify {
        match self.detail {
            ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(ref v)) => v,
            _ => <super::TowerLevelEndNotify::TowerLevelEndNotify as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_tower_level_end_notify(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_tower_level_end_notify(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tower_level_end_notify(&mut self, v: super::TowerLevelEndNotify::TowerLevelEndNotify) {
        self.detail = ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tower_level_end_notify(&mut self) -> &mut super::TowerLevelEndNotify::TowerLevelEndNotify {
        if let ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(super::TowerLevelEndNotify::TowerLevelEndNotify::new()));
        }
        match self.detail {
            ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tower_level_end_notify(&mut self) -> super::TowerLevelEndNotify::TowerLevelEndNotify {
        if self.has_tower_level_end_notify() {
            match self.detail.take() {
                ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(v)) => v,
                _ => panic!(),
            }
        } else {
            super::TowerLevelEndNotify::TowerLevelEndNotify::new()
        }
    }

    // .TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 1922;

    pub fn trial_avatar_first_pass_dungeon_notify(&self) -> &super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify {
        match self.detail {
            ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(ref v)) => v,
            _ => <super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_trial_avatar_first_pass_dungeon_notify(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_trial_avatar_first_pass_dungeon_notify(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_trial_avatar_first_pass_dungeon_notify(&mut self, v: super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify) {
        self.detail = ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(v))
    }

    // Mutable pointer to the field.
    pub fn mut_trial_avatar_first_pass_dungeon_notify(&mut self) -> &mut super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify {
        if let ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify::new()));
        }
        match self.detail {
            ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_trial_avatar_first_pass_dungeon_notify(&mut self) -> super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify {
        if self.has_trial_avatar_first_pass_dungeon_notify() {
            match self.detail.take() {
                ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(v)) => v,
                _ => panic!(),
            }
        } else {
            super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "strengthen_point_data_map",
            |m: &DungeonSettleNotify| { &m.strengthen_point_data_map },
            |m: &mut DungeonSettleNotify| { &mut m.strengthen_point_data_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_success",
            |m: &DungeonSettleNotify| { &m.is_success },
            |m: &mut DungeonSettleNotify| { &mut m.is_success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fail_cond_list",
            |m: &DungeonSettleNotify| { &m.fail_cond_list },
            |m: &mut DungeonSettleNotify| { &mut m.fail_cond_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dungeon_id",
            |m: &DungeonSettleNotify| { &m.dungeon_id },
            |m: &mut DungeonSettleNotify| { &mut m.dungeon_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FJHHIKOIHKA",
            |m: &DungeonSettleNotify| { &m.FJHHIKOIHKA },
            |m: &mut DungeonSettleNotify| { &mut m.FJHHIKOIHKA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDLMKFLEKDL",
            |m: &DungeonSettleNotify| { &m.PDLMKFLEKDL },
            |m: &mut DungeonSettleNotify| { &mut m.PDLMKFLEKDL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "settle_show",
            |m: &DungeonSettleNotify| { &m.settle_show },
            |m: &mut DungeonSettleNotify| { &mut m.settle_show },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "create_player_uid",
            |m: &DungeonSettleNotify| { &m.create_player_uid },
            |m: &mut DungeonSettleNotify| { &mut m.create_player_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MHHCOEDMPDP",
            |m: &DungeonSettleNotify| { &m.MHHCOEDMPDP },
            |m: &mut DungeonSettleNotify| { &mut m.MHHCOEDMPDP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::TowerLevelEndNotify::TowerLevelEndNotify>(
            "tower_level_end_notify",
            DungeonSettleNotify::has_tower_level_end_notify,
            DungeonSettleNotify::tower_level_end_notify,
            DungeonSettleNotify::mut_tower_level_end_notify,
            DungeonSettleNotify::set_tower_level_end_notify,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify>(
            "trial_avatar_first_pass_dungeon_notify",
            DungeonSettleNotify::has_trial_avatar_first_pass_dungeon_notify,
            DungeonSettleNotify::trial_avatar_first_pass_dungeon_notify,
            DungeonSettleNotify::mut_trial_avatar_first_pass_dungeon_notify,
            DungeonSettleNotify::set_trial_avatar_first_pass_dungeon_notify,
        ));
        oneofs.push(dungeon_settle_notify::Detail::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DungeonSettleNotify>(
            "DungeonSettleNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DungeonSettleNotify {
    const NAME: &'static str = "DungeonSettleNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.strengthen_point_data_map.insert(key, value);
                },
                32 => {
                    self.is_success = is.read_bool()?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.fail_cond_list)?;
                },
                40 => {
                    self.fail_cond_list.push(is.read_uint32()?);
                },
                64 => {
                    self.dungeon_id = is.read_uint32()?;
                },
                72 => {
                    self.FJHHIKOIHKA = is.read_uint32()?;
                },
                80 => {
                    self.PDLMKFLEKDL = is.read_uint32()?;
                },
                90 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.settle_show.insert(key, value);
                },
                96 => {
                    self.create_player_uid = is.read_uint32()?;
                },
                112 => {
                    self.MHHCOEDMPDP = is.read_uint32()?;
                },
                5458 => {
                    self.detail = ::std::option::Option::Some(dungeon_settle_notify::Detail::TowerLevelEndNotify(is.read_message()?));
                },
                15378 => {
                    self.detail = ::std::option::Option::Some(dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.strengthen_point_data_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.is_success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(5, &self.fail_cond_list);
        if self.dungeon_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.dungeon_id);
        }
        if self.FJHHIKOIHKA != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.FJHHIKOIHKA);
        }
        if self.PDLMKFLEKDL != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.PDLMKFLEKDL);
        }
        for (k, v) in &self.settle_show {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.create_player_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.create_player_uid);
        }
        if self.MHHCOEDMPDP != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.MHHCOEDMPDP);
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &dungeon_settle_notify::Detail::TowerLevelEndNotify(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.strengthen_point_data_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.is_success != false {
            os.write_bool(4, self.is_success)?;
        }
        os.write_repeated_packed_uint32(5, &self.fail_cond_list)?;
        if self.dungeon_id != 0 {
            os.write_uint32(8, self.dungeon_id)?;
        }
        if self.FJHHIKOIHKA != 0 {
            os.write_uint32(9, self.FJHHIKOIHKA)?;
        }
        if self.PDLMKFLEKDL != 0 {
            os.write_uint32(10, self.PDLMKFLEKDL)?;
        }
        for (k, v) in &self.settle_show {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(90)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.create_player_uid != 0 {
            os.write_uint32(12, self.create_player_uid)?;
        }
        if self.MHHCOEDMPDP != 0 {
            os.write_uint32(14, self.MHHCOEDMPDP)?;
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &dungeon_settle_notify::Detail::TowerLevelEndNotify(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(682, v, os)?;
                },
                &dungeon_settle_notify::Detail::TrialAvatarFirstPassDungeonNotify(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1922, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DungeonSettleNotify {
        DungeonSettleNotify::new()
    }

    fn clear(&mut self) {
        self.strengthen_point_data_map.clear();
        self.is_success = false;
        self.fail_cond_list.clear();
        self.dungeon_id = 0;
        self.FJHHIKOIHKA = 0;
        self.PDLMKFLEKDL = 0;
        self.settle_show.clear();
        self.create_player_uid = 0;
        self.MHHCOEDMPDP = 0;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DungeonSettleNotify {
        static instance: ::protobuf::rt::Lazy<DungeonSettleNotify> = ::protobuf::rt::Lazy::new();
        instance.get(DungeonSettleNotify::new)
    }
}

impl ::protobuf::MessageFull for DungeonSettleNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DungeonSettleNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DungeonSettleNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DungeonSettleNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DungeonSettleNotify`
pub mod dungeon_settle_notify {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DungeonSettleNotify.detail)
    pub enum Detail {
        // @@protoc_insertion_point(oneof_field:DungeonSettleNotify.tower_level_end_notify)
        TowerLevelEndNotify(super::super::TowerLevelEndNotify::TowerLevelEndNotify),
        // @@protoc_insertion_point(oneof_field:DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
        TrialAvatarFirstPassDungeonNotify(super::super::TrialAvatarFirstPassDungeonNotify::TrialAvatarFirstPassDungeonNotify),
    }

    impl ::protobuf::Oneof for Detail {
    }

    impl ::protobuf::OneofFull for Detail {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DungeonSettleNotify as ::protobuf::MessageFull>::descriptor().oneof_by_name("detail").unwrap()).clone()
        }
    }

    impl Detail {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Detail>("detail")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19DungeonSettleNotify.proto\x1a\x19StrengthenPointData.proto\x1a\x0f\
    ParamList.proto\x1a\x19TowerLevelEndNotify.proto\x1a'TrialAvatarFirstPas\
    sDungeonNotify.proto\"\xbd\x06\n\x13DungeonSettleNotify\x12k\n\x19streng\
    then_point_data_map\x18\x01\x20\x03(\x0b20.DungeonSettleNotify.Strengthe\
    nPointDataMapEntryR\x16strengthenPointDataMap\x12\x1d\n\nis_success\x18\
    \x04\x20\x01(\x08R\tisSuccess\x12$\n\x0efail_cond_list\x18\x05\x20\x03(\
    \rR\x0cfailCondList\x12\x1d\n\ndungeon_id\x18\x08\x20\x01(\rR\tdungeonId\
    \x12\x20\n\x0bFJHHIKOIHKA\x18\t\x20\x01(\rR\x0bFJHHIKOIHKA\x12\x20\n\x0b\
    PDLMKFLEKDL\x18\n\x20\x01(\rR\x0bPDLMKFLEKDL\x12E\n\x0bsettle_show\x18\
    \x0b\x20\x03(\x0b2$.DungeonSettleNotify.SettleShowEntryR\nsettleShow\x12\
    *\n\x11create_player_uid\x18\x0c\x20\x01(\rR\x0fcreatePlayerUid\x12\x20\
    \n\x0bMHHCOEDMPDP\x18\x0e\x20\x01(\rR\x0bMHHCOEDMPDP\x12L\n\x16tower_lev\
    el_end_notify\x18\xaa\x05\x20\x01(\x0b2\x14.TowerLevelEndNotifyH\0R\x13t\
    owerLevelEndNotify\x12x\n&trial_avatar_first_pass_dungeon_notify\x18\x82\
    \x0f\x20\x01(\x0b2\".TrialAvatarFirstPassDungeonNotifyH\0R!trialAvatarFi\
    rstPassDungeonNotify\x1a_\n\x1bStrengthenPointDataMapEntry\x12\x10\n\x03\
    key\x18\x01\x20\x01(\rR\x03key\x12*\n\x05value\x18\x02\x20\x01(\x0b2\x14\
    .StrengthenPointDataR\x05value:\x028\x01\x1aI\n\x0fSettleShowEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12\x20\n\x05value\x18\x02\x20\
    \x01(\x0b2\n.ParamListR\x05value:\x028\x01B\x08\n\x06detailB\x1b\n\x19em\
    u.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::StrengthenPointData::file_descriptor().clone());
            deps.push(super::ParamList::file_descriptor().clone());
            deps.push(super::TowerLevelEndNotify::file_descriptor().clone());
            deps.push(super::TrialAvatarFirstPassDungeonNotify::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DungeonSettleNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
