// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerLoginRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:PlayerLoginRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerLoginRsp {
    // message fields
    // @@protoc_insertion_point(field:PlayerLoginRsp.is_new_player)
    pub is_new_player: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.game_biz)
    pub game_biz: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.OAMCACIICJJ)
    pub OAMCACIICJJ: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.player_data)
    pub player_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.target_uid)
    pub target_uid: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.PCNBCFNBPGF)
    pub PCNBCFNBPGF: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.ability_hash_code)
    pub ability_hash_code: i32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.login_rand)
    pub login_rand: u64,
    // @@protoc_insertion_point(field:PlayerLoginRsp.player_data_version)
    pub player_data_version: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_silence_data_version)
    pub client_silence_data_version: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.ability_hash_map)
    pub ability_hash_map: ::std::collections::HashMap<::std::string::String, i32>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_data_version)
    pub client_data_version: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.is_audit)
    pub is_audit: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.short_ability_hash_map)
    pub short_ability_hash_map: ::std::vec::Vec<super::ShortAbilityHashPair::ShortAbilityHashPair>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.res_version_config)
    pub res_version_config: ::protobuf::MessageField<super::ResVersionConfig::ResVersionConfig>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.KLLPFNOLBHO)
    pub KLLPFNOLBHO: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.KECGLOKOIDC)
    pub KECGLOKOIDC: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.feature_block_info_list)
    pub feature_block_info_list: ::std::vec::Vec<super::FeatureBlockInfo::FeatureBlockInfo>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.EFPHHJIKPJG)
    pub EFPHHJIKPJG: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.sc_info)
    pub sc_info: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_silence_version_suffix)
    pub client_silence_version_suffix: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.target_home_owner_uid)
    pub target_home_owner_uid: u32,
    // @@protoc_insertion_point(field:PlayerLoginRsp.JAGELBDJFJH)
    pub JAGELBDJFJH: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.msg)
    pub msg: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.CLJBEGINENC)
    pub CLJBEGINENC: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.total_tick_time)
    pub total_tick_time: f64,
    // @@protoc_insertion_point(field:PlayerLoginRsp.client_version_suffix)
    pub client_version_suffix: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.ABPMACCDDJH)
    pub ABPMACCDDJH: ::protobuf::MessageField<super::StopServerInfo::StopServerInfo>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.next_resource_url)
    pub next_resource_url: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.PKEKLEEOLJL)
    pub PKEKLEEOLJL: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.block_info_map)
    pub block_info_map: ::std::collections::HashMap<u32, super::BlockInfo::BlockInfo>,
    // @@protoc_insertion_point(field:PlayerLoginRsp.birthday)
    pub birthday: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.JKANELMFGEP)
    pub JKANELMFGEP: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.is_data_need_relogin)
    pub is_data_need_relogin: bool,
    // @@protoc_insertion_point(field:PlayerLoginRsp.country_code)
    pub country_code: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerLoginRsp.next_res_version_config)
    pub next_res_version_config: ::protobuf::MessageField<super::ResVersionConfig::ResVersionConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerLoginRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerLoginRsp {
    fn default() -> &'a PlayerLoginRsp {
        <PlayerLoginRsp as ::protobuf::Message>::default_instance()
    }
}

impl PlayerLoginRsp {
    pub fn new() -> PlayerLoginRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(37);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_new_player",
            |m: &PlayerLoginRsp| { &m.is_new_player },
            |m: &mut PlayerLoginRsp| { &mut m.is_new_player },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_biz",
            |m: &PlayerLoginRsp| { &m.game_biz },
            |m: &mut PlayerLoginRsp| { &mut m.game_biz },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OAMCACIICJJ",
            |m: &PlayerLoginRsp| { &m.OAMCACIICJJ },
            |m: &mut PlayerLoginRsp| { &mut m.OAMCACIICJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player_data",
            |m: &PlayerLoginRsp| { &m.player_data },
            |m: &mut PlayerLoginRsp| { &mut m.player_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_uid",
            |m: &PlayerLoginRsp| { &m.target_uid },
            |m: &mut PlayerLoginRsp| { &mut m.target_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PCNBCFNBPGF",
            |m: &PlayerLoginRsp| { &m.PCNBCFNBPGF },
            |m: &mut PlayerLoginRsp| { &mut m.PCNBCFNBPGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ability_hash_code",
            |m: &PlayerLoginRsp| { &m.ability_hash_code },
            |m: &mut PlayerLoginRsp| { &mut m.ability_hash_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "login_rand",
            |m: &PlayerLoginRsp| { &m.login_rand },
            |m: &mut PlayerLoginRsp| { &mut m.login_rand },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player_data_version",
            |m: &PlayerLoginRsp| { &m.player_data_version },
            |m: &mut PlayerLoginRsp| { &mut m.player_data_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_silence_data_version",
            |m: &PlayerLoginRsp| { &m.client_silence_data_version },
            |m: &mut PlayerLoginRsp| { &mut m.client_silence_data_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &PlayerLoginRsp| { &m.retcode },
            |m: &mut PlayerLoginRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "ability_hash_map",
            |m: &PlayerLoginRsp| { &m.ability_hash_map },
            |m: &mut PlayerLoginRsp| { &mut m.ability_hash_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_data_version",
            |m: &PlayerLoginRsp| { &m.client_data_version },
            |m: &mut PlayerLoginRsp| { &mut m.client_data_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_audit",
            |m: &PlayerLoginRsp| { &m.is_audit },
            |m: &mut PlayerLoginRsp| { &mut m.is_audit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "short_ability_hash_map",
            |m: &PlayerLoginRsp| { &m.short_ability_hash_map },
            |m: &mut PlayerLoginRsp| { &mut m.short_ability_hash_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ResVersionConfig::ResVersionConfig>(
            "res_version_config",
            |m: &PlayerLoginRsp| { &m.res_version_config },
            |m: &mut PlayerLoginRsp| { &mut m.res_version_config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KLLPFNOLBHO",
            |m: &PlayerLoginRsp| { &m.KLLPFNOLBHO },
            |m: &mut PlayerLoginRsp| { &mut m.KLLPFNOLBHO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KECGLOKOIDC",
            |m: &PlayerLoginRsp| { &m.KECGLOKOIDC },
            |m: &mut PlayerLoginRsp| { &mut m.KECGLOKOIDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "feature_block_info_list",
            |m: &PlayerLoginRsp| { &m.feature_block_info_list },
            |m: &mut PlayerLoginRsp| { &mut m.feature_block_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EFPHHJIKPJG",
            |m: &PlayerLoginRsp| { &m.EFPHHJIKPJG },
            |m: &mut PlayerLoginRsp| { &mut m.EFPHHJIKPJG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sc_info",
            |m: &PlayerLoginRsp| { &m.sc_info },
            |m: &mut PlayerLoginRsp| { &mut m.sc_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_silence_version_suffix",
            |m: &PlayerLoginRsp| { &m.client_silence_version_suffix },
            |m: &mut PlayerLoginRsp| { &mut m.client_silence_version_suffix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_home_owner_uid",
            |m: &PlayerLoginRsp| { &m.target_home_owner_uid },
            |m: &mut PlayerLoginRsp| { &mut m.target_home_owner_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JAGELBDJFJH",
            |m: &PlayerLoginRsp| { &m.JAGELBDJFJH },
            |m: &mut PlayerLoginRsp| { &mut m.JAGELBDJFJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &PlayerLoginRsp| { &m.msg },
            |m: &mut PlayerLoginRsp| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CLJBEGINENC",
            |m: &PlayerLoginRsp| { &m.CLJBEGINENC },
            |m: &mut PlayerLoginRsp| { &mut m.CLJBEGINENC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_tick_time",
            |m: &PlayerLoginRsp| { &m.total_tick_time },
            |m: &mut PlayerLoginRsp| { &mut m.total_tick_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_version_suffix",
            |m: &PlayerLoginRsp| { &m.client_version_suffix },
            |m: &mut PlayerLoginRsp| { &mut m.client_version_suffix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::StopServerInfo::StopServerInfo>(
            "ABPMACCDDJH",
            |m: &PlayerLoginRsp| { &m.ABPMACCDDJH },
            |m: &mut PlayerLoginRsp| { &mut m.ABPMACCDDJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_resource_url",
            |m: &PlayerLoginRsp| { &m.next_resource_url },
            |m: &mut PlayerLoginRsp| { &mut m.next_resource_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PKEKLEEOLJL",
            |m: &PlayerLoginRsp| { &m.PKEKLEEOLJL },
            |m: &mut PlayerLoginRsp| { &mut m.PKEKLEEOLJL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "block_info_map",
            |m: &PlayerLoginRsp| { &m.block_info_map },
            |m: &mut PlayerLoginRsp| { &mut m.block_info_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birthday",
            |m: &PlayerLoginRsp| { &m.birthday },
            |m: &mut PlayerLoginRsp| { &mut m.birthday },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKANELMFGEP",
            |m: &PlayerLoginRsp| { &m.JKANELMFGEP },
            |m: &mut PlayerLoginRsp| { &mut m.JKANELMFGEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_data_need_relogin",
            |m: &PlayerLoginRsp| { &m.is_data_need_relogin },
            |m: &mut PlayerLoginRsp| { &mut m.is_data_need_relogin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "country_code",
            |m: &PlayerLoginRsp| { &m.country_code },
            |m: &mut PlayerLoginRsp| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ResVersionConfig::ResVersionConfig>(
            "next_res_version_config",
            |m: &PlayerLoginRsp| { &m.next_res_version_config },
            |m: &mut PlayerLoginRsp| { &mut m.next_res_version_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerLoginRsp>(
            "PlayerLoginRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerLoginRsp {
    const NAME: &'static str = "PlayerLoginRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_new_player = is.read_bool()?;
                },
                18 => {
                    self.game_biz = is.read_string()?;
                },
                24 => {
                    self.OAMCACIICJJ = is.read_bool()?;
                },
                34 => {
                    self.player_data = is.read_bytes()?;
                },
                40 => {
                    self.target_uid = is.read_uint32()?;
                },
                48 => {
                    self.PCNBCFNBPGF = is.read_bool()?;
                },
                64 => {
                    self.ability_hash_code = is.read_int32()?;
                },
                72 => {
                    self.login_rand = is.read_uint64()?;
                },
                80 => {
                    self.player_data_version = is.read_uint32()?;
                },
                88 => {
                    self.client_silence_data_version = is.read_uint32()?;
                },
                96 => {
                    self.retcode = is.read_int32()?;
                },
                114 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.ability_hash_map.insert(key, value);
                },
                120 => {
                    self.client_data_version = is.read_uint32()?;
                },
                536 => {
                    self.is_audit = is.read_bool()?;
                },
                722 => {
                    self.short_ability_hash_map.push(is.read_message()?);
                },
                906 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.res_version_config)?;
                },
                1432 => {
                    self.KLLPFNOLBHO = is.read_bool()?;
                },
                1994 => {
                    self.KECGLOKOIDC = is.read_string()?;
                },
                2690 => {
                    self.feature_block_info_list.push(is.read_message()?);
                },
                3608 => {
                    self.EFPHHJIKPJG = is.read_bool()?;
                },
                6346 => {
                    self.sc_info = is.read_bytes()?;
                },
                8770 => {
                    self.client_silence_version_suffix = is.read_string()?;
                },
                9176 => {
                    self.target_home_owner_uid = is.read_uint32()?;
                },
                9512 => {
                    self.JAGELBDJFJH = is.read_bool()?;
                },
                9658 => {
                    self.msg = is.read_string()?;
                },
                10384 => {
                    self.CLJBEGINENC = is.read_bool()?;
                },
                11649 => {
                    self.total_tick_time = is.read_double()?;
                },
                11922 => {
                    self.client_version_suffix = is.read_string()?;
                },
                12242 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ABPMACCDDJH)?;
                },
                12394 => {
                    self.next_resource_url = is.read_string()?;
                },
                12754 => {
                    self.PKEKLEEOLJL = is.read_string()?;
                },
                12770 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.block_info_map.insert(key, value);
                },
                13514 => {
                    self.birthday = is.read_string()?;
                },
                13826 => {
                    self.JKANELMFGEP = is.read_string()?;
                },
                14952 => {
                    self.is_data_need_relogin = is.read_bool()?;
                },
                15186 => {
                    self.country_code = is.read_string()?;
                },
                15802 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.next_res_version_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_new_player != false {
            my_size += 1 + 1;
        }
        if !self.game_biz.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.game_biz);
        }
        if self.OAMCACIICJJ != false {
            my_size += 1 + 1;
        }
        if !self.player_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.player_data);
        }
        if self.target_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.target_uid);
        }
        if self.PCNBCFNBPGF != false {
            my_size += 1 + 1;
        }
        if self.ability_hash_code != 0 {
            my_size += ::protobuf::rt::int32_size(8, self.ability_hash_code);
        }
        if self.login_rand != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.login_rand);
        }
        if self.player_data_version != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.player_data_version);
        }
        if self.client_silence_data_version != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.client_silence_data_version);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(12, self.retcode);
        }
        for (k, v) in &self.ability_hash_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.client_data_version != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.client_data_version);
        }
        if self.is_audit != false {
            my_size += 2 + 1;
        }
        for value in &self.short_ability_hash_map {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.res_version_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.KLLPFNOLBHO != false {
            my_size += 2 + 1;
        }
        if !self.KECGLOKOIDC.is_empty() {
            my_size += ::protobuf::rt::string_size(249, &self.KECGLOKOIDC);
        }
        for value in &self.feature_block_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EFPHHJIKPJG != false {
            my_size += 2 + 1;
        }
        if !self.sc_info.is_empty() {
            my_size += ::protobuf::rt::bytes_size(793, &self.sc_info);
        }
        if !self.client_silence_version_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(1096, &self.client_silence_version_suffix);
        }
        if self.target_home_owner_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1147, self.target_home_owner_uid);
        }
        if self.JAGELBDJFJH != false {
            my_size += 2 + 1;
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1207, &self.msg);
        }
        if self.CLJBEGINENC != false {
            my_size += 2 + 1;
        }
        if self.total_tick_time != 0. {
            my_size += 2 + 8;
        }
        if !self.client_version_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(1490, &self.client_version_suffix);
        }
        if let Some(v) = self.ABPMACCDDJH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.next_resource_url.is_empty() {
            my_size += ::protobuf::rt::string_size(1549, &self.next_resource_url);
        }
        if !self.PKEKLEEOLJL.is_empty() {
            my_size += ::protobuf::rt::string_size(1594, &self.PKEKLEEOLJL);
        }
        for (k, v) in &self.block_info_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if !self.birthday.is_empty() {
            my_size += ::protobuf::rt::string_size(1689, &self.birthday);
        }
        if !self.JKANELMFGEP.is_empty() {
            my_size += ::protobuf::rt::string_size(1728, &self.JKANELMFGEP);
        }
        if self.is_data_need_relogin != false {
            my_size += 2 + 1;
        }
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1898, &self.country_code);
        }
        if let Some(v) = self.next_res_version_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_new_player != false {
            os.write_bool(1, self.is_new_player)?;
        }
        if !self.game_biz.is_empty() {
            os.write_string(2, &self.game_biz)?;
        }
        if self.OAMCACIICJJ != false {
            os.write_bool(3, self.OAMCACIICJJ)?;
        }
        if !self.player_data.is_empty() {
            os.write_bytes(4, &self.player_data)?;
        }
        if self.target_uid != 0 {
            os.write_uint32(5, self.target_uid)?;
        }
        if self.PCNBCFNBPGF != false {
            os.write_bool(6, self.PCNBCFNBPGF)?;
        }
        if self.ability_hash_code != 0 {
            os.write_int32(8, self.ability_hash_code)?;
        }
        if self.login_rand != 0 {
            os.write_uint64(9, self.login_rand)?;
        }
        if self.player_data_version != 0 {
            os.write_uint32(10, self.player_data_version)?;
        }
        if self.client_silence_data_version != 0 {
            os.write_uint32(11, self.client_silence_data_version)?;
        }
        if self.retcode != 0 {
            os.write_int32(12, self.retcode)?;
        }
        for (k, v) in &self.ability_hash_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(114)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        if self.client_data_version != 0 {
            os.write_uint32(15, self.client_data_version)?;
        }
        if self.is_audit != false {
            os.write_bool(67, self.is_audit)?;
        }
        for v in &self.short_ability_hash_map {
            ::protobuf::rt::write_message_field_with_cached_size(90, v, os)?;
        };
        if let Some(v) = self.res_version_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(113, v, os)?;
        }
        if self.KLLPFNOLBHO != false {
            os.write_bool(179, self.KLLPFNOLBHO)?;
        }
        if !self.KECGLOKOIDC.is_empty() {
            os.write_string(249, &self.KECGLOKOIDC)?;
        }
        for v in &self.feature_block_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(336, v, os)?;
        };
        if self.EFPHHJIKPJG != false {
            os.write_bool(451, self.EFPHHJIKPJG)?;
        }
        if !self.sc_info.is_empty() {
            os.write_bytes(793, &self.sc_info)?;
        }
        if !self.client_silence_version_suffix.is_empty() {
            os.write_string(1096, &self.client_silence_version_suffix)?;
        }
        if self.target_home_owner_uid != 0 {
            os.write_uint32(1147, self.target_home_owner_uid)?;
        }
        if self.JAGELBDJFJH != false {
            os.write_bool(1189, self.JAGELBDJFJH)?;
        }
        if !self.msg.is_empty() {
            os.write_string(1207, &self.msg)?;
        }
        if self.CLJBEGINENC != false {
            os.write_bool(1298, self.CLJBEGINENC)?;
        }
        if self.total_tick_time != 0. {
            os.write_double(1456, self.total_tick_time)?;
        }
        if !self.client_version_suffix.is_empty() {
            os.write_string(1490, &self.client_version_suffix)?;
        }
        if let Some(v) = self.ABPMACCDDJH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1530, v, os)?;
        }
        if !self.next_resource_url.is_empty() {
            os.write_string(1549, &self.next_resource_url)?;
        }
        if !self.PKEKLEEOLJL.is_empty() {
            os.write_string(1594, &self.PKEKLEEOLJL)?;
        }
        for (k, v) in &self.block_info_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(12770)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.birthday.is_empty() {
            os.write_string(1689, &self.birthday)?;
        }
        if !self.JKANELMFGEP.is_empty() {
            os.write_string(1728, &self.JKANELMFGEP)?;
        }
        if self.is_data_need_relogin != false {
            os.write_bool(1869, self.is_data_need_relogin)?;
        }
        if !self.country_code.is_empty() {
            os.write_string(1898, &self.country_code)?;
        }
        if let Some(v) = self.next_res_version_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1975, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerLoginRsp {
        PlayerLoginRsp::new()
    }

    fn clear(&mut self) {
        self.is_new_player = false;
        self.game_biz.clear();
        self.OAMCACIICJJ = false;
        self.player_data.clear();
        self.target_uid = 0;
        self.PCNBCFNBPGF = false;
        self.ability_hash_code = 0;
        self.login_rand = 0;
        self.player_data_version = 0;
        self.client_silence_data_version = 0;
        self.retcode = 0;
        self.ability_hash_map.clear();
        self.client_data_version = 0;
        self.is_audit = false;
        self.short_ability_hash_map.clear();
        self.res_version_config.clear();
        self.KLLPFNOLBHO = false;
        self.KECGLOKOIDC.clear();
        self.feature_block_info_list.clear();
        self.EFPHHJIKPJG = false;
        self.sc_info.clear();
        self.client_silence_version_suffix.clear();
        self.target_home_owner_uid = 0;
        self.JAGELBDJFJH = false;
        self.msg.clear();
        self.CLJBEGINENC = false;
        self.total_tick_time = 0.;
        self.client_version_suffix.clear();
        self.ABPMACCDDJH.clear();
        self.next_resource_url.clear();
        self.PKEKLEEOLJL.clear();
        self.block_info_map.clear();
        self.birthday.clear();
        self.JKANELMFGEP.clear();
        self.is_data_need_relogin = false;
        self.country_code.clear();
        self.next_res_version_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerLoginRsp {
        static instance: ::protobuf::rt::Lazy<PlayerLoginRsp> = ::protobuf::rt::Lazy::new();
        instance.get(PlayerLoginRsp::new)
    }
}

impl ::protobuf::MessageFull for PlayerLoginRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerLoginRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerLoginRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerLoginRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14PlayerLoginRsp.proto\x1a\x1aShortAbilityHashPair.proto\x1a\x16ResV\
    ersionConfig.proto\x1a\x16FeatureBlockInfo.proto\x1a\x14StopServerInfo.p\
    roto\x1a\x0fBlockInfo.proto\"\x8a\x0e\n\x0ePlayerLoginRsp\x12\"\n\ris_ne\
    w_player\x18\x01\x20\x01(\x08R\x0bisNewPlayer\x12\x19\n\x08game_biz\x18\
    \x02\x20\x01(\tR\x07gameBiz\x12\x20\n\x0bOAMCACIICJJ\x18\x03\x20\x01(\
    \x08R\x0bOAMCACIICJJ\x12\x1f\n\x0bplayer_data\x18\x04\x20\x01(\x0cR\npla\
    yerData\x12\x1d\n\ntarget_uid\x18\x05\x20\x01(\rR\ttargetUid\x12\x20\n\
    \x0bPCNBCFNBPGF\x18\x06\x20\x01(\x08R\x0bPCNBCFNBPGF\x12*\n\x11ability_h\
    ash_code\x18\x08\x20\x01(\x05R\x0fabilityHashCode\x12\x1d\n\nlogin_rand\
    \x18\t\x20\x01(\x04R\tloginRand\x12.\n\x13player_data_version\x18\n\x20\
    \x01(\rR\x11playerDataVersion\x12=\n\x1bclient_silence_data_version\x18\
    \x0b\x20\x01(\rR\x18clientSilenceDataVersion\x12\x18\n\x07retcode\x18\
    \x0c\x20\x01(\x05R\x07retcode\x12M\n\x10ability_hash_map\x18\x0e\x20\x03\
    (\x0b2#.PlayerLoginRsp.AbilityHashMapEntryR\x0eabilityHashMap\x12.\n\x13\
    client_data_version\x18\x0f\x20\x01(\rR\x11clientDataVersion\x12\x19\n\
    \x08is_audit\x18C\x20\x01(\x08R\x07isAudit\x12J\n\x16short_ability_hash_\
    map\x18Z\x20\x03(\x0b2\x15.ShortAbilityHashPairR\x13shortAbilityHashMap\
    \x12?\n\x12res_version_config\x18q\x20\x01(\x0b2\x11.ResVersionConfigR\
    \x10resVersionConfig\x12!\n\x0bKLLPFNOLBHO\x18\xb3\x01\x20\x01(\x08R\x0b\
    KLLPFNOLBHO\x12!\n\x0bKECGLOKOIDC\x18\xf9\x01\x20\x01(\tR\x0bKECGLOKOIDC\
    \x12I\n\x17feature_block_info_list\x18\xd0\x02\x20\x03(\x0b2\x11.Feature\
    BlockInfoR\x14featureBlockInfoList\x12!\n\x0bEFPHHJIKPJG\x18\xc3\x03\x20\
    \x01(\x08R\x0bEFPHHJIKPJG\x12\x18\n\x07sc_info\x18\x99\x06\x20\x01(\x0cR\
    \x06scInfo\x12B\n\x1dclient_silence_version_suffix\x18\xc8\x08\x20\x01(\
    \tR\x1aclientSilenceVersionSuffix\x122\n\x15target_home_owner_uid\x18\
    \xfb\x08\x20\x01(\rR\x12targetHomeOwnerUid\x12!\n\x0bJAGELBDJFJH\x18\xa5\
    \t\x20\x01(\x08R\x0bJAGELBDJFJH\x12\x11\n\x03msg\x18\xb7\t\x20\x01(\tR\
    \x03msg\x12!\n\x0bCLJBEGINENC\x18\x92\n\x20\x01(\x08R\x0bCLJBEGINENC\x12\
    '\n\x0ftotal_tick_time\x18\xb0\x0b\x20\x01(\x01R\rtotalTickTime\x123\n\
    \x15client_version_suffix\x18\xd2\x0b\x20\x01(\tR\x13clientVersionSuffix\
    \x122\n\x0bABPMACCDDJH\x18\xfa\x0b\x20\x01(\x0b2\x0f.StopServerInfoR\x0b\
    ABPMACCDDJH\x12+\n\x11next_resource_url\x18\x8d\x0c\x20\x01(\tR\x0fnextR\
    esourceUrl\x12!\n\x0bPKEKLEEOLJL\x18\xba\x0c\x20\x01(\tR\x0bPKEKLEEOLJL\
    \x12H\n\x0eblock_info_map\x18\xbc\x0c\x20\x03(\x0b2!.PlayerLoginRsp.Bloc\
    kInfoMapEntryR\x0cblockInfoMap\x12\x1b\n\x08birthday\x18\x99\r\x20\x01(\
    \tR\x08birthday\x12!\n\x0bJKANELMFGEP\x18\xc0\r\x20\x01(\tR\x0bJKANELMFG\
    EP\x120\n\x14is_data_need_relogin\x18\xcd\x0e\x20\x01(\x08R\x11isDataNee\
    dRelogin\x12\"\n\x0ccountry_code\x18\xea\x0e\x20\x01(\tR\x0bcountryCode\
    \x12I\n\x17next_res_version_config\x18\xb7\x0f\x20\x01(\x0b2\x11.ResVers\
    ionConfigR\x14nextResVersionConfig\x1aA\n\x13AbilityHashMapEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \x05R\x05value:\x028\x01\x1aK\n\x11BlockInfoMapEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\rR\x03key\x12\x20\n\x05value\x18\x02\x20\x01(\x0b2\n.B\
    lockInfoR\x05value:\x028\x01B\x1b\n\x19emu.grasscutter.net.protob\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::ShortAbilityHashPair::file_descriptor().clone());
            deps.push(super::ResVersionConfig::file_descriptor().clone());
            deps.push(super::FeatureBlockInfo::file_descriptor().clone());
            deps.push(super::StopServerInfo::file_descriptor().clone());
            deps.push(super::BlockInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerLoginRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
