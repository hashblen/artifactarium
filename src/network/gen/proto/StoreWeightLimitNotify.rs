// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `StoreWeightLimitNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:StoreWeightLimitNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StoreWeightLimitNotify {
    // message fields
    // @@protoc_insertion_point(field:StoreWeightLimitNotify.weapon_count_limit)
    pub weapon_count_limit: u32,
    // @@protoc_insertion_point(field:StoreWeightLimitNotify.weight_limit)
    pub weight_limit: u32,
    // @@protoc_insertion_point(field:StoreWeightLimitNotify.furniture_count_limit)
    pub furniture_count_limit: u32,
    // @@protoc_insertion_point(field:StoreWeightLimitNotify.material_count_limit)
    pub material_count_limit: u32,
    // @@protoc_insertion_point(field:StoreWeightLimitNotify.reliquary_count_limit)
    pub reliquary_count_limit: u32,
    // @@protoc_insertion_point(field:StoreWeightLimitNotify.store_type)
    pub store_type: ::protobuf::EnumOrUnknown<super::StoreType::StoreType>,
    // special fields
    // @@protoc_insertion_point(special_field:StoreWeightLimitNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StoreWeightLimitNotify {
    fn default() -> &'a StoreWeightLimitNotify {
        <StoreWeightLimitNotify as ::protobuf::Message>::default_instance()
    }
}

impl StoreWeightLimitNotify {
    pub fn new() -> StoreWeightLimitNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weapon_count_limit",
            |m: &StoreWeightLimitNotify| { &m.weapon_count_limit },
            |m: &mut StoreWeightLimitNotify| { &mut m.weapon_count_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weight_limit",
            |m: &StoreWeightLimitNotify| { &m.weight_limit },
            |m: &mut StoreWeightLimitNotify| { &mut m.weight_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "furniture_count_limit",
            |m: &StoreWeightLimitNotify| { &m.furniture_count_limit },
            |m: &mut StoreWeightLimitNotify| { &mut m.furniture_count_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "material_count_limit",
            |m: &StoreWeightLimitNotify| { &m.material_count_limit },
            |m: &mut StoreWeightLimitNotify| { &mut m.material_count_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reliquary_count_limit",
            |m: &StoreWeightLimitNotify| { &m.reliquary_count_limit },
            |m: &mut StoreWeightLimitNotify| { &mut m.reliquary_count_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "store_type",
            |m: &StoreWeightLimitNotify| { &m.store_type },
            |m: &mut StoreWeightLimitNotify| { &mut m.store_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StoreWeightLimitNotify>(
            "StoreWeightLimitNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StoreWeightLimitNotify {
    const NAME: &'static str = "StoreWeightLimitNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.weapon_count_limit = is.read_uint32()?;
                },
                40 => {
                    self.weight_limit = is.read_uint32()?;
                },
                56 => {
                    self.furniture_count_limit = is.read_uint32()?;
                },
                88 => {
                    self.material_count_limit = is.read_uint32()?;
                },
                112 => {
                    self.reliquary_count_limit = is.read_uint32()?;
                },
                120 => {
                    self.store_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.weapon_count_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.weapon_count_limit);
        }
        if self.weight_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.weight_limit);
        }
        if self.furniture_count_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.furniture_count_limit);
        }
        if self.material_count_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.material_count_limit);
        }
        if self.reliquary_count_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.reliquary_count_limit);
        }
        if self.store_type != ::protobuf::EnumOrUnknown::new(super::StoreType::StoreType::STORE_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(15, self.store_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.weapon_count_limit != 0 {
            os.write_uint32(3, self.weapon_count_limit)?;
        }
        if self.weight_limit != 0 {
            os.write_uint32(5, self.weight_limit)?;
        }
        if self.furniture_count_limit != 0 {
            os.write_uint32(7, self.furniture_count_limit)?;
        }
        if self.material_count_limit != 0 {
            os.write_uint32(11, self.material_count_limit)?;
        }
        if self.reliquary_count_limit != 0 {
            os.write_uint32(14, self.reliquary_count_limit)?;
        }
        if self.store_type != ::protobuf::EnumOrUnknown::new(super::StoreType::StoreType::STORE_TYPE_NONE) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.store_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StoreWeightLimitNotify {
        StoreWeightLimitNotify::new()
    }

    fn clear(&mut self) {
        self.weapon_count_limit = 0;
        self.weight_limit = 0;
        self.furniture_count_limit = 0;
        self.material_count_limit = 0;
        self.reliquary_count_limit = 0;
        self.store_type = ::protobuf::EnumOrUnknown::new(super::StoreType::StoreType::STORE_TYPE_NONE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StoreWeightLimitNotify {
        static instance: StoreWeightLimitNotify = StoreWeightLimitNotify {
            weapon_count_limit: 0,
            weight_limit: 0,
            furniture_count_limit: 0,
            material_count_limit: 0,
            reliquary_count_limit: 0,
            store_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StoreWeightLimitNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StoreWeightLimitNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StoreWeightLimitNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreWeightLimitNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cStoreWeightLimitNotify.proto\x1a\x0fStoreType.proto\"\xae\x02\n\
    \x16StoreWeightLimitNotify\x12,\n\x12weapon_count_limit\x18\x03\x20\x01(\
    \rR\x10weaponCountLimit\x12!\n\x0cweight_limit\x18\x05\x20\x01(\rR\x0bwe\
    ightLimit\x122\n\x15furniture_count_limit\x18\x07\x20\x01(\rR\x13furnitu\
    reCountLimit\x120\n\x14material_count_limit\x18\x0b\x20\x01(\rR\x12mater\
    ialCountLimit\x122\n\x15reliquary_count_limit\x18\x0e\x20\x01(\rR\x13rel\
    iquaryCountLimit\x12)\n\nstore_type\x18\x0f\x20\x01(\x0e2\n.StoreTypeR\t\
    storeTypeB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::StoreType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(StoreWeightLimitNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
