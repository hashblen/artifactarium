// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AllWidgetDataNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:AllWidgetDataNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AllWidgetDataNotify {
    // message fields
    // @@protoc_insertion_point(field:AllWidgetDataNotify.anchor_point_list)
    pub anchor_point_list: ::std::vec::Vec<super::AnchorPointData::AnchorPointData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.oneoff_gather_point_detector_data_list)
    pub oneoff_gather_point_detector_data_list: ::std::vec::Vec<super::OneoffGatherPointDetectorData::OneoffGatherPointDetectorData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.client_collector_data_list)
    pub client_collector_data_list: ::std::vec::Vec<super::ClientCollectorData::ClientCollectorData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.normal_cool_down_data_list)
    pub normal_cool_down_data_list: ::std::vec::Vec<super::WidgetCoolDownData::WidgetCoolDownData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.group_cool_down_data_list)
    pub group_cool_down_data_list: ::std::vec::Vec<super::WidgetCoolDownData::WidgetCoolDownData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.slot_list)
    pub slot_list: ::std::vec::Vec<super::WidgetSlotData::WidgetSlotData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.lunch_box_data)
    pub lunch_box_data: ::protobuf::MessageField<super::LunchBoxData::LunchBoxData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.weather_wizard_data)
    pub weather_wizard_data: ::protobuf::MessageField<super::WeatherWizardData::WeatherWizardData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.sky_crystal_detector_data)
    pub sky_crystal_detector_data: ::protobuf::MessageField<super::SkyCrystalDetectorData::SkyCrystalDetectorData>,
    // @@protoc_insertion_point(field:AllWidgetDataNotify.background_active_widget_list)
    pub background_active_widget_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:AllWidgetDataNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AllWidgetDataNotify {
    fn default() -> &'a AllWidgetDataNotify {
        <AllWidgetDataNotify as ::protobuf::Message>::default_instance()
    }
}

impl AllWidgetDataNotify {
    pub fn new() -> AllWidgetDataNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "anchor_point_list",
            |m: &AllWidgetDataNotify| { &m.anchor_point_list },
            |m: &mut AllWidgetDataNotify| { &mut m.anchor_point_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "oneoff_gather_point_detector_data_list",
            |m: &AllWidgetDataNotify| { &m.oneoff_gather_point_detector_data_list },
            |m: &mut AllWidgetDataNotify| { &mut m.oneoff_gather_point_detector_data_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "client_collector_data_list",
            |m: &AllWidgetDataNotify| { &m.client_collector_data_list },
            |m: &mut AllWidgetDataNotify| { &mut m.client_collector_data_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "normal_cool_down_data_list",
            |m: &AllWidgetDataNotify| { &m.normal_cool_down_data_list },
            |m: &mut AllWidgetDataNotify| { &mut m.normal_cool_down_data_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "group_cool_down_data_list",
            |m: &AllWidgetDataNotify| { &m.group_cool_down_data_list },
            |m: &mut AllWidgetDataNotify| { &mut m.group_cool_down_data_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "slot_list",
            |m: &AllWidgetDataNotify| { &m.slot_list },
            |m: &mut AllWidgetDataNotify| { &mut m.slot_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LunchBoxData::LunchBoxData>(
            "lunch_box_data",
            |m: &AllWidgetDataNotify| { &m.lunch_box_data },
            |m: &mut AllWidgetDataNotify| { &mut m.lunch_box_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::WeatherWizardData::WeatherWizardData>(
            "weather_wizard_data",
            |m: &AllWidgetDataNotify| { &m.weather_wizard_data },
            |m: &mut AllWidgetDataNotify| { &mut m.weather_wizard_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SkyCrystalDetectorData::SkyCrystalDetectorData>(
            "sky_crystal_detector_data",
            |m: &AllWidgetDataNotify| { &m.sky_crystal_detector_data },
            |m: &mut AllWidgetDataNotify| { &mut m.sky_crystal_detector_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "background_active_widget_list",
            |m: &AllWidgetDataNotify| { &m.background_active_widget_list },
            |m: &mut AllWidgetDataNotify| { &mut m.background_active_widget_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AllWidgetDataNotify>(
            "AllWidgetDataNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AllWidgetDataNotify {
    const NAME: &'static str = "AllWidgetDataNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    self.anchor_point_list.push(is.read_message()?);
                },
                114 => {
                    self.oneoff_gather_point_detector_data_list.push(is.read_message()?);
                },
                18 => {
                    self.client_collector_data_list.push(is.read_message()?);
                },
                42 => {
                    self.normal_cool_down_data_list.push(is.read_message()?);
                },
                66 => {
                    self.group_cool_down_data_list.push(is.read_message()?);
                },
                10 => {
                    self.slot_list.push(is.read_message()?);
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lunch_box_data)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.weather_wizard_data)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sky_crystal_detector_data)?;
                },
                4442 => {
                    is.read_repeated_packed_uint32_into(&mut self.background_active_widget_list)?;
                },
                4440 => {
                    self.background_active_widget_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.anchor_point_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.oneoff_gather_point_detector_data_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.client_collector_data_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.normal_cool_down_data_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.group_cool_down_data_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.slot_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.lunch_box_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.weather_wizard_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sky_crystal_detector_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(555, &self.background_active_widget_list);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.anchor_point_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.oneoff_gather_point_detector_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.client_collector_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.normal_cool_down_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.group_cool_down_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.slot_list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.lunch_box_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.weather_wizard_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.sky_crystal_detector_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        os.write_repeated_packed_uint32(555, &self.background_active_widget_list)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AllWidgetDataNotify {
        AllWidgetDataNotify::new()
    }

    fn clear(&mut self) {
        self.anchor_point_list.clear();
        self.oneoff_gather_point_detector_data_list.clear();
        self.client_collector_data_list.clear();
        self.normal_cool_down_data_list.clear();
        self.group_cool_down_data_list.clear();
        self.slot_list.clear();
        self.lunch_box_data.clear();
        self.weather_wizard_data.clear();
        self.sky_crystal_detector_data.clear();
        self.background_active_widget_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AllWidgetDataNotify {
        static instance: AllWidgetDataNotify = AllWidgetDataNotify {
            anchor_point_list: ::std::vec::Vec::new(),
            oneoff_gather_point_detector_data_list: ::std::vec::Vec::new(),
            client_collector_data_list: ::std::vec::Vec::new(),
            normal_cool_down_data_list: ::std::vec::Vec::new(),
            group_cool_down_data_list: ::std::vec::Vec::new(),
            slot_list: ::std::vec::Vec::new(),
            lunch_box_data: ::protobuf::MessageField::none(),
            weather_wizard_data: ::protobuf::MessageField::none(),
            sky_crystal_detector_data: ::protobuf::MessageField::none(),
            background_active_widget_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AllWidgetDataNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AllWidgetDataNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AllWidgetDataNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllWidgetDataNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19AllWidgetDataNotify.proto\x1a#OneoffGatherPointDetectorData.proto\
    \x1a\x19ClientCollectorData.proto\x1a\x18WidgetCoolDownData.proto\x1a\
    \x15AnchorPointData.proto\x1a\x12LunchBoxData.proto\x1a\x1cSkyCrystalDet\
    ectorData.proto\x1a\x14WidgetSlotData.proto\x1a\x17WeatherWizardData.pro\
    to\"\xf8\x05\n\x13AllWidgetDataNotify\x12<\n\x11anchor_point_list\x18\
    \x04\x20\x03(\x0b2\x10.AnchorPointDataR\x0fanchorPointList\x12q\n&oneoff\
    _gather_point_detector_data_list\x18\x0e\x20\x03(\x0b2\x1e.OneoffGatherP\
    ointDetectorDataR!oneoffGatherPointDetectorDataList\x12Q\n\x1aclient_col\
    lector_data_list\x18\x02\x20\x03(\x0b2\x14.ClientCollectorDataR\x17clien\
    tCollectorDataList\x12O\n\x1anormal_cool_down_data_list\x18\x05\x20\x03(\
    \x0b2\x13.WidgetCoolDownDataR\x16normalCoolDownDataList\x12M\n\x19group_\
    cool_down_data_list\x18\x08\x20\x03(\x0b2\x13.WidgetCoolDownDataR\x15gro\
    upCoolDownDataList\x12,\n\tslot_list\x18\x01\x20\x03(\x0b2\x0f.WidgetSlo\
    tDataR\x08slotList\x123\n\x0elunch_box_data\x18\x0f\x20\x01(\x0b2\r.Lunc\
    hBoxDataR\x0clunchBoxData\x12B\n\x13weather_wizard_data\x18\x03\x20\x01(\
    \x0b2\x12.WeatherWizardDataR\x11weatherWizardData\x12R\n\x19sky_crystal_\
    detector_data\x18\x0b\x20\x01(\x0b2\x17.SkyCrystalDetectorDataR\x16skyCr\
    ystalDetectorData\x12B\n\x1dbackground_active_widget_list\x18\xab\x04\
    \x20\x03(\rR\x1abackgroundActiveWidgetListB\x1b\n\x19emu.grasscutter.net\
    .protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::OneoffGatherPointDetectorData::file_descriptor().clone());
            deps.push(super::ClientCollectorData::file_descriptor().clone());
            deps.push(super::WidgetCoolDownData::file_descriptor().clone());
            deps.push(super::AnchorPointData::file_descriptor().clone());
            deps.push(super::LunchBoxData::file_descriptor().clone());
            deps.push(super::SkyCrystalDetectorData::file_descriptor().clone());
            deps.push(super::WidgetSlotData::file_descriptor().clone());
            deps.push(super::WeatherWizardData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AllWidgetDataNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
