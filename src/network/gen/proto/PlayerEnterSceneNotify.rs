// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerEnterSceneNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:PlayerEnterSceneNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerEnterSceneNotify {
    // message fields
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.is_skip_ui)
    pub is_skip_ui: bool,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.prev_pos)
    pub prev_pos: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.world_level)
    pub world_level: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.target_uid)
    pub target_uid: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.scene_begin_time)
    pub scene_begin_time: u64,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.scene_tag_id_list)
    pub scene_tag_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.enter_scene_token)
    pub enter_scene_token: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.dungeon_id)
    pub dungeon_id: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.GPJHAEEMCBK)
    pub GPJHAEEMCBK: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.pos)
    pub pos: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.scene_id)
    pub scene_id: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.type)
    pub type_: ::protobuf::EnumOrUnknown<super::EnterType::EnterType>,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.ALJNJKPMOPB)
    pub ALJNJKPMOPB: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.EKIBACGBHCJ)
    pub EKIBACGBHCJ: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.KDHNDLANKNI)
    pub KDHNDLANKNI: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.map_layer_info)
    pub map_layer_info: ::protobuf::MessageField<super::MapLayerInfo::MapLayerInfo>,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.KMDLMKGJIHH)
    pub KMDLMKGJIHH: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.is_first_login_enter_scene)
    pub is_first_login_enter_scene: bool,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.DDGBKGDECME)
    pub DDGBKGDECME: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.scene_transaction)
    pub scene_transaction: ::std::string::String,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.create_player_uid)
    pub create_player_uid: u32,
    // @@protoc_insertion_point(field:PlayerEnterSceneNotify.OKCAGDNDEJN)
    pub OKCAGDNDEJN: u32,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerEnterSceneNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerEnterSceneNotify {
    fn default() -> &'a PlayerEnterSceneNotify {
        <PlayerEnterSceneNotify as ::protobuf::Message>::default_instance()
    }
}

impl PlayerEnterSceneNotify {
    pub fn new() -> PlayerEnterSceneNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(22);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_skip_ui",
            |m: &PlayerEnterSceneNotify| { &m.is_skip_ui },
            |m: &mut PlayerEnterSceneNotify| { &mut m.is_skip_ui },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "prev_pos",
            |m: &PlayerEnterSceneNotify| { &m.prev_pos },
            |m: &mut PlayerEnterSceneNotify| { &mut m.prev_pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "world_level",
            |m: &PlayerEnterSceneNotify| { &m.world_level },
            |m: &mut PlayerEnterSceneNotify| { &mut m.world_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_uid",
            |m: &PlayerEnterSceneNotify| { &m.target_uid },
            |m: &mut PlayerEnterSceneNotify| { &mut m.target_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_begin_time",
            |m: &PlayerEnterSceneNotify| { &m.scene_begin_time },
            |m: &mut PlayerEnterSceneNotify| { &mut m.scene_begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "scene_tag_id_list",
            |m: &PlayerEnterSceneNotify| { &m.scene_tag_id_list },
            |m: &mut PlayerEnterSceneNotify| { &mut m.scene_tag_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enter_scene_token",
            |m: &PlayerEnterSceneNotify| { &m.enter_scene_token },
            |m: &mut PlayerEnterSceneNotify| { &mut m.enter_scene_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dungeon_id",
            |m: &PlayerEnterSceneNotify| { &m.dungeon_id },
            |m: &mut PlayerEnterSceneNotify| { &mut m.dungeon_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GPJHAEEMCBK",
            |m: &PlayerEnterSceneNotify| { &m.GPJHAEEMCBK },
            |m: &mut PlayerEnterSceneNotify| { &mut m.GPJHAEEMCBK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "pos",
            |m: &PlayerEnterSceneNotify| { &m.pos },
            |m: &mut PlayerEnterSceneNotify| { &mut m.pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &PlayerEnterSceneNotify| { &m.scene_id },
            |m: &mut PlayerEnterSceneNotify| { &mut m.scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &PlayerEnterSceneNotify| { &m.type_ },
            |m: &mut PlayerEnterSceneNotify| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ALJNJKPMOPB",
            |m: &PlayerEnterSceneNotify| { &m.ALJNJKPMOPB },
            |m: &mut PlayerEnterSceneNotify| { &mut m.ALJNJKPMOPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKIBACGBHCJ",
            |m: &PlayerEnterSceneNotify| { &m.EKIBACGBHCJ },
            |m: &mut PlayerEnterSceneNotify| { &mut m.EKIBACGBHCJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KDHNDLANKNI",
            |m: &PlayerEnterSceneNotify| { &m.KDHNDLANKNI },
            |m: &mut PlayerEnterSceneNotify| { &mut m.KDHNDLANKNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MapLayerInfo::MapLayerInfo>(
            "map_layer_info",
            |m: &PlayerEnterSceneNotify| { &m.map_layer_info },
            |m: &mut PlayerEnterSceneNotify| { &mut m.map_layer_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "KMDLMKGJIHH",
            |m: &PlayerEnterSceneNotify| { &m.KMDLMKGJIHH },
            |m: &mut PlayerEnterSceneNotify| { &mut m.KMDLMKGJIHH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_first_login_enter_scene",
            |m: &PlayerEnterSceneNotify| { &m.is_first_login_enter_scene },
            |m: &mut PlayerEnterSceneNotify| { &mut m.is_first_login_enter_scene },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DDGBKGDECME",
            |m: &PlayerEnterSceneNotify| { &m.DDGBKGDECME },
            |m: &mut PlayerEnterSceneNotify| { &mut m.DDGBKGDECME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_transaction",
            |m: &PlayerEnterSceneNotify| { &m.scene_transaction },
            |m: &mut PlayerEnterSceneNotify| { &mut m.scene_transaction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "create_player_uid",
            |m: &PlayerEnterSceneNotify| { &m.create_player_uid },
            |m: &mut PlayerEnterSceneNotify| { &mut m.create_player_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OKCAGDNDEJN",
            |m: &PlayerEnterSceneNotify| { &m.OKCAGDNDEJN },
            |m: &mut PlayerEnterSceneNotify| { &mut m.OKCAGDNDEJN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerEnterSceneNotify>(
            "PlayerEnterSceneNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerEnterSceneNotify {
    const NAME: &'static str = "PlayerEnterSceneNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_skip_ui = is.read_bool()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.prev_pos)?;
                },
                24 => {
                    self.world_level = is.read_uint32()?;
                },
                32 => {
                    self.target_uid = is.read_uint32()?;
                },
                40 => {
                    self.scene_begin_time = is.read_uint64()?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.scene_tag_id_list)?;
                },
                48 => {
                    self.scene_tag_id_list.push(is.read_uint32()?);
                },
                56 => {
                    self.enter_scene_token = is.read_uint32()?;
                },
                88 => {
                    self.dungeon_id = is.read_uint32()?;
                },
                96 => {
                    self.GPJHAEEMCBK = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pos)?;
                },
                112 => {
                    self.scene_id = is.read_uint32()?;
                },
                120 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                2704 => {
                    self.ALJNJKPMOPB = is.read_uint32()?;
                },
                2864 => {
                    self.EKIBACGBHCJ = is.read_uint32()?;
                },
                3712 => {
                    self.KDHNDLANKNI = is.read_uint32()?;
                },
                5922 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.map_layer_info)?;
                },
                6210 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KMDLMKGJIHH)?;
                },
                6528 => {
                    self.is_first_login_enter_scene = is.read_bool()?;
                },
                9184 => {
                    self.DDGBKGDECME = is.read_uint32()?;
                },
                11938 => {
                    self.scene_transaction = is.read_string()?;
                },
                13568 => {
                    self.create_player_uid = is.read_uint32()?;
                },
                14960 => {
                    self.OKCAGDNDEJN = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_skip_ui != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.prev_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.world_level != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.world_level);
        }
        if self.target_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.target_uid);
        }
        if self.scene_begin_time != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.scene_begin_time);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.scene_tag_id_list);
        if self.enter_scene_token != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.enter_scene_token);
        }
        if self.dungeon_id != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.dungeon_id);
        }
        if self.GPJHAEEMCBK != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.GPJHAEEMCBK);
        }
        if let Some(v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.scene_id != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.scene_id);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::EnterType::EnterType::ENTER_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(15, self.type_.value());
        }
        if self.ALJNJKPMOPB != 0 {
            my_size += ::protobuf::rt::uint32_size(338, self.ALJNJKPMOPB);
        }
        if self.EKIBACGBHCJ != 0 {
            my_size += ::protobuf::rt::uint32_size(358, self.EKIBACGBHCJ);
        }
        if self.KDHNDLANKNI != 0 {
            my_size += ::protobuf::rt::uint32_size(464, self.KDHNDLANKNI);
        }
        if let Some(v) = self.map_layer_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.KMDLMKGJIHH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.is_first_login_enter_scene != false {
            my_size += 2 + 1;
        }
        if self.DDGBKGDECME != 0 {
            my_size += ::protobuf::rt::uint32_size(1148, self.DDGBKGDECME);
        }
        if !self.scene_transaction.is_empty() {
            my_size += ::protobuf::rt::string_size(1492, &self.scene_transaction);
        }
        if self.create_player_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(1696, self.create_player_uid);
        }
        if self.OKCAGDNDEJN != 0 {
            my_size += ::protobuf::rt::uint32_size(1870, self.OKCAGDNDEJN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_skip_ui != false {
            os.write_bool(1, self.is_skip_ui)?;
        }
        if let Some(v) = self.prev_pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.world_level != 0 {
            os.write_uint32(3, self.world_level)?;
        }
        if self.target_uid != 0 {
            os.write_uint32(4, self.target_uid)?;
        }
        if self.scene_begin_time != 0 {
            os.write_uint64(5, self.scene_begin_time)?;
        }
        os.write_repeated_packed_uint32(6, &self.scene_tag_id_list)?;
        if self.enter_scene_token != 0 {
            os.write_uint32(7, self.enter_scene_token)?;
        }
        if self.dungeon_id != 0 {
            os.write_uint32(11, self.dungeon_id)?;
        }
        if self.GPJHAEEMCBK != 0 {
            os.write_uint32(12, self.GPJHAEEMCBK)?;
        }
        if let Some(v) = self.pos.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if self.scene_id != 0 {
            os.write_uint32(14, self.scene_id)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::EnterType::EnterType::ENTER_TYPE_NONE) {
            os.write_enum(15, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.ALJNJKPMOPB != 0 {
            os.write_uint32(338, self.ALJNJKPMOPB)?;
        }
        if self.EKIBACGBHCJ != 0 {
            os.write_uint32(358, self.EKIBACGBHCJ)?;
        }
        if self.KDHNDLANKNI != 0 {
            os.write_uint32(464, self.KDHNDLANKNI)?;
        }
        if let Some(v) = self.map_layer_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(740, v, os)?;
        }
        if let Some(v) = self.KMDLMKGJIHH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(776, v, os)?;
        }
        if self.is_first_login_enter_scene != false {
            os.write_bool(816, self.is_first_login_enter_scene)?;
        }
        if self.DDGBKGDECME != 0 {
            os.write_uint32(1148, self.DDGBKGDECME)?;
        }
        if !self.scene_transaction.is_empty() {
            os.write_string(1492, &self.scene_transaction)?;
        }
        if self.create_player_uid != 0 {
            os.write_uint32(1696, self.create_player_uid)?;
        }
        if self.OKCAGDNDEJN != 0 {
            os.write_uint32(1870, self.OKCAGDNDEJN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerEnterSceneNotify {
        PlayerEnterSceneNotify::new()
    }

    fn clear(&mut self) {
        self.is_skip_ui = false;
        self.prev_pos.clear();
        self.world_level = 0;
        self.target_uid = 0;
        self.scene_begin_time = 0;
        self.scene_tag_id_list.clear();
        self.enter_scene_token = 0;
        self.dungeon_id = 0;
        self.GPJHAEEMCBK = 0;
        self.pos.clear();
        self.scene_id = 0;
        self.type_ = ::protobuf::EnumOrUnknown::new(super::EnterType::EnterType::ENTER_TYPE_NONE);
        self.ALJNJKPMOPB = 0;
        self.EKIBACGBHCJ = 0;
        self.KDHNDLANKNI = 0;
        self.map_layer_info.clear();
        self.KMDLMKGJIHH.clear();
        self.is_first_login_enter_scene = false;
        self.DDGBKGDECME = 0;
        self.scene_transaction.clear();
        self.create_player_uid = 0;
        self.OKCAGDNDEJN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerEnterSceneNotify {
        static instance: PlayerEnterSceneNotify = PlayerEnterSceneNotify {
            is_skip_ui: false,
            prev_pos: ::protobuf::MessageField::none(),
            world_level: 0,
            target_uid: 0,
            scene_begin_time: 0,
            scene_tag_id_list: ::std::vec::Vec::new(),
            enter_scene_token: 0,
            dungeon_id: 0,
            GPJHAEEMCBK: 0,
            pos: ::protobuf::MessageField::none(),
            scene_id: 0,
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            ALJNJKPMOPB: 0,
            EKIBACGBHCJ: 0,
            KDHNDLANKNI: 0,
            map_layer_info: ::protobuf::MessageField::none(),
            KMDLMKGJIHH: ::protobuf::MessageField::none(),
            is_first_login_enter_scene: false,
            DDGBKGDECME: 0,
            scene_transaction: ::std::string::String::new(),
            create_player_uid: 0,
            OKCAGDNDEJN: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerEnterSceneNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerEnterSceneNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerEnterSceneNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerEnterSceneNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cPlayerEnterSceneNotify.proto\x1a\x0cVector.proto\x1a\x0fEnterType.\
    proto\x1a\x12MapLayerInfo.proto\"\xdb\x06\n\x16PlayerEnterSceneNotify\
    \x12\x1c\n\nis_skip_ui\x18\x01\x20\x01(\x08R\x08isSkipUi\x12\"\n\x08prev\
    _pos\x18\x02\x20\x01(\x0b2\x07.VectorR\x07prevPos\x12\x1f\n\x0bworld_lev\
    el\x18\x03\x20\x01(\rR\nworldLevel\x12\x1d\n\ntarget_uid\x18\x04\x20\x01\
    (\rR\ttargetUid\x12(\n\x10scene_begin_time\x18\x05\x20\x01(\x04R\x0escen\
    eBeginTime\x12)\n\x11scene_tag_id_list\x18\x06\x20\x03(\rR\x0esceneTagId\
    List\x12*\n\x11enter_scene_token\x18\x07\x20\x01(\rR\x0fenterSceneToken\
    \x12\x1d\n\ndungeon_id\x18\x0b\x20\x01(\rR\tdungeonId\x12\x20\n\x0bGPJHA\
    EEMCBK\x18\x0c\x20\x01(\rR\x0bGPJHAEEMCBK\x12\x19\n\x03pos\x18\r\x20\x01\
    (\x0b2\x07.VectorR\x03pos\x12\x19\n\x08scene_id\x18\x0e\x20\x01(\rR\x07s\
    ceneId\x12\x1e\n\x04type\x18\x0f\x20\x01(\x0e2\n.EnterTypeR\x04type\x12!\
    \n\x0bALJNJKPMOPB\x18\xd2\x02\x20\x01(\rR\x0bALJNJKPMOPB\x12!\n\x0bEKIBA\
    CGBHCJ\x18\xe6\x02\x20\x01(\rR\x0bEKIBACGBHCJ\x12!\n\x0bKDHNDLANKNI\x18\
    \xd0\x03\x20\x01(\rR\x0bKDHNDLANKNI\x124\n\x0emap_layer_info\x18\xe4\x05\
    \x20\x01(\x0b2\r.MapLayerInfoR\x0cmapLayerInfo\x12*\n\x0bKMDLMKGJIHH\x18\
    \x88\x06\x20\x01(\x0b2\x07.VectorR\x0bKMDLMKGJIHH\x12;\n\x1ais_first_log\
    in_enter_scene\x18\xb0\x06\x20\x01(\x08R\x16isFirstLoginEnterScene\x12!\
    \n\x0bDDGBKGDECME\x18\xfc\x08\x20\x01(\rR\x0bDDGBKGDECME\x12,\n\x11scene\
    _transaction\x18\xd4\x0b\x20\x01(\tR\x10sceneTransaction\x12+\n\x11creat\
    e_player_uid\x18\xa0\r\x20\x01(\rR\x0fcreatePlayerUid\x12!\n\x0bOKCAGDND\
    EJN\x18\xce\x0e\x20\x01(\rR\x0bOKCAGDNDEJNB\x1b\n\x19emu.grasscutter.net\
    .protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::Vector::file_descriptor().clone());
            deps.push(super::EnterType::file_descriptor().clone());
            deps.push(super::MapLayerInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerEnterSceneNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
