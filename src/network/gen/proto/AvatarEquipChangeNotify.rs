// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AvatarEquipChangeNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:AvatarEquipChangeNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AvatarEquipChangeNotify {
    // message fields
    // @@protoc_insertion_point(field:AvatarEquipChangeNotify.avatar_guid)
    pub avatar_guid: u64,
    // @@protoc_insertion_point(field:AvatarEquipChangeNotify.weapon)
    pub weapon: ::protobuf::MessageField<super::SceneWeaponInfo::SceneWeaponInfo>,
    // @@protoc_insertion_point(field:AvatarEquipChangeNotify.equip_guid)
    pub equip_guid: u64,
    // @@protoc_insertion_point(field:AvatarEquipChangeNotify.equip_type)
    pub equip_type: u32,
    // @@protoc_insertion_point(field:AvatarEquipChangeNotify.reliquary)
    pub reliquary: ::protobuf::MessageField<super::SceneReliquaryInfo::SceneReliquaryInfo>,
    // @@protoc_insertion_point(field:AvatarEquipChangeNotify.item_id)
    pub item_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AvatarEquipChangeNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AvatarEquipChangeNotify {
    fn default() -> &'a AvatarEquipChangeNotify {
        <AvatarEquipChangeNotify as ::protobuf::Message>::default_instance()
    }
}

impl AvatarEquipChangeNotify {
    pub fn new() -> AvatarEquipChangeNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar_guid",
            |m: &AvatarEquipChangeNotify| { &m.avatar_guid },
            |m: &mut AvatarEquipChangeNotify| { &mut m.avatar_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SceneWeaponInfo::SceneWeaponInfo>(
            "weapon",
            |m: &AvatarEquipChangeNotify| { &m.weapon },
            |m: &mut AvatarEquipChangeNotify| { &mut m.weapon },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "equip_guid",
            |m: &AvatarEquipChangeNotify| { &m.equip_guid },
            |m: &mut AvatarEquipChangeNotify| { &mut m.equip_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "equip_type",
            |m: &AvatarEquipChangeNotify| { &m.equip_type },
            |m: &mut AvatarEquipChangeNotify| { &mut m.equip_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::SceneReliquaryInfo::SceneReliquaryInfo>(
            "reliquary",
            |m: &AvatarEquipChangeNotify| { &m.reliquary },
            |m: &mut AvatarEquipChangeNotify| { &mut m.reliquary },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "item_id",
            |m: &AvatarEquipChangeNotify| { &m.item_id },
            |m: &mut AvatarEquipChangeNotify| { &mut m.item_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AvatarEquipChangeNotify>(
            "AvatarEquipChangeNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AvatarEquipChangeNotify {
    const NAME: &'static str = "AvatarEquipChangeNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.avatar_guid = is.read_uint64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.weapon)?;
                },
                56 => {
                    self.equip_guid = is.read_uint64()?;
                },
                80 => {
                    self.equip_type = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reliquary)?;
                },
                96 => {
                    self.item_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.avatar_guid != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.avatar_guid);
        }
        if let Some(v) = self.weapon.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.equip_guid != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.equip_guid);
        }
        if self.equip_type != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.equip_type);
        }
        if let Some(v) = self.reliquary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.item_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.avatar_guid != 0 {
            os.write_uint64(1, self.avatar_guid)?;
        }
        if let Some(v) = self.weapon.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.equip_guid != 0 {
            os.write_uint64(7, self.equip_guid)?;
        }
        if self.equip_type != 0 {
            os.write_uint32(10, self.equip_type)?;
        }
        if let Some(v) = self.reliquary.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if self.item_id != 0 {
            os.write_uint32(12, self.item_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AvatarEquipChangeNotify {
        AvatarEquipChangeNotify::new()
    }

    fn clear(&mut self) {
        self.avatar_guid = 0;
        self.weapon.clear();
        self.equip_guid = 0;
        self.equip_type = 0;
        self.reliquary.clear();
        self.item_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AvatarEquipChangeNotify {
        static instance: AvatarEquipChangeNotify = AvatarEquipChangeNotify {
            avatar_guid: 0,
            weapon: ::protobuf::MessageField::none(),
            equip_guid: 0,
            equip_type: 0,
            reliquary: ::protobuf::MessageField::none(),
            item_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AvatarEquipChangeNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AvatarEquipChangeNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AvatarEquipChangeNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AvatarEquipChangeNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dAvatarEquipChangeNotify.proto\x1a\x15SceneWeaponInfo.proto\x1a\x18\
    SceneReliquaryInfo.proto\"\xee\x01\n\x17AvatarEquipChangeNotify\x12\x1f\
    \n\x0bavatar_guid\x18\x01\x20\x01(\x04R\navatarGuid\x12(\n\x06weapon\x18\
    \x04\x20\x01(\x0b2\x10.SceneWeaponInfoR\x06weapon\x12\x1d\n\nequip_guid\
    \x18\x07\x20\x01(\x04R\tequipGuid\x12\x1d\n\nequip_type\x18\n\x20\x01(\r\
    R\tequipType\x121\n\treliquary\x18\x0b\x20\x01(\x0b2\x13.SceneReliquaryI\
    nfoR\treliquary\x12\x17\n\x07item_id\x18\x0c\x20\x01(\rR\x06itemIdB\x1b\
    \n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::SceneWeaponInfo::file_descriptor().clone());
            deps.push(super::SceneReliquaryInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AvatarEquipChangeNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
