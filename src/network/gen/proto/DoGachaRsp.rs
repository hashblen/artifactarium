// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DoGachaRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:DoGachaRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DoGachaRsp {
    // message fields
    // @@protoc_insertion_point(field:DoGachaRsp.wish_item_id)
    pub wish_item_id: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:DoGachaRsp.gacha_schedule_id)
    pub gacha_schedule_id: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.ten_cost_item_num)
    pub ten_cost_item_num: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.cost_item_id)
    pub cost_item_id: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.left_gacha_times)
    pub left_gacha_times: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.gacha_times_limit)
    pub gacha_times_limit: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.ten_cost_item_id)
    pub ten_cost_item_id: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.gacha_sort_id)
    pub gacha_sort_id: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.gacha_item_list)
    pub gacha_item_list: ::std::vec::Vec<super::GachaItem::GachaItem>,
    // @@protoc_insertion_point(field:DoGachaRsp.gacha_times)
    pub gacha_times: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.cost_item_num)
    pub cost_item_num: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.wish_progress)
    pub wish_progress: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.gacha_type)
    pub gacha_type: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.wish_max_progress)
    pub wish_max_progress: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.new_gacha_random)
    pub new_gacha_random: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.cur_schedule_daily_gacha_times)
    pub cur_schedule_daily_gacha_times: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.DBNKDMFDCNG)
    pub DBNKDMFDCNG: bool,
    // @@protoc_insertion_point(field:DoGachaRsp.is_under_minors_restrict)
    pub is_under_minors_restrict: bool,
    // @@protoc_insertion_point(field:DoGachaRsp.daily_gacha_times)
    pub daily_gacha_times: u32,
    // @@protoc_insertion_point(field:DoGachaRsp.is_under_general_restrict)
    pub is_under_general_restrict: bool,
    // special fields
    // @@protoc_insertion_point(special_field:DoGachaRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DoGachaRsp {
    fn default() -> &'a DoGachaRsp {
        <DoGachaRsp as ::protobuf::Message>::default_instance()
    }
}

impl DoGachaRsp {
    pub fn new() -> DoGachaRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wish_item_id",
            |m: &DoGachaRsp| { &m.wish_item_id },
            |m: &mut DoGachaRsp| { &mut m.wish_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &DoGachaRsp| { &m.retcode },
            |m: &mut DoGachaRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_schedule_id",
            |m: &DoGachaRsp| { &m.gacha_schedule_id },
            |m: &mut DoGachaRsp| { &mut m.gacha_schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ten_cost_item_num",
            |m: &DoGachaRsp| { &m.ten_cost_item_num },
            |m: &mut DoGachaRsp| { &mut m.ten_cost_item_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cost_item_id",
            |m: &DoGachaRsp| { &m.cost_item_id },
            |m: &mut DoGachaRsp| { &mut m.cost_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "left_gacha_times",
            |m: &DoGachaRsp| { &m.left_gacha_times },
            |m: &mut DoGachaRsp| { &mut m.left_gacha_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_times_limit",
            |m: &DoGachaRsp| { &m.gacha_times_limit },
            |m: &mut DoGachaRsp| { &mut m.gacha_times_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ten_cost_item_id",
            |m: &DoGachaRsp| { &m.ten_cost_item_id },
            |m: &mut DoGachaRsp| { &mut m.ten_cost_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_sort_id",
            |m: &DoGachaRsp| { &m.gacha_sort_id },
            |m: &mut DoGachaRsp| { &mut m.gacha_sort_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "gacha_item_list",
            |m: &DoGachaRsp| { &m.gacha_item_list },
            |m: &mut DoGachaRsp| { &mut m.gacha_item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_times",
            |m: &DoGachaRsp| { &m.gacha_times },
            |m: &mut DoGachaRsp| { &mut m.gacha_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cost_item_num",
            |m: &DoGachaRsp| { &m.cost_item_num },
            |m: &mut DoGachaRsp| { &mut m.cost_item_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wish_progress",
            |m: &DoGachaRsp| { &m.wish_progress },
            |m: &mut DoGachaRsp| { &mut m.wish_progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gacha_type",
            |m: &DoGachaRsp| { &m.gacha_type },
            |m: &mut DoGachaRsp| { &mut m.gacha_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wish_max_progress",
            |m: &DoGachaRsp| { &m.wish_max_progress },
            |m: &mut DoGachaRsp| { &mut m.wish_max_progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "new_gacha_random",
            |m: &DoGachaRsp| { &m.new_gacha_random },
            |m: &mut DoGachaRsp| { &mut m.new_gacha_random },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_schedule_daily_gacha_times",
            |m: &DoGachaRsp| { &m.cur_schedule_daily_gacha_times },
            |m: &mut DoGachaRsp| { &mut m.cur_schedule_daily_gacha_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DBNKDMFDCNG",
            |m: &DoGachaRsp| { &m.DBNKDMFDCNG },
            |m: &mut DoGachaRsp| { &mut m.DBNKDMFDCNG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_under_minors_restrict",
            |m: &DoGachaRsp| { &m.is_under_minors_restrict },
            |m: &mut DoGachaRsp| { &mut m.is_under_minors_restrict },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "daily_gacha_times",
            |m: &DoGachaRsp| { &m.daily_gacha_times },
            |m: &mut DoGachaRsp| { &mut m.daily_gacha_times },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_under_general_restrict",
            |m: &DoGachaRsp| { &m.is_under_general_restrict },
            |m: &mut DoGachaRsp| { &mut m.is_under_general_restrict },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DoGachaRsp>(
            "DoGachaRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DoGachaRsp {
    const NAME: &'static str = "DoGachaRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.wish_item_id = is.read_uint32()?;
                },
                16 => {
                    self.retcode = is.read_int32()?;
                },
                24 => {
                    self.gacha_schedule_id = is.read_uint32()?;
                },
                32 => {
                    self.ten_cost_item_num = is.read_uint32()?;
                },
                40 => {
                    self.cost_item_id = is.read_uint32()?;
                },
                48 => {
                    self.left_gacha_times = is.read_uint32()?;
                },
                56 => {
                    self.gacha_times_limit = is.read_uint32()?;
                },
                64 => {
                    self.ten_cost_item_id = is.read_uint32()?;
                },
                72 => {
                    self.gacha_sort_id = is.read_uint32()?;
                },
                82 => {
                    self.gacha_item_list.push(is.read_message()?);
                },
                88 => {
                    self.gacha_times = is.read_uint32()?;
                },
                96 => {
                    self.cost_item_num = is.read_uint32()?;
                },
                104 => {
                    self.wish_progress = is.read_uint32()?;
                },
                112 => {
                    self.gacha_type = is.read_uint32()?;
                },
                120 => {
                    self.wish_max_progress = is.read_uint32()?;
                },
                128 => {
                    self.new_gacha_random = is.read_uint32()?;
                },
                3024 => {
                    self.cur_schedule_daily_gacha_times = is.read_uint32()?;
                },
                3040 => {
                    self.DBNKDMFDCNG = is.read_bool()?;
                },
                8152 => {
                    self.is_under_minors_restrict = is.read_bool()?;
                },
                12224 => {
                    self.daily_gacha_times = is.read_uint32()?;
                },
                12832 => {
                    self.is_under_general_restrict = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.wish_item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.wish_item_id);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.retcode);
        }
        if self.gacha_schedule_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.gacha_schedule_id);
        }
        if self.ten_cost_item_num != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.ten_cost_item_num);
        }
        if self.cost_item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.cost_item_id);
        }
        if self.left_gacha_times != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.left_gacha_times);
        }
        if self.gacha_times_limit != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.gacha_times_limit);
        }
        if self.ten_cost_item_id != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.ten_cost_item_id);
        }
        if self.gacha_sort_id != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.gacha_sort_id);
        }
        for value in &self.gacha_item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.gacha_times != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.gacha_times);
        }
        if self.cost_item_num != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.cost_item_num);
        }
        if self.wish_progress != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.wish_progress);
        }
        if self.gacha_type != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.gacha_type);
        }
        if self.wish_max_progress != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.wish_max_progress);
        }
        if self.new_gacha_random != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.new_gacha_random);
        }
        if self.cur_schedule_daily_gacha_times != 0 {
            my_size += ::protobuf::rt::uint32_size(378, self.cur_schedule_daily_gacha_times);
        }
        if self.DBNKDMFDCNG != false {
            my_size += 2 + 1;
        }
        if self.is_under_minors_restrict != false {
            my_size += 2 + 1;
        }
        if self.daily_gacha_times != 0 {
            my_size += ::protobuf::rt::uint32_size(1528, self.daily_gacha_times);
        }
        if self.is_under_general_restrict != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.wish_item_id != 0 {
            os.write_uint32(1, self.wish_item_id)?;
        }
        if self.retcode != 0 {
            os.write_int32(2, self.retcode)?;
        }
        if self.gacha_schedule_id != 0 {
            os.write_uint32(3, self.gacha_schedule_id)?;
        }
        if self.ten_cost_item_num != 0 {
            os.write_uint32(4, self.ten_cost_item_num)?;
        }
        if self.cost_item_id != 0 {
            os.write_uint32(5, self.cost_item_id)?;
        }
        if self.left_gacha_times != 0 {
            os.write_uint32(6, self.left_gacha_times)?;
        }
        if self.gacha_times_limit != 0 {
            os.write_uint32(7, self.gacha_times_limit)?;
        }
        if self.ten_cost_item_id != 0 {
            os.write_uint32(8, self.ten_cost_item_id)?;
        }
        if self.gacha_sort_id != 0 {
            os.write_uint32(9, self.gacha_sort_id)?;
        }
        for v in &self.gacha_item_list {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if self.gacha_times != 0 {
            os.write_uint32(11, self.gacha_times)?;
        }
        if self.cost_item_num != 0 {
            os.write_uint32(12, self.cost_item_num)?;
        }
        if self.wish_progress != 0 {
            os.write_uint32(13, self.wish_progress)?;
        }
        if self.gacha_type != 0 {
            os.write_uint32(14, self.gacha_type)?;
        }
        if self.wish_max_progress != 0 {
            os.write_uint32(15, self.wish_max_progress)?;
        }
        if self.new_gacha_random != 0 {
            os.write_uint32(16, self.new_gacha_random)?;
        }
        if self.cur_schedule_daily_gacha_times != 0 {
            os.write_uint32(378, self.cur_schedule_daily_gacha_times)?;
        }
        if self.DBNKDMFDCNG != false {
            os.write_bool(380, self.DBNKDMFDCNG)?;
        }
        if self.is_under_minors_restrict != false {
            os.write_bool(1019, self.is_under_minors_restrict)?;
        }
        if self.daily_gacha_times != 0 {
            os.write_uint32(1528, self.daily_gacha_times)?;
        }
        if self.is_under_general_restrict != false {
            os.write_bool(1604, self.is_under_general_restrict)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DoGachaRsp {
        DoGachaRsp::new()
    }

    fn clear(&mut self) {
        self.wish_item_id = 0;
        self.retcode = 0;
        self.gacha_schedule_id = 0;
        self.ten_cost_item_num = 0;
        self.cost_item_id = 0;
        self.left_gacha_times = 0;
        self.gacha_times_limit = 0;
        self.ten_cost_item_id = 0;
        self.gacha_sort_id = 0;
        self.gacha_item_list.clear();
        self.gacha_times = 0;
        self.cost_item_num = 0;
        self.wish_progress = 0;
        self.gacha_type = 0;
        self.wish_max_progress = 0;
        self.new_gacha_random = 0;
        self.cur_schedule_daily_gacha_times = 0;
        self.DBNKDMFDCNG = false;
        self.is_under_minors_restrict = false;
        self.daily_gacha_times = 0;
        self.is_under_general_restrict = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DoGachaRsp {
        static instance: DoGachaRsp = DoGachaRsp {
            wish_item_id: 0,
            retcode: 0,
            gacha_schedule_id: 0,
            ten_cost_item_num: 0,
            cost_item_id: 0,
            left_gacha_times: 0,
            gacha_times_limit: 0,
            ten_cost_item_id: 0,
            gacha_sort_id: 0,
            gacha_item_list: ::std::vec::Vec::new(),
            gacha_times: 0,
            cost_item_num: 0,
            wish_progress: 0,
            gacha_type: 0,
            wish_max_progress: 0,
            new_gacha_random: 0,
            cur_schedule_daily_gacha_times: 0,
            DBNKDMFDCNG: false,
            is_under_minors_restrict: false,
            daily_gacha_times: 0,
            is_under_general_restrict: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DoGachaRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DoGachaRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DoGachaRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DoGachaRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10DoGachaRsp.proto\x1a\x0fGachaItem.proto\"\x82\x07\n\nDoGachaRsp\
    \x12\x20\n\x0cwish_item_id\x18\x01\x20\x01(\rR\nwishItemId\x12\x18\n\x07\
    retcode\x18\x02\x20\x01(\x05R\x07retcode\x12*\n\x11gacha_schedule_id\x18\
    \x03\x20\x01(\rR\x0fgachaScheduleId\x12)\n\x11ten_cost_item_num\x18\x04\
    \x20\x01(\rR\x0etenCostItemNum\x12\x20\n\x0ccost_item_id\x18\x05\x20\x01\
    (\rR\ncostItemId\x12(\n\x10left_gacha_times\x18\x06\x20\x01(\rR\x0eleftG\
    achaTimes\x12*\n\x11gacha_times_limit\x18\x07\x20\x01(\rR\x0fgachaTimesL\
    imit\x12'\n\x10ten_cost_item_id\x18\x08\x20\x01(\rR\rtenCostItemId\x12\"\
    \n\rgacha_sort_id\x18\t\x20\x01(\rR\x0bgachaSortId\x122\n\x0fgacha_item_\
    list\x18\n\x20\x03(\x0b2\n.GachaItemR\rgachaItemList\x12\x1f\n\x0bgacha_\
    times\x18\x0b\x20\x01(\rR\ngachaTimes\x12\"\n\rcost_item_num\x18\x0c\x20\
    \x01(\rR\x0bcostItemNum\x12#\n\rwish_progress\x18\r\x20\x01(\rR\x0cwishP\
    rogress\x12\x1d\n\ngacha_type\x18\x0e\x20\x01(\rR\tgachaType\x12*\n\x11w\
    ish_max_progress\x18\x0f\x20\x01(\rR\x0fwishMaxProgress\x12(\n\x10new_ga\
    cha_random\x18\x10\x20\x01(\rR\x0enewGachaRandom\x12C\n\x1ecur_schedule_\
    daily_gacha_times\x18\xfa\x02\x20\x01(\rR\x1acurScheduleDailyGachaTimes\
    \x12!\n\x0bDBNKDMFDCNG\x18\xfc\x02\x20\x01(\x08R\x0bDBNKDMFDCNG\x128\n\
    \x18is_under_minors_restrict\x18\xfb\x07\x20\x01(\x08R\x15isUnderMinorsR\
    estrict\x12+\n\x11daily_gacha_times\x18\xf8\x0b\x20\x01(\rR\x0fdailyGach\
    aTimes\x12:\n\x19is_under_general_restrict\x18\xc4\x0c\x20\x01(\x08R\x16\
    isUnderGeneralRestrictB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::GachaItem::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DoGachaRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
