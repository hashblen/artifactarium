// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ActivityInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:ActivityInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ActivityInfo {
    // message fields
    // @@protoc_insertion_point(field:ActivityInfo.meet_cond_list)
    pub meet_cond_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.end_time)
    pub end_time: u32,
    // @@protoc_insertion_point(field:ActivityInfo.begin_time)
    pub begin_time: u32,
    // @@protoc_insertion_point(field:ActivityInfo.is_finished)
    pub is_finished: bool,
    // @@protoc_insertion_point(field:ActivityInfo.FALGLCJDKCL)
    pub FALGLCJDKCL: bool,
    // @@protoc_insertion_point(field:ActivityInfo.watcher_info_list)
    pub watcher_info_list: ::std::vec::Vec<super::ActivityWatcherInfo::ActivityWatcherInfo>,
    // @@protoc_insertion_point(field:ActivityInfo.expire_cond_list)
    pub expire_cond_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.schedule_id)
    pub schedule_id: u32,
    // @@protoc_insertion_point(field:ActivityInfo.ONCLIGBKLPF)
    pub ONCLIGBKLPF: bool,
    // @@protoc_insertion_point(field:ActivityInfo.activity_type)
    pub activity_type: u32,
    // @@protoc_insertion_point(field:ActivityInfo.activity_id)
    pub activity_id: u32,
    // @@protoc_insertion_point(field:ActivityInfo.cur_score)
    pub cur_score: u32,
    // @@protoc_insertion_point(field:ActivityInfo.FFGHMFNFPNL)
    pub FFGHMFNFPNL: u32,
    // @@protoc_insertion_point(field:ActivityInfo.first_day_start_time)
    pub first_day_start_time: u32,
    // @@protoc_insertion_point(field:ActivityInfo.LKODGHFICBH)
    pub LKODGHFICBH: u32,
    // @@protoc_insertion_point(field:ActivityInfo.CDBIIEIPBFF)
    pub CDBIIEIPBFF: bool,
    // @@protoc_insertion_point(field:ActivityInfo.LCHFFKHPJIO)
    pub LCHFFKHPJIO: bool,
    // @@protoc_insertion_point(field:ActivityInfo.ILKPGDKEIEG)
    pub ILKPGDKEIEG: bool,
    // @@protoc_insertion_point(field:ActivityInfo.taken_reward_list)
    pub taken_reward_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.CIDDJFNIMPJ)
    pub CIDDJFNIMPJ: u64,
    // @@protoc_insertion_point(field:ActivityInfo.activity_push_tips_data_list)
    pub activity_push_tips_data_list: ::std::vec::Vec<super::ActivityPushTipsData::ActivityPushTipsData>,
    // @@protoc_insertion_point(field:ActivityInfo.MPPFCLCENAP)
    pub MPPFCLCENAP: u32,
    // @@protoc_insertion_point(field:ActivityInfo.GONEPFEDMEL)
    pub GONEPFEDMEL: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:ActivityInfo.NJCGNGLKPBJ)
    pub NJCGNGLKPBJ: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ActivityInfo.ODMJHPBFIKO)
    pub ODMJHPBFIKO: bool,
    // @@protoc_insertion_point(field:ActivityInfo.activity_coin_map)
    pub activity_coin_map: ::std::collections::HashMap<u32, u32>,
    // @@protoc_insertion_point(field:ActivityInfo.wish_gift_num_map)
    pub wish_gift_num_map: ::std::collections::HashMap<u32, u32>,
    // message oneof groups
    pub detail: ::std::option::Option<activity_info::Detail>,
    // special fields
    // @@protoc_insertion_point(special_field:ActivityInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ActivityInfo {
    fn default() -> &'a ActivityInfo {
        <ActivityInfo as ::protobuf::Message>::default_instance()
    }
}

impl ActivityInfo {
    pub fn new() -> ActivityInfo {
        ::std::default::Default::default()
    }

    // .MusicGameActivityDetailInfo music_game_info = 1099;

    pub fn music_game_info(&self) -> &super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(ref v)) => v,
            _ => <super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_music_game_info(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_music_game_info(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_music_game_info(&mut self, v: super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo) {
        self.detail = ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_music_game_info(&mut self) -> &mut super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo {
        if let ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo::new()));
        }
        match self.detail {
            ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_music_game_info(&mut self) -> super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo {
        if self.has_music_game_info() {
            match self.detail.take() {
                ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(28);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "meet_cond_list",
            |m: &ActivityInfo| { &m.meet_cond_list },
            |m: &mut ActivityInfo| { &mut m.meet_cond_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &ActivityInfo| { &m.end_time },
            |m: &mut ActivityInfo| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "begin_time",
            |m: &ActivityInfo| { &m.begin_time },
            |m: &mut ActivityInfo| { &mut m.begin_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_finished",
            |m: &ActivityInfo| { &m.is_finished },
            |m: &mut ActivityInfo| { &mut m.is_finished },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FALGLCJDKCL",
            |m: &ActivityInfo| { &m.FALGLCJDKCL },
            |m: &mut ActivityInfo| { &mut m.FALGLCJDKCL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "watcher_info_list",
            |m: &ActivityInfo| { &m.watcher_info_list },
            |m: &mut ActivityInfo| { &mut m.watcher_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "expire_cond_list",
            |m: &ActivityInfo| { &m.expire_cond_list },
            |m: &mut ActivityInfo| { &mut m.expire_cond_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schedule_id",
            |m: &ActivityInfo| { &m.schedule_id },
            |m: &mut ActivityInfo| { &mut m.schedule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ONCLIGBKLPF",
            |m: &ActivityInfo| { &m.ONCLIGBKLPF },
            |m: &mut ActivityInfo| { &mut m.ONCLIGBKLPF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "activity_type",
            |m: &ActivityInfo| { &m.activity_type },
            |m: &mut ActivityInfo| { &mut m.activity_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "activity_id",
            |m: &ActivityInfo| { &m.activity_id },
            |m: &mut ActivityInfo| { &mut m.activity_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_score",
            |m: &ActivityInfo| { &m.cur_score },
            |m: &mut ActivityInfo| { &mut m.cur_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FFGHMFNFPNL",
            |m: &ActivityInfo| { &m.FFGHMFNFPNL },
            |m: &mut ActivityInfo| { &mut m.FFGHMFNFPNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "first_day_start_time",
            |m: &ActivityInfo| { &m.first_day_start_time },
            |m: &mut ActivityInfo| { &mut m.first_day_start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LKODGHFICBH",
            |m: &ActivityInfo| { &m.LKODGHFICBH },
            |m: &mut ActivityInfo| { &mut m.LKODGHFICBH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CDBIIEIPBFF",
            |m: &ActivityInfo| { &m.CDBIIEIPBFF },
            |m: &mut ActivityInfo| { &mut m.CDBIIEIPBFF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LCHFFKHPJIO",
            |m: &ActivityInfo| { &m.LCHFFKHPJIO },
            |m: &mut ActivityInfo| { &mut m.LCHFFKHPJIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ILKPGDKEIEG",
            |m: &ActivityInfo| { &m.ILKPGDKEIEG },
            |m: &mut ActivityInfo| { &mut m.ILKPGDKEIEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "taken_reward_list",
            |m: &ActivityInfo| { &m.taken_reward_list },
            |m: &mut ActivityInfo| { &mut m.taken_reward_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CIDDJFNIMPJ",
            |m: &ActivityInfo| { &m.CIDDJFNIMPJ },
            |m: &mut ActivityInfo| { &mut m.CIDDJFNIMPJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "activity_push_tips_data_list",
            |m: &ActivityInfo| { &m.activity_push_tips_data_list },
            |m: &mut ActivityInfo| { &mut m.activity_push_tips_data_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPPFCLCENAP",
            |m: &ActivityInfo| { &m.MPPFCLCENAP },
            |m: &mut ActivityInfo| { &mut m.MPPFCLCENAP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GONEPFEDMEL",
            |m: &ActivityInfo| { &m.GONEPFEDMEL },
            |m: &mut ActivityInfo| { &mut m.GONEPFEDMEL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NJCGNGLKPBJ",
            |m: &ActivityInfo| { &m.NJCGNGLKPBJ },
            |m: &mut ActivityInfo| { &mut m.NJCGNGLKPBJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ODMJHPBFIKO",
            |m: &ActivityInfo| { &m.ODMJHPBFIKO },
            |m: &mut ActivityInfo| { &mut m.ODMJHPBFIKO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "activity_coin_map",
            |m: &ActivityInfo| { &m.activity_coin_map },
            |m: &mut ActivityInfo| { &mut m.activity_coin_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "wish_gift_num_map",
            |m: &ActivityInfo| { &m.wish_gift_num_map },
            |m: &mut ActivityInfo| { &mut m.wish_gift_num_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo>(
            "music_game_info",
            ActivityInfo::has_music_game_info,
            ActivityInfo::music_game_info,
            ActivityInfo::mut_music_game_info,
            ActivityInfo::set_music_game_info,
        ));
        oneofs.push(activity_info::Detail::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ActivityInfo>(
            "ActivityInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ActivityInfo {
    const NAME: &'static str = "ActivityInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.meet_cond_list)?;
                },
                8 => {
                    self.meet_cond_list.push(is.read_uint32()?);
                },
                32 => {
                    self.end_time = is.read_uint32()?;
                },
                48 => {
                    self.begin_time = is.read_uint32()?;
                },
                56 => {
                    self.is_finished = is.read_bool()?;
                },
                64 => {
                    self.FALGLCJDKCL = is.read_bool()?;
                },
                82 => {
                    self.watcher_info_list.push(is.read_message()?);
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.expire_cond_list)?;
                },
                88 => {
                    self.expire_cond_list.push(is.read_uint32()?);
                },
                96 => {
                    self.schedule_id = is.read_uint32()?;
                },
                104 => {
                    self.ONCLIGBKLPF = is.read_bool()?;
                },
                112 => {
                    self.activity_type = is.read_uint32()?;
                },
                120 => {
                    self.activity_id = is.read_uint32()?;
                },
                504 => {
                    self.cur_score = is.read_uint32()?;
                },
                2024 => {
                    self.FFGHMFNFPNL = is.read_uint32()?;
                },
                2984 => {
                    self.first_day_start_time = is.read_uint32()?;
                },
                3408 => {
                    self.LKODGHFICBH = is.read_uint32()?;
                },
                4072 => {
                    self.CDBIIEIPBFF = is.read_bool()?;
                },
                5424 => {
                    self.LCHFFKHPJIO = is.read_bool()?;
                },
                5912 => {
                    self.ILKPGDKEIEG = is.read_bool()?;
                },
                6546 => {
                    is.read_repeated_packed_uint32_into(&mut self.taken_reward_list)?;
                },
                6544 => {
                    self.taken_reward_list.push(is.read_uint32()?);
                },
                7136 => {
                    self.CIDDJFNIMPJ = is.read_uint64()?;
                },
                7866 => {
                    self.activity_push_tips_data_list.push(is.read_message()?);
                },
                8320 => {
                    self.MPPFCLCENAP = is.read_uint32()?;
                },
                9970 => {
                    is.read_repeated_packed_uint64_into(&mut self.GONEPFEDMEL)?;
                },
                9968 => {
                    self.GONEPFEDMEL.push(is.read_uint64()?);
                },
                10138 => {
                    is.read_repeated_packed_uint32_into(&mut self.NJCGNGLKPBJ)?;
                },
                10136 => {
                    self.NJCGNGLKPBJ.push(is.read_uint32()?);
                },
                11264 => {
                    self.ODMJHPBFIKO = is.read_bool()?;
                },
                14330 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.activity_coin_map.insert(key, value);
                },
                15634 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.wish_gift_num_map.insert(key, value);
                },
                8794 => {
                    self.detail = ::std::option::Option::Some(activity_info::Detail::MusicGameInfo(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(1, &self.meet_cond_list);
        if self.end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.end_time);
        }
        if self.begin_time != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.begin_time);
        }
        if self.is_finished != false {
            my_size += 1 + 1;
        }
        if self.FALGLCJDKCL != false {
            my_size += 1 + 1;
        }
        for value in &self.watcher_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.expire_cond_list);
        if self.schedule_id != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.schedule_id);
        }
        if self.ONCLIGBKLPF != false {
            my_size += 1 + 1;
        }
        if self.activity_type != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.activity_type);
        }
        if self.activity_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.activity_id);
        }
        if self.cur_score != 0 {
            my_size += ::protobuf::rt::uint32_size(63, self.cur_score);
        }
        if self.FFGHMFNFPNL != 0 {
            my_size += ::protobuf::rt::uint32_size(253, self.FFGHMFNFPNL);
        }
        if self.first_day_start_time != 0 {
            my_size += ::protobuf::rt::uint32_size(373, self.first_day_start_time);
        }
        if self.LKODGHFICBH != 0 {
            my_size += ::protobuf::rt::uint32_size(426, self.LKODGHFICBH);
        }
        if self.CDBIIEIPBFF != false {
            my_size += 2 + 1;
        }
        if self.LCHFFKHPJIO != false {
            my_size += 2 + 1;
        }
        if self.ILKPGDKEIEG != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(818, &self.taken_reward_list);
        if self.CIDDJFNIMPJ != 0 {
            my_size += ::protobuf::rt::uint64_size(892, self.CIDDJFNIMPJ);
        }
        for value in &self.activity_push_tips_data_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.MPPFCLCENAP != 0 {
            my_size += ::protobuf::rt::uint32_size(1040, self.MPPFCLCENAP);
        }
        my_size += ::protobuf::rt::vec_packed_uint64_size(1246, &self.GONEPFEDMEL);
        my_size += ::protobuf::rt::vec_packed_uint32_size(1267, &self.NJCGNGLKPBJ);
        if self.ODMJHPBFIKO != false {
            my_size += 2 + 1;
        }
        for (k, v) in &self.activity_coin_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.wish_gift_num_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &activity_info::Detail::MusicGameInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(1, &self.meet_cond_list)?;
        if self.end_time != 0 {
            os.write_uint32(4, self.end_time)?;
        }
        if self.begin_time != 0 {
            os.write_uint32(6, self.begin_time)?;
        }
        if self.is_finished != false {
            os.write_bool(7, self.is_finished)?;
        }
        if self.FALGLCJDKCL != false {
            os.write_bool(8, self.FALGLCJDKCL)?;
        }
        for v in &self.watcher_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        os.write_repeated_packed_uint32(11, &self.expire_cond_list)?;
        if self.schedule_id != 0 {
            os.write_uint32(12, self.schedule_id)?;
        }
        if self.ONCLIGBKLPF != false {
            os.write_bool(13, self.ONCLIGBKLPF)?;
        }
        if self.activity_type != 0 {
            os.write_uint32(14, self.activity_type)?;
        }
        if self.activity_id != 0 {
            os.write_uint32(15, self.activity_id)?;
        }
        if self.cur_score != 0 {
            os.write_uint32(63, self.cur_score)?;
        }
        if self.FFGHMFNFPNL != 0 {
            os.write_uint32(253, self.FFGHMFNFPNL)?;
        }
        if self.first_day_start_time != 0 {
            os.write_uint32(373, self.first_day_start_time)?;
        }
        if self.LKODGHFICBH != 0 {
            os.write_uint32(426, self.LKODGHFICBH)?;
        }
        if self.CDBIIEIPBFF != false {
            os.write_bool(509, self.CDBIIEIPBFF)?;
        }
        if self.LCHFFKHPJIO != false {
            os.write_bool(678, self.LCHFFKHPJIO)?;
        }
        if self.ILKPGDKEIEG != false {
            os.write_bool(739, self.ILKPGDKEIEG)?;
        }
        os.write_repeated_packed_uint32(818, &self.taken_reward_list)?;
        if self.CIDDJFNIMPJ != 0 {
            os.write_uint64(892, self.CIDDJFNIMPJ)?;
        }
        for v in &self.activity_push_tips_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(983, v, os)?;
        };
        if self.MPPFCLCENAP != 0 {
            os.write_uint32(1040, self.MPPFCLCENAP)?;
        }
        os.write_repeated_packed_uint64(1246, &self.GONEPFEDMEL)?;
        os.write_repeated_packed_uint32(1267, &self.NJCGNGLKPBJ)?;
        if self.ODMJHPBFIKO != false {
            os.write_bool(1408, self.ODMJHPBFIKO)?;
        }
        for (k, v) in &self.activity_coin_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(14330)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        for (k, v) in &self.wish_gift_num_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(15634)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            os.write_uint32(2, *v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &activity_info::Detail::MusicGameInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1099, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ActivityInfo {
        ActivityInfo::new()
    }

    fn clear(&mut self) {
        self.meet_cond_list.clear();
        self.end_time = 0;
        self.begin_time = 0;
        self.is_finished = false;
        self.FALGLCJDKCL = false;
        self.watcher_info_list.clear();
        self.expire_cond_list.clear();
        self.schedule_id = 0;
        self.ONCLIGBKLPF = false;
        self.activity_type = 0;
        self.activity_id = 0;
        self.cur_score = 0;
        self.FFGHMFNFPNL = 0;
        self.first_day_start_time = 0;
        self.LKODGHFICBH = 0;
        self.CDBIIEIPBFF = false;
        self.LCHFFKHPJIO = false;
        self.ILKPGDKEIEG = false;
        self.taken_reward_list.clear();
        self.CIDDJFNIMPJ = 0;
        self.activity_push_tips_data_list.clear();
        self.MPPFCLCENAP = 0;
        self.GONEPFEDMEL.clear();
        self.NJCGNGLKPBJ.clear();
        self.ODMJHPBFIKO = false;
        self.activity_coin_map.clear();
        self.wish_gift_num_map.clear();
        self.detail = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ActivityInfo {
        static instance: ::protobuf::rt::Lazy<ActivityInfo> = ::protobuf::rt::Lazy::new();
        instance.get(ActivityInfo::new)
    }
}

impl ::protobuf::MessageFull for ActivityInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ActivityInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ActivityInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivityInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ActivityInfo`
pub mod activity_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ActivityInfo.detail)
    pub enum Detail {
        // @@protoc_insertion_point(oneof_field:ActivityInfo.music_game_info)
        MusicGameInfo(super::super::MusicGameActivityDetailInfo::MusicGameActivityDetailInfo),
    }

    impl ::protobuf::Oneof for Detail {
    }

    impl ::protobuf::OneofFull for Detail {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ActivityInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("detail").unwrap()).clone()
        }
    }

    impl Detail {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Detail>("detail")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12ActivityInfo.proto\x1a\x19ActivityWatcherInfo.proto\x1a\x1aActivit\
    yPushTipsData.proto\x1a!MusicGameActivityDetailInfo.proto\"\xd2\n\n\x0cA\
    ctivityInfo\x12$\n\x0emeet_cond_list\x18\x01\x20\x03(\rR\x0cmeetCondList\
    \x12\x19\n\x08end_time\x18\x04\x20\x01(\rR\x07endTime\x12\x1d\n\nbegin_t\
    ime\x18\x06\x20\x01(\rR\tbeginTime\x12\x1f\n\x0bis_finished\x18\x07\x20\
    \x01(\x08R\nisFinished\x12\x20\n\x0bFALGLCJDKCL\x18\x08\x20\x01(\x08R\
    \x0bFALGLCJDKCL\x12@\n\x11watcher_info_list\x18\n\x20\x03(\x0b2\x14.Acti\
    vityWatcherInfoR\x0fwatcherInfoList\x12(\n\x10expire_cond_list\x18\x0b\
    \x20\x03(\rR\x0eexpireCondList\x12\x1f\n\x0bschedule_id\x18\x0c\x20\x01(\
    \rR\nscheduleId\x12\x20\n\x0bONCLIGBKLPF\x18\r\x20\x01(\x08R\x0bONCLIGBK\
    LPF\x12#\n\ractivity_type\x18\x0e\x20\x01(\rR\x0cactivityType\x12\x1f\n\
    \x0bactivity_id\x18\x0f\x20\x01(\rR\nactivityId\x12\x1b\n\tcur_score\x18\
    ?\x20\x01(\rR\x08curScore\x12!\n\x0bFFGHMFNFPNL\x18\xfd\x01\x20\x01(\rR\
    \x0bFFGHMFNFPNL\x120\n\x14first_day_start_time\x18\xf5\x02\x20\x01(\rR\
    \x11firstDayStartTime\x12!\n\x0bLKODGHFICBH\x18\xaa\x03\x20\x01(\rR\x0bL\
    KODGHFICBH\x12!\n\x0bCDBIIEIPBFF\x18\xfd\x03\x20\x01(\x08R\x0bCDBIIEIPBF\
    F\x12!\n\x0bLCHFFKHPJIO\x18\xa6\x05\x20\x01(\x08R\x0bLCHFFKHPJIO\x12!\n\
    \x0bILKPGDKEIEG\x18\xe3\x05\x20\x01(\x08R\x0bILKPGDKEIEG\x12+\n\x11taken\
    _reward_list\x18\xb2\x06\x20\x03(\rR\x0ftakenRewardList\x12!\n\x0bCIDDJF\
    NIMPJ\x18\xfc\x06\x20\x01(\x04R\x0bCIDDJFNIMPJ\x12V\n\x1cactivity_push_t\
    ips_data_list\x18\xd7\x07\x20\x03(\x0b2\x15.ActivityPushTipsDataR\x18act\
    ivityPushTipsDataList\x12!\n\x0bMPPFCLCENAP\x18\x90\x08\x20\x01(\rR\x0bM\
    PPFCLCENAP\x12!\n\x0bGONEPFEDMEL\x18\xde\t\x20\x03(\x04R\x0bGONEPFEDMEL\
    \x12!\n\x0bNJCGNGLKPBJ\x18\xf3\t\x20\x03(\rR\x0bNJCGNGLKPBJ\x12!\n\x0bOD\
    MJHPBFIKO\x18\x80\x0b\x20\x01(\x08R\x0bODMJHPBFIKO\x12O\n\x11activity_co\
    in_map\x18\xff\r\x20\x03(\x0b2\".ActivityInfo.ActivityCoinMapEntryR\x0fa\
    ctivityCoinMap\x12M\n\x11wish_gift_num_map\x18\xa2\x0f\x20\x03(\x0b2!.Ac\
    tivityInfo.WishGiftNumMapEntryR\x0ewishGiftNumMap\x12G\n\x0fmusic_game_i\
    nfo\x18\xcb\x08\x20\x01(\x0b2\x1c.MusicGameActivityDetailInfoH\0R\rmusic\
    GameInfo\x1aB\n\x14ActivityCoinMapEntry\x12\x10\n\x03key\x18\x01\x20\x01\
    (\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01\
    \x1aA\n\x13WishGiftNumMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03k\
    ey\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01B\x08\n\x06d\
    etailB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::ActivityWatcherInfo::file_descriptor().clone());
            deps.push(super::ActivityPushTipsData::file_descriptor().clone());
            deps.push(super::MusicGameActivityDetailInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ActivityInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
