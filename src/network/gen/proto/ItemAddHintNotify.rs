// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ItemAddHintNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:ItemAddHintNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ItemAddHintNotify {
    // message fields
    // @@protoc_insertion_point(field:ItemAddHintNotify.item_list)
    pub item_list: ::std::vec::Vec<super::ItemHint::ItemHint>,
    // @@protoc_insertion_point(field:ItemAddHintNotify.overflow_transformed_item_list)
    pub overflow_transformed_item_list: ::std::vec::Vec<super::ItemHint::ItemHint>,
    // @@protoc_insertion_point(field:ItemAddHintNotify.is_transfered_from_avatar_card)
    pub is_transfered_from_avatar_card: bool,
    // @@protoc_insertion_point(field:ItemAddHintNotify.position)
    pub position: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:ItemAddHintNotify.reason)
    pub reason: u32,
    // @@protoc_insertion_point(field:ItemAddHintNotify.is_position_valid)
    pub is_position_valid: bool,
    // @@protoc_insertion_point(field:ItemAddHintNotify.is_general_reward_hiden)
    pub is_general_reward_hiden: bool,
    // @@protoc_insertion_point(field:ItemAddHintNotify.quest_id)
    pub quest_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ItemAddHintNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ItemAddHintNotify {
    fn default() -> &'a ItemAddHintNotify {
        <ItemAddHintNotify as ::protobuf::Message>::default_instance()
    }
}

impl ItemAddHintNotify {
    pub fn new() -> ItemAddHintNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "item_list",
            |m: &ItemAddHintNotify| { &m.item_list },
            |m: &mut ItemAddHintNotify| { &mut m.item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "overflow_transformed_item_list",
            |m: &ItemAddHintNotify| { &m.overflow_transformed_item_list },
            |m: &mut ItemAddHintNotify| { &mut m.overflow_transformed_item_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_transfered_from_avatar_card",
            |m: &ItemAddHintNotify| { &m.is_transfered_from_avatar_card },
            |m: &mut ItemAddHintNotify| { &mut m.is_transfered_from_avatar_card },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "position",
            |m: &ItemAddHintNotify| { &m.position },
            |m: &mut ItemAddHintNotify| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reason",
            |m: &ItemAddHintNotify| { &m.reason },
            |m: &mut ItemAddHintNotify| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_position_valid",
            |m: &ItemAddHintNotify| { &m.is_position_valid },
            |m: &mut ItemAddHintNotify| { &mut m.is_position_valid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_general_reward_hiden",
            |m: &ItemAddHintNotify| { &m.is_general_reward_hiden },
            |m: &mut ItemAddHintNotify| { &mut m.is_general_reward_hiden },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quest_id",
            |m: &ItemAddHintNotify| { &m.quest_id },
            |m: &mut ItemAddHintNotify| { &mut m.quest_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ItemAddHintNotify>(
            "ItemAddHintNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ItemAddHintNotify {
    const NAME: &'static str = "ItemAddHintNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.item_list.push(is.read_message()?);
                },
                26 => {
                    self.overflow_transformed_item_list.push(is.read_message()?);
                },
                40 => {
                    self.is_transfered_from_avatar_card = is.read_bool()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                72 => {
                    self.reason = is.read_uint32()?;
                },
                88 => {
                    self.is_position_valid = is.read_bool()?;
                },
                96 => {
                    self.is_general_reward_hiden = is.read_bool()?;
                },
                104 => {
                    self.quest_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.overflow_transformed_item_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.is_transfered_from_avatar_card != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.reason != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.reason);
        }
        if self.is_position_valid != false {
            my_size += 1 + 1;
        }
        if self.is_general_reward_hiden != false {
            my_size += 1 + 1;
        }
        if self.quest_id != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.quest_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.item_list {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.overflow_transformed_item_list {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.is_transfered_from_avatar_card != false {
            os.write_bool(5, self.is_transfered_from_avatar_card)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.reason != 0 {
            os.write_uint32(9, self.reason)?;
        }
        if self.is_position_valid != false {
            os.write_bool(11, self.is_position_valid)?;
        }
        if self.is_general_reward_hiden != false {
            os.write_bool(12, self.is_general_reward_hiden)?;
        }
        if self.quest_id != 0 {
            os.write_uint32(13, self.quest_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ItemAddHintNotify {
        ItemAddHintNotify::new()
    }

    fn clear(&mut self) {
        self.item_list.clear();
        self.overflow_transformed_item_list.clear();
        self.is_transfered_from_avatar_card = false;
        self.position.clear();
        self.reason = 0;
        self.is_position_valid = false;
        self.is_general_reward_hiden = false;
        self.quest_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ItemAddHintNotify {
        static instance: ItemAddHintNotify = ItemAddHintNotify {
            item_list: ::std::vec::Vec::new(),
            overflow_transformed_item_list: ::std::vec::Vec::new(),
            is_transfered_from_avatar_card: false,
            position: ::protobuf::MessageField::none(),
            reason: 0,
            is_position_valid: false,
            is_general_reward_hiden: false,
            quest_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ItemAddHintNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ItemAddHintNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ItemAddHintNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ItemAddHintNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17ItemAddHintNotify.proto\x1a\x0eItemHint.proto\x1a\x0cVector.proto\
    \"\x8a\x03\n\x11ItemAddHintNotify\x12&\n\titem_list\x18\x02\x20\x03(\x0b\
    2\t.ItemHintR\x08itemList\x12N\n\x1eoverflow_transformed_item_list\x18\
    \x03\x20\x03(\x0b2\t.ItemHintR\x1boverflowTransformedItemList\x12B\n\x1e\
    is_transfered_from_avatar_card\x18\x05\x20\x01(\x08R\x1aisTransferedFrom\
    AvatarCard\x12#\n\x08position\x18\x06\x20\x01(\x0b2\x07.VectorR\x08posit\
    ion\x12\x16\n\x06reason\x18\t\x20\x01(\rR\x06reason\x12*\n\x11is_positio\
    n_valid\x18\x0b\x20\x01(\x08R\x0fisPositionValid\x125\n\x17is_general_re\
    ward_hiden\x18\x0c\x20\x01(\x08R\x14isGeneralRewardHiden\x12\x19\n\x08qu\
    est_id\x18\r\x20\x01(\rR\x07questIdB\x1b\n\x19emu.grasscutter.net.protob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ItemHint::file_descriptor().clone());
            deps.push(super::Vector::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ItemAddHintNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
