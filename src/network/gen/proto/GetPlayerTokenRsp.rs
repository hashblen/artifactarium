// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GetPlayerTokenRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:GetPlayerTokenRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPlayerTokenRsp {
    // message fields
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.retcode)
    pub retcode: i32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.secret_key_seed)
    pub secret_key_seed: u64,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.is_guest)
    pub is_guest: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.security_cmd_buffer)
    pub security_cmd_buffer: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.is_proficient_player)
    pub is_proficient_player: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.account_uid)
    pub account_uid: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.black_uid_end_time)
    pub black_uid_end_time: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.extra_bin_data)
    pub extra_bin_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.gm_uid)
    pub gm_uid: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.secret_key)
    pub secret_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.account_type)
    pub account_type: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.platform_type)
    pub platform_type: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.msg)
    pub msg: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.server_rand_key)
    pub server_rand_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.AKODFAIGJCE)
    pub AKODFAIGJCE: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.MPGMOFLCEOF)
    pub MPGMOFLCEOF: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.channel_id)
    pub channel_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.key_id)
    pub key_id: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.GCDGEKAONGD)
    pub GCDGEKAONGD: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.KNCFLPGOMNI)
    pub KNCFLPGOMNI: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.OLODGDMMPNF)
    pub OLODGDMMPNF: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.stop_server)
    pub stop_server: ::protobuf::MessageField<super::StopServerInfo::StopServerInfo>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.HNBGEKMPFIB)
    pub HNBGEKMPFIB: bool,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.JDHCKKAGBNL)
    pub JDHCKKAGBNL: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.KEKHAKAPMIN)
    pub KEKHAKAPMIN: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.CIJPMGMCJBA)
    pub CIJPMGMCJBA: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.tag)
    pub tag: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.PLNNJPFPPAM)
    pub PLNNJPFPPAM: u32,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.country_code)
    pub country_code: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.game_biz)
    pub game_biz: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.finish_collection_id_list)
    pub finish_collection_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.birthday)
    pub birthday: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.CEMENPADOPP)
    pub CEMENPADOPP: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.sign)
    pub sign: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.psn_id)
    pub psn_id: ::std::string::String,
    // @@protoc_insertion_point(field:GetPlayerTokenRsp.JLCDDOJGKKG)
    pub JLCDDOJGKKG: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetPlayerTokenRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerTokenRsp {
    fn default() -> &'a GetPlayerTokenRsp {
        <GetPlayerTokenRsp as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerTokenRsp {
    pub fn new() -> GetPlayerTokenRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(38);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &GetPlayerTokenRsp| { &m.retcode },
            |m: &mut GetPlayerTokenRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret_key_seed",
            |m: &GetPlayerTokenRsp| { &m.secret_key_seed },
            |m: &mut GetPlayerTokenRsp| { &mut m.secret_key_seed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_guest",
            |m: &GetPlayerTokenRsp| { &m.is_guest },
            |m: &mut GetPlayerTokenRsp| { &mut m.is_guest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "security_cmd_buffer",
            |m: &GetPlayerTokenRsp| { &m.security_cmd_buffer },
            |m: &mut GetPlayerTokenRsp| { &mut m.security_cmd_buffer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_proficient_player",
            |m: &GetPlayerTokenRsp| { &m.is_proficient_player },
            |m: &mut GetPlayerTokenRsp| { &mut m.is_proficient_player },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_uid",
            |m: &GetPlayerTokenRsp| { &m.account_uid },
            |m: &mut GetPlayerTokenRsp| { &mut m.account_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "black_uid_end_time",
            |m: &GetPlayerTokenRsp| { &m.black_uid_end_time },
            |m: &mut GetPlayerTokenRsp| { &mut m.black_uid_end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &GetPlayerTokenRsp| { &m.uid },
            |m: &mut GetPlayerTokenRsp| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extra_bin_data",
            |m: &GetPlayerTokenRsp| { &m.extra_bin_data },
            |m: &mut GetPlayerTokenRsp| { &mut m.extra_bin_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gm_uid",
            |m: &GetPlayerTokenRsp| { &m.gm_uid },
            |m: &mut GetPlayerTokenRsp| { &mut m.gm_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret_key",
            |m: &GetPlayerTokenRsp| { &m.secret_key },
            |m: &mut GetPlayerTokenRsp| { &mut m.secret_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_type",
            |m: &GetPlayerTokenRsp| { &m.account_type },
            |m: &mut GetPlayerTokenRsp| { &mut m.account_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_type",
            |m: &GetPlayerTokenRsp| { &m.platform_type },
            |m: &mut GetPlayerTokenRsp| { &mut m.platform_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &GetPlayerTokenRsp| { &m.msg },
            |m: &mut GetPlayerTokenRsp| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &GetPlayerTokenRsp| { &m.token },
            |m: &mut GetPlayerTokenRsp| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_rand_key",
            |m: &GetPlayerTokenRsp| { &m.server_rand_key },
            |m: &mut GetPlayerTokenRsp| { &mut m.server_rand_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AKODFAIGJCE",
            |m: &GetPlayerTokenRsp| { &m.AKODFAIGJCE },
            |m: &mut GetPlayerTokenRsp| { &mut m.AKODFAIGJCE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPGMOFLCEOF",
            |m: &GetPlayerTokenRsp| { &m.MPGMOFLCEOF },
            |m: &mut GetPlayerTokenRsp| { &mut m.MPGMOFLCEOF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &GetPlayerTokenRsp| { &m.channel_id },
            |m: &mut GetPlayerTokenRsp| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key_id",
            |m: &GetPlayerTokenRsp| { &m.key_id },
            |m: &mut GetPlayerTokenRsp| { &mut m.key_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GCDGEKAONGD",
            |m: &GetPlayerTokenRsp| { &m.GCDGEKAONGD },
            |m: &mut GetPlayerTokenRsp| { &mut m.GCDGEKAONGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KNCFLPGOMNI",
            |m: &GetPlayerTokenRsp| { &m.KNCFLPGOMNI },
            |m: &mut GetPlayerTokenRsp| { &mut m.KNCFLPGOMNI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLODGDMMPNF",
            |m: &GetPlayerTokenRsp| { &m.OLODGDMMPNF },
            |m: &mut GetPlayerTokenRsp| { &mut m.OLODGDMMPNF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::StopServerInfo::StopServerInfo>(
            "stop_server",
            |m: &GetPlayerTokenRsp| { &m.stop_server },
            |m: &mut GetPlayerTokenRsp| { &mut m.stop_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HNBGEKMPFIB",
            |m: &GetPlayerTokenRsp| { &m.HNBGEKMPFIB },
            |m: &mut GetPlayerTokenRsp| { &mut m.HNBGEKMPFIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDHCKKAGBNL",
            |m: &GetPlayerTokenRsp| { &m.JDHCKKAGBNL },
            |m: &mut GetPlayerTokenRsp| { &mut m.JDHCKKAGBNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KEKHAKAPMIN",
            |m: &GetPlayerTokenRsp| { &m.KEKHAKAPMIN },
            |m: &mut GetPlayerTokenRsp| { &mut m.KEKHAKAPMIN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CIJPMGMCJBA",
            |m: &GetPlayerTokenRsp| { &m.CIJPMGMCJBA },
            |m: &mut GetPlayerTokenRsp| { &mut m.CIJPMGMCJBA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &GetPlayerTokenRsp| { &m.tag },
            |m: &mut GetPlayerTokenRsp| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PLNNJPFPPAM",
            |m: &GetPlayerTokenRsp| { &m.PLNNJPFPPAM },
            |m: &mut GetPlayerTokenRsp| { &mut m.PLNNJPFPPAM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "country_code",
            |m: &GetPlayerTokenRsp| { &m.country_code },
            |m: &mut GetPlayerTokenRsp| { &mut m.country_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_biz",
            |m: &GetPlayerTokenRsp| { &m.game_biz },
            |m: &mut GetPlayerTokenRsp| { &mut m.game_biz },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "finish_collection_id_list",
            |m: &GetPlayerTokenRsp| { &m.finish_collection_id_list },
            |m: &mut GetPlayerTokenRsp| { &mut m.finish_collection_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "birthday",
            |m: &GetPlayerTokenRsp| { &m.birthday },
            |m: &mut GetPlayerTokenRsp| { &mut m.birthday },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CEMENPADOPP",
            |m: &GetPlayerTokenRsp| { &m.CEMENPADOPP },
            |m: &mut GetPlayerTokenRsp| { &mut m.CEMENPADOPP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sign",
            |m: &GetPlayerTokenRsp| { &m.sign },
            |m: &mut GetPlayerTokenRsp| { &mut m.sign },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "psn_id",
            |m: &GetPlayerTokenRsp| { &m.psn_id },
            |m: &mut GetPlayerTokenRsp| { &mut m.psn_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JLCDDOJGKKG",
            |m: &GetPlayerTokenRsp| { &m.JLCDDOJGKKG },
            |m: &mut GetPlayerTokenRsp| { &mut m.JLCDDOJGKKG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPlayerTokenRsp>(
            "GetPlayerTokenRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPlayerTokenRsp {
    const NAME: &'static str = "GetPlayerTokenRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.retcode = is.read_int32()?;
                },
                16 => {
                    self.secret_key_seed = is.read_uint64()?;
                },
                24 => {
                    self.is_guest = is.read_bool()?;
                },
                34 => {
                    self.security_cmd_buffer = is.read_bytes()?;
                },
                40 => {
                    self.is_proficient_player = is.read_bool()?;
                },
                50 => {
                    self.account_uid = is.read_string()?;
                },
                56 => {
                    self.black_uid_end_time = is.read_uint32()?;
                },
                64 => {
                    self.uid = is.read_uint32()?;
                },
                74 => {
                    self.extra_bin_data = is.read_bytes()?;
                },
                80 => {
                    self.gm_uid = is.read_uint32()?;
                },
                90 => {
                    self.secret_key = is.read_string()?;
                },
                96 => {
                    self.account_type = is.read_uint32()?;
                },
                104 => {
                    self.platform_type = is.read_uint32()?;
                },
                114 => {
                    self.msg = is.read_string()?;
                },
                122 => {
                    self.token = is.read_string()?;
                },
                546 => {
                    self.server_rand_key = is.read_string()?;
                },
                1648 => {
                    self.AKODFAIGJCE = is.read_bool()?;
                },
                2136 => {
                    self.MPGMOFLCEOF = is.read_uint32()?;
                },
                2320 => {
                    self.channel_id = is.read_uint32()?;
                },
                3184 => {
                    self.key_id = is.read_uint32()?;
                },
                3520 => {
                    self.GCDGEKAONGD = is.read_bool()?;
                },
                3970 => {
                    self.KNCFLPGOMNI = is.read_string()?;
                },
                4226 => {
                    self.OLODGDMMPNF = is.read_string()?;
                },
                4506 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.stop_server)?;
                },
                4600 => {
                    self.HNBGEKMPFIB = is.read_bool()?;
                },
                4608 => {
                    self.JDHCKKAGBNL = is.read_uint32()?;
                },
                5040 => {
                    self.KEKHAKAPMIN = is.read_uint32()?;
                },
                6776 => {
                    self.CIJPMGMCJBA = is.read_uint32()?;
                },
                6824 => {
                    self.tag = is.read_uint32()?;
                },
                8944 => {
                    self.PLNNJPFPPAM = is.read_uint32()?;
                },
                10154 => {
                    self.country_code = is.read_string()?;
                },
                13362 => {
                    self.game_biz = is.read_string()?;
                },
                13474 => {
                    is.read_repeated_packed_uint32_into(&mut self.finish_collection_id_list)?;
                },
                13472 => {
                    self.finish_collection_id_list.push(is.read_uint32()?);
                },
                13882 => {
                    self.birthday = is.read_string()?;
                },
                14970 => {
                    self.CEMENPADOPP = is.read_string()?;
                },
                15082 => {
                    self.sign = is.read_string()?;
                },
                15634 => {
                    self.psn_id = is.read_string()?;
                },
                16338 => {
                    self.JLCDDOJGKKG = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.retcode);
        }
        if self.secret_key_seed != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.secret_key_seed);
        }
        if self.is_guest != false {
            my_size += 1 + 1;
        }
        if !self.security_cmd_buffer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.security_cmd_buffer);
        }
        if self.is_proficient_player != false {
            my_size += 1 + 1;
        }
        if !self.account_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.account_uid);
        }
        if self.black_uid_end_time != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.black_uid_end_time);
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.uid);
        }
        if !self.extra_bin_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.extra_bin_data);
        }
        if self.gm_uid != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.gm_uid);
        }
        if !self.secret_key.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.secret_key);
        }
        if self.account_type != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.account_type);
        }
        if self.platform_type != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.platform_type);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.msg);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.token);
        }
        if !self.server_rand_key.is_empty() {
            my_size += ::protobuf::rt::string_size(68, &self.server_rand_key);
        }
        if self.AKODFAIGJCE != false {
            my_size += 2 + 1;
        }
        if self.MPGMOFLCEOF != 0 {
            my_size += ::protobuf::rt::uint32_size(267, self.MPGMOFLCEOF);
        }
        if self.channel_id != 0 {
            my_size += ::protobuf::rt::uint32_size(290, self.channel_id);
        }
        if self.key_id != 0 {
            my_size += ::protobuf::rt::uint32_size(398, self.key_id);
        }
        if self.GCDGEKAONGD != false {
            my_size += 2 + 1;
        }
        if !self.KNCFLPGOMNI.is_empty() {
            my_size += ::protobuf::rt::string_size(496, &self.KNCFLPGOMNI);
        }
        if !self.OLODGDMMPNF.is_empty() {
            my_size += ::protobuf::rt::string_size(528, &self.OLODGDMMPNF);
        }
        if let Some(v) = self.stop_server.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.HNBGEKMPFIB != false {
            my_size += 2 + 1;
        }
        if self.JDHCKKAGBNL != 0 {
            my_size += ::protobuf::rt::uint32_size(576, self.JDHCKKAGBNL);
        }
        if self.KEKHAKAPMIN != 0 {
            my_size += ::protobuf::rt::uint32_size(630, self.KEKHAKAPMIN);
        }
        if self.CIJPMGMCJBA != 0 {
            my_size += ::protobuf::rt::uint32_size(847, self.CIJPMGMCJBA);
        }
        if self.tag != 0 {
            my_size += ::protobuf::rt::uint32_size(853, self.tag);
        }
        if self.PLNNJPFPPAM != 0 {
            my_size += ::protobuf::rt::uint32_size(1118, self.PLNNJPFPPAM);
        }
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1269, &self.country_code);
        }
        if !self.game_biz.is_empty() {
            my_size += ::protobuf::rt::string_size(1670, &self.game_biz);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(1684, &self.finish_collection_id_list);
        if !self.birthday.is_empty() {
            my_size += ::protobuf::rt::string_size(1735, &self.birthday);
        }
        if !self.CEMENPADOPP.is_empty() {
            my_size += ::protobuf::rt::string_size(1871, &self.CEMENPADOPP);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::string_size(1885, &self.sign);
        }
        if !self.psn_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1954, &self.psn_id);
        }
        if !self.JLCDDOJGKKG.is_empty() {
            my_size += ::protobuf::rt::string_size(2042, &self.JLCDDOJGKKG);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_int32(1, self.retcode)?;
        }
        if self.secret_key_seed != 0 {
            os.write_uint64(2, self.secret_key_seed)?;
        }
        if self.is_guest != false {
            os.write_bool(3, self.is_guest)?;
        }
        if !self.security_cmd_buffer.is_empty() {
            os.write_bytes(4, &self.security_cmd_buffer)?;
        }
        if self.is_proficient_player != false {
            os.write_bool(5, self.is_proficient_player)?;
        }
        if !self.account_uid.is_empty() {
            os.write_string(6, &self.account_uid)?;
        }
        if self.black_uid_end_time != 0 {
            os.write_uint32(7, self.black_uid_end_time)?;
        }
        if self.uid != 0 {
            os.write_uint32(8, self.uid)?;
        }
        if !self.extra_bin_data.is_empty() {
            os.write_bytes(9, &self.extra_bin_data)?;
        }
        if self.gm_uid != 0 {
            os.write_uint32(10, self.gm_uid)?;
        }
        if !self.secret_key.is_empty() {
            os.write_string(11, &self.secret_key)?;
        }
        if self.account_type != 0 {
            os.write_uint32(12, self.account_type)?;
        }
        if self.platform_type != 0 {
            os.write_uint32(13, self.platform_type)?;
        }
        if !self.msg.is_empty() {
            os.write_string(14, &self.msg)?;
        }
        if !self.token.is_empty() {
            os.write_string(15, &self.token)?;
        }
        if !self.server_rand_key.is_empty() {
            os.write_string(68, &self.server_rand_key)?;
        }
        if self.AKODFAIGJCE != false {
            os.write_bool(206, self.AKODFAIGJCE)?;
        }
        if self.MPGMOFLCEOF != 0 {
            os.write_uint32(267, self.MPGMOFLCEOF)?;
        }
        if self.channel_id != 0 {
            os.write_uint32(290, self.channel_id)?;
        }
        if self.key_id != 0 {
            os.write_uint32(398, self.key_id)?;
        }
        if self.GCDGEKAONGD != false {
            os.write_bool(440, self.GCDGEKAONGD)?;
        }
        if !self.KNCFLPGOMNI.is_empty() {
            os.write_string(496, &self.KNCFLPGOMNI)?;
        }
        if !self.OLODGDMMPNF.is_empty() {
            os.write_string(528, &self.OLODGDMMPNF)?;
        }
        if let Some(v) = self.stop_server.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(563, v, os)?;
        }
        if self.HNBGEKMPFIB != false {
            os.write_bool(575, self.HNBGEKMPFIB)?;
        }
        if self.JDHCKKAGBNL != 0 {
            os.write_uint32(576, self.JDHCKKAGBNL)?;
        }
        if self.KEKHAKAPMIN != 0 {
            os.write_uint32(630, self.KEKHAKAPMIN)?;
        }
        if self.CIJPMGMCJBA != 0 {
            os.write_uint32(847, self.CIJPMGMCJBA)?;
        }
        if self.tag != 0 {
            os.write_uint32(853, self.tag)?;
        }
        if self.PLNNJPFPPAM != 0 {
            os.write_uint32(1118, self.PLNNJPFPPAM)?;
        }
        if !self.country_code.is_empty() {
            os.write_string(1269, &self.country_code)?;
        }
        if !self.game_biz.is_empty() {
            os.write_string(1670, &self.game_biz)?;
        }
        os.write_repeated_packed_uint32(1684, &self.finish_collection_id_list)?;
        if !self.birthday.is_empty() {
            os.write_string(1735, &self.birthday)?;
        }
        if !self.CEMENPADOPP.is_empty() {
            os.write_string(1871, &self.CEMENPADOPP)?;
        }
        if !self.sign.is_empty() {
            os.write_string(1885, &self.sign)?;
        }
        if !self.psn_id.is_empty() {
            os.write_string(1954, &self.psn_id)?;
        }
        if !self.JLCDDOJGKKG.is_empty() {
            os.write_string(2042, &self.JLCDDOJGKKG)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerTokenRsp {
        GetPlayerTokenRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.secret_key_seed = 0;
        self.is_guest = false;
        self.security_cmd_buffer.clear();
        self.is_proficient_player = false;
        self.account_uid.clear();
        self.black_uid_end_time = 0;
        self.uid = 0;
        self.extra_bin_data.clear();
        self.gm_uid = 0;
        self.secret_key.clear();
        self.account_type = 0;
        self.platform_type = 0;
        self.msg.clear();
        self.token.clear();
        self.server_rand_key.clear();
        self.AKODFAIGJCE = false;
        self.MPGMOFLCEOF = 0;
        self.channel_id = 0;
        self.key_id = 0;
        self.GCDGEKAONGD = false;
        self.KNCFLPGOMNI.clear();
        self.OLODGDMMPNF.clear();
        self.stop_server.clear();
        self.HNBGEKMPFIB = false;
        self.JDHCKKAGBNL = 0;
        self.KEKHAKAPMIN = 0;
        self.CIJPMGMCJBA = 0;
        self.tag = 0;
        self.PLNNJPFPPAM = 0;
        self.country_code.clear();
        self.game_biz.clear();
        self.finish_collection_id_list.clear();
        self.birthday.clear();
        self.CEMENPADOPP.clear();
        self.sign.clear();
        self.psn_id.clear();
        self.JLCDDOJGKKG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerTokenRsp {
        static instance: GetPlayerTokenRsp = GetPlayerTokenRsp {
            retcode: 0,
            secret_key_seed: 0,
            is_guest: false,
            security_cmd_buffer: ::std::vec::Vec::new(),
            is_proficient_player: false,
            account_uid: ::std::string::String::new(),
            black_uid_end_time: 0,
            uid: 0,
            extra_bin_data: ::std::vec::Vec::new(),
            gm_uid: 0,
            secret_key: ::std::string::String::new(),
            account_type: 0,
            platform_type: 0,
            msg: ::std::string::String::new(),
            token: ::std::string::String::new(),
            server_rand_key: ::std::string::String::new(),
            AKODFAIGJCE: false,
            MPGMOFLCEOF: 0,
            channel_id: 0,
            key_id: 0,
            GCDGEKAONGD: false,
            KNCFLPGOMNI: ::std::string::String::new(),
            OLODGDMMPNF: ::std::string::String::new(),
            stop_server: ::protobuf::MessageField::none(),
            HNBGEKMPFIB: false,
            JDHCKKAGBNL: 0,
            KEKHAKAPMIN: 0,
            CIJPMGMCJBA: 0,
            tag: 0,
            PLNNJPFPPAM: 0,
            country_code: ::std::string::String::new(),
            game_biz: ::std::string::String::new(),
            finish_collection_id_list: ::std::vec::Vec::new(),
            birthday: ::std::string::String::new(),
            CEMENPADOPP: ::std::string::String::new(),
            sign: ::std::string::String::new(),
            psn_id: ::std::string::String::new(),
            JLCDDOJGKKG: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPlayerTokenRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPlayerTokenRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPlayerTokenRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPlayerTokenRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17GetPlayerTokenRsp.proto\x1a\x14StopServerInfo.proto\"\x8e\n\n\x11G\
    etPlayerTokenRsp\x12\x18\n\x07retcode\x18\x01\x20\x01(\x05R\x07retcode\
    \x12&\n\x0fsecret_key_seed\x18\x02\x20\x01(\x04R\rsecretKeySeed\x12\x19\
    \n\x08is_guest\x18\x03\x20\x01(\x08R\x07isGuest\x12.\n\x13security_cmd_b\
    uffer\x18\x04\x20\x01(\x0cR\x11securityCmdBuffer\x120\n\x14is_proficient\
    _player\x18\x05\x20\x01(\x08R\x12isProficientPlayer\x12\x1f\n\x0baccount\
    _uid\x18\x06\x20\x01(\tR\naccountUid\x12+\n\x12black_uid_end_time\x18\
    \x07\x20\x01(\rR\x0fblackUidEndTime\x12\x10\n\x03uid\x18\x08\x20\x01(\rR\
    \x03uid\x12$\n\x0eextra_bin_data\x18\t\x20\x01(\x0cR\x0cextraBinData\x12\
    \x15\n\x06gm_uid\x18\n\x20\x01(\rR\x05gmUid\x12\x1d\n\nsecret_key\x18\
    \x0b\x20\x01(\tR\tsecretKey\x12!\n\x0caccount_type\x18\x0c\x20\x01(\rR\
    \x0baccountType\x12#\n\rplatform_type\x18\r\x20\x01(\rR\x0cplatformType\
    \x12\x10\n\x03msg\x18\x0e\x20\x01(\tR\x03msg\x12\x14\n\x05token\x18\x0f\
    \x20\x01(\tR\x05token\x12&\n\x0fserver_rand_key\x18D\x20\x01(\tR\rserver\
    RandKey\x12!\n\x0bAKODFAIGJCE\x18\xce\x01\x20\x01(\x08R\x0bAKODFAIGJCE\
    \x12!\n\x0bMPGMOFLCEOF\x18\x8b\x02\x20\x01(\rR\x0bMPGMOFLCEOF\x12\x1e\n\
    \nchannel_id\x18\xa2\x02\x20\x01(\rR\tchannelId\x12\x16\n\x06key_id\x18\
    \x8e\x03\x20\x01(\rR\x05keyId\x12!\n\x0bGCDGEKAONGD\x18\xb8\x03\x20\x01(\
    \x08R\x0bGCDGEKAONGD\x12!\n\x0bKNCFLPGOMNI\x18\xf0\x03\x20\x01(\tR\x0bKN\
    CFLPGOMNI\x12!\n\x0bOLODGDMMPNF\x18\x90\x04\x20\x01(\tR\x0bOLODGDMMPNF\
    \x121\n\x0bstop_server\x18\xb3\x04\x20\x01(\x0b2\x0f.StopServerInfoR\nst\
    opServer\x12!\n\x0bHNBGEKMPFIB\x18\xbf\x04\x20\x01(\x08R\x0bHNBGEKMPFIB\
    \x12!\n\x0bJDHCKKAGBNL\x18\xc0\x04\x20\x01(\rR\x0bJDHCKKAGBNL\x12!\n\x0b\
    KEKHAKAPMIN\x18\xf6\x04\x20\x01(\rR\x0bKEKHAKAPMIN\x12!\n\x0bCIJPMGMCJBA\
    \x18\xcf\x06\x20\x01(\rR\x0bCIJPMGMCJBA\x12\x11\n\x03tag\x18\xd5\x06\x20\
    \x01(\rR\x03tag\x12!\n\x0bPLNNJPFPPAM\x18\xde\x08\x20\x01(\rR\x0bPLNNJPF\
    PPAM\x12\"\n\x0ccountry_code\x18\xf5\t\x20\x01(\tR\x0bcountryCode\x12\
    \x1a\n\x08game_biz\x18\x86\r\x20\x01(\tR\x07gameBiz\x12:\n\x19finish_col\
    lection_id_list\x18\x94\r\x20\x03(\rR\x16finishCollectionIdList\x12\x1b\
    \n\x08birthday\x18\xc7\r\x20\x01(\tR\x08birthday\x12!\n\x0bCEMENPADOPP\
    \x18\xcf\x0e\x20\x01(\tR\x0bCEMENPADOPP\x12\x13\n\x04sign\x18\xdd\x0e\
    \x20\x01(\tR\x04sign\x12\x16\n\x06psn_id\x18\xa2\x0f\x20\x01(\tR\x05psnI\
    d\x12!\n\x0bJLCDDOJGKKG\x18\xfa\x0f\x20\x01(\tR\x0bJLCDDOJGKKGB\x1b\n\
    \x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::StopServerInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetPlayerTokenRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
