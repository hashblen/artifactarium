// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AttackResult.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:AttackResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AttackResult {
    // message fields
    // @@protoc_insertion_point(field:AttackResult.attacker_id)
    pub attacker_id: u32,
    // @@protoc_insertion_point(field:AttackResult.damage)
    pub damage: f32,
    // @@protoc_insertion_point(field:AttackResult.hit_retreat_angle_compat)
    pub hit_retreat_angle_compat: i32,
    // @@protoc_insertion_point(field:AttackResult.defense_id)
    pub defense_id: u32,
    // @@protoc_insertion_point(field:AttackResult.ability_identifier)
    pub ability_identifier: ::protobuf::MessageField<super::AbilityIdentifier::AbilityIdentifier>,
    // @@protoc_insertion_point(field:AttackResult.IICFMJEJOBO)
    pub IICFMJEJOBO: u32,
    // @@protoc_insertion_point(field:AttackResult.is_crit)
    pub is_crit: bool,
    // @@protoc_insertion_point(field:AttackResult.resolved_dir)
    pub resolved_dir: ::protobuf::MessageField<super::Vector::Vector>,
    // @@protoc_insertion_point(field:AttackResult.BAABHEHFAPH)
    pub BAABHEHFAPH: u32,
    // @@protoc_insertion_point(field:AttackResult.element_type)
    pub element_type: u32,
    // @@protoc_insertion_point(field:AttackResult.hit_eff_result)
    pub hit_eff_result: ::protobuf::MessageField<super::AttackHitEffectResult::AttackHitEffectResult>,
    // @@protoc_insertion_point(field:AttackResult.anim_event_id)
    pub anim_event_id: ::std::string::String,
    // @@protoc_insertion_point(field:AttackResult.hit_collision)
    pub hit_collision: ::protobuf::MessageField<super::HitCollision::HitCollision>,
    // @@protoc_insertion_point(field:AttackResult.MPBEBAKODGF)
    pub MPBEBAKODGF: u32,
    // @@protoc_insertion_point(field:AttackResult.EBLEIGGLHLG)
    pub EBLEIGGLHLG: u32,
    // @@protoc_insertion_point(field:AttackResult.element_amplify_rate)
    pub element_amplify_rate: f32,
    // @@protoc_insertion_point(field:AttackResult.element_durability_attenuation)
    pub element_durability_attenuation: f32,
    // @@protoc_insertion_point(field:AttackResult.mute_element_hurt)
    pub mute_element_hurt: bool,
    // @@protoc_insertion_point(field:AttackResult.MFLNDGPEJOE)
    pub MFLNDGPEJOE: u32,
    // @@protoc_insertion_point(field:AttackResult.damage_shield)
    pub damage_shield: f32,
    // @@protoc_insertion_point(field:AttackResult.IFMINIBILFH)
    pub IFMINIBILFH: u32,
    // @@protoc_insertion_point(field:AttackResult.JKGEMBOBALF)
    pub JKGEMBOBALF: u32,
    // @@protoc_insertion_point(field:AttackResult.EKJHPCHCMLF)
    pub EKJHPCHCMLF: u32,
    // @@protoc_insertion_point(field:AttackResult.POAFAPLMPEB)
    pub POAFAPLMPEB: u32,
    // @@protoc_insertion_point(field:AttackResult.use_gadget_damage_action)
    pub use_gadget_damage_action: bool,
    // @@protoc_insertion_point(field:AttackResult.ELIFILCNKFD)
    pub ELIFILCNKFD: u32,
    // @@protoc_insertion_point(field:AttackResult.endure_delta)
    pub endure_delta: f32,
    // @@protoc_insertion_point(field:AttackResult.FLPFBAFHGNN)
    pub FLPFBAFHGNN: u32,
    // @@protoc_insertion_point(field:AttackResult.NMPEDJOPMMB)
    pub NMPEDJOPMMB: u32,
    // @@protoc_insertion_point(field:AttackResult.is_resist_text)
    pub is_resist_text: bool,
    // @@protoc_insertion_point(field:AttackResult.GMNJEDPKNDE)
    pub GMNJEDPKNDE: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AttackResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttackResult {
    fn default() -> &'a AttackResult {
        <AttackResult as ::protobuf::Message>::default_instance()
    }
}

impl AttackResult {
    pub fn new() -> AttackResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(31);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attacker_id",
            |m: &AttackResult| { &m.attacker_id },
            |m: &mut AttackResult| { &mut m.attacker_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "damage",
            |m: &AttackResult| { &m.damage },
            |m: &mut AttackResult| { &mut m.damage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hit_retreat_angle_compat",
            |m: &AttackResult| { &m.hit_retreat_angle_compat },
            |m: &mut AttackResult| { &mut m.hit_retreat_angle_compat },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "defense_id",
            |m: &AttackResult| { &m.defense_id },
            |m: &mut AttackResult| { &mut m.defense_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AbilityIdentifier::AbilityIdentifier>(
            "ability_identifier",
            |m: &AttackResult| { &m.ability_identifier },
            |m: &mut AttackResult| { &mut m.ability_identifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IICFMJEJOBO",
            |m: &AttackResult| { &m.IICFMJEJOBO },
            |m: &mut AttackResult| { &mut m.IICFMJEJOBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_crit",
            |m: &AttackResult| { &m.is_crit },
            |m: &mut AttackResult| { &mut m.is_crit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector::Vector>(
            "resolved_dir",
            |m: &AttackResult| { &m.resolved_dir },
            |m: &mut AttackResult| { &mut m.resolved_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BAABHEHFAPH",
            |m: &AttackResult| { &m.BAABHEHFAPH },
            |m: &mut AttackResult| { &mut m.BAABHEHFAPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "element_type",
            |m: &AttackResult| { &m.element_type },
            |m: &mut AttackResult| { &mut m.element_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AttackHitEffectResult::AttackHitEffectResult>(
            "hit_eff_result",
            |m: &AttackResult| { &m.hit_eff_result },
            |m: &mut AttackResult| { &mut m.hit_eff_result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "anim_event_id",
            |m: &AttackResult| { &m.anim_event_id },
            |m: &mut AttackResult| { &mut m.anim_event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::HitCollision::HitCollision>(
            "hit_collision",
            |m: &AttackResult| { &m.hit_collision },
            |m: &mut AttackResult| { &mut m.hit_collision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPBEBAKODGF",
            |m: &AttackResult| { &m.MPBEBAKODGF },
            |m: &mut AttackResult| { &mut m.MPBEBAKODGF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EBLEIGGLHLG",
            |m: &AttackResult| { &m.EBLEIGGLHLG },
            |m: &mut AttackResult| { &mut m.EBLEIGGLHLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "element_amplify_rate",
            |m: &AttackResult| { &m.element_amplify_rate },
            |m: &mut AttackResult| { &mut m.element_amplify_rate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "element_durability_attenuation",
            |m: &AttackResult| { &m.element_durability_attenuation },
            |m: &mut AttackResult| { &mut m.element_durability_attenuation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mute_element_hurt",
            |m: &AttackResult| { &m.mute_element_hurt },
            |m: &mut AttackResult| { &mut m.mute_element_hurt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MFLNDGPEJOE",
            |m: &AttackResult| { &m.MFLNDGPEJOE },
            |m: &mut AttackResult| { &mut m.MFLNDGPEJOE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "damage_shield",
            |m: &AttackResult| { &m.damage_shield },
            |m: &mut AttackResult| { &mut m.damage_shield },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFMINIBILFH",
            |m: &AttackResult| { &m.IFMINIBILFH },
            |m: &mut AttackResult| { &mut m.IFMINIBILFH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JKGEMBOBALF",
            |m: &AttackResult| { &m.JKGEMBOBALF },
            |m: &mut AttackResult| { &mut m.JKGEMBOBALF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKJHPCHCMLF",
            |m: &AttackResult| { &m.EKJHPCHCMLF },
            |m: &mut AttackResult| { &mut m.EKJHPCHCMLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "POAFAPLMPEB",
            |m: &AttackResult| { &m.POAFAPLMPEB },
            |m: &mut AttackResult| { &mut m.POAFAPLMPEB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "use_gadget_damage_action",
            |m: &AttackResult| { &m.use_gadget_damage_action },
            |m: &mut AttackResult| { &mut m.use_gadget_damage_action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ELIFILCNKFD",
            |m: &AttackResult| { &m.ELIFILCNKFD },
            |m: &mut AttackResult| { &mut m.ELIFILCNKFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "endure_delta",
            |m: &AttackResult| { &m.endure_delta },
            |m: &mut AttackResult| { &mut m.endure_delta },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FLPFBAFHGNN",
            |m: &AttackResult| { &m.FLPFBAFHGNN },
            |m: &mut AttackResult| { &mut m.FLPFBAFHGNN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NMPEDJOPMMB",
            |m: &AttackResult| { &m.NMPEDJOPMMB },
            |m: &mut AttackResult| { &mut m.NMPEDJOPMMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_resist_text",
            |m: &AttackResult| { &m.is_resist_text },
            |m: &mut AttackResult| { &mut m.is_resist_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GMNJEDPKNDE",
            |m: &AttackResult| { &m.GMNJEDPKNDE },
            |m: &mut AttackResult| { &mut m.GMNJEDPKNDE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttackResult>(
            "AttackResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttackResult {
    const NAME: &'static str = "AttackResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.attacker_id = is.read_uint32()?;
                },
                21 => {
                    self.damage = is.read_float()?;
                },
                24 => {
                    self.hit_retreat_angle_compat = is.read_int32()?;
                },
                40 => {
                    self.defense_id = is.read_uint32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ability_identifier)?;
                },
                56 => {
                    self.IICFMJEJOBO = is.read_uint32()?;
                },
                64 => {
                    self.is_crit = is.read_bool()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resolved_dir)?;
                },
                80 => {
                    self.BAABHEHFAPH = is.read_uint32()?;
                },
                88 => {
                    self.element_type = is.read_uint32()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.hit_eff_result)?;
                },
                114 => {
                    self.anim_event_id = is.read_string()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.hit_collision)?;
                },
                1776 => {
                    self.MPBEBAKODGF = is.read_uint32()?;
                },
                2472 => {
                    self.EBLEIGGLHLG = is.read_uint32()?;
                },
                3117 => {
                    self.element_amplify_rate = is.read_float()?;
                },
                4269 => {
                    self.element_durability_attenuation = is.read_float()?;
                },
                4720 => {
                    self.mute_element_hurt = is.read_bool()?;
                },
                4848 => {
                    self.MFLNDGPEJOE = is.read_uint32()?;
                },
                6237 => {
                    self.damage_shield = is.read_float()?;
                },
                6584 => {
                    self.IFMINIBILFH = is.read_uint32()?;
                },
                10792 => {
                    self.JKGEMBOBALF = is.read_uint32()?;
                },
                12200 => {
                    self.EKJHPCHCMLF = is.read_uint32()?;
                },
                13120 => {
                    self.POAFAPLMPEB = is.read_uint32()?;
                },
                13864 => {
                    self.use_gadget_damage_action = is.read_bool()?;
                },
                14048 => {
                    self.ELIFILCNKFD = is.read_uint32()?;
                },
                14621 => {
                    self.endure_delta = is.read_float()?;
                },
                14736 => {
                    self.FLPFBAFHGNN = is.read_uint32()?;
                },
                14872 => {
                    self.NMPEDJOPMMB = is.read_uint32()?;
                },
                15824 => {
                    self.is_resist_text = is.read_bool()?;
                },
                16184 => {
                    self.GMNJEDPKNDE = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.attacker_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.attacker_id);
        }
        if self.damage != 0. {
            my_size += 1 + 4;
        }
        if self.hit_retreat_angle_compat != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.hit_retreat_angle_compat);
        }
        if self.defense_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.defense_id);
        }
        if let Some(v) = self.ability_identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.IICFMJEJOBO != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.IICFMJEJOBO);
        }
        if self.is_crit != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.resolved_dir.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.BAABHEHFAPH != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.BAABHEHFAPH);
        }
        if self.element_type != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.element_type);
        }
        if let Some(v) = self.hit_eff_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.anim_event_id.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.anim_event_id);
        }
        if let Some(v) = self.hit_collision.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.MPBEBAKODGF != 0 {
            my_size += ::protobuf::rt::uint32_size(222, self.MPBEBAKODGF);
        }
        if self.EBLEIGGLHLG != 0 {
            my_size += ::protobuf::rt::uint32_size(309, self.EBLEIGGLHLG);
        }
        if self.element_amplify_rate != 0. {
            my_size += 2 + 4;
        }
        if self.element_durability_attenuation != 0. {
            my_size += 2 + 4;
        }
        if self.mute_element_hurt != false {
            my_size += 2 + 1;
        }
        if self.MFLNDGPEJOE != 0 {
            my_size += ::protobuf::rt::uint32_size(606, self.MFLNDGPEJOE);
        }
        if self.damage_shield != 0. {
            my_size += 2 + 4;
        }
        if self.IFMINIBILFH != 0 {
            my_size += ::protobuf::rt::uint32_size(823, self.IFMINIBILFH);
        }
        if self.JKGEMBOBALF != 0 {
            my_size += ::protobuf::rt::uint32_size(1349, self.JKGEMBOBALF);
        }
        if self.EKJHPCHCMLF != 0 {
            my_size += ::protobuf::rt::uint32_size(1525, self.EKJHPCHCMLF);
        }
        if self.POAFAPLMPEB != 0 {
            my_size += ::protobuf::rt::uint32_size(1640, self.POAFAPLMPEB);
        }
        if self.use_gadget_damage_action != false {
            my_size += 2 + 1;
        }
        if self.ELIFILCNKFD != 0 {
            my_size += ::protobuf::rt::uint32_size(1756, self.ELIFILCNKFD);
        }
        if self.endure_delta != 0. {
            my_size += 2 + 4;
        }
        if self.FLPFBAFHGNN != 0 {
            my_size += ::protobuf::rt::uint32_size(1842, self.FLPFBAFHGNN);
        }
        if self.NMPEDJOPMMB != 0 {
            my_size += ::protobuf::rt::uint32_size(1859, self.NMPEDJOPMMB);
        }
        if self.is_resist_text != false {
            my_size += 2 + 1;
        }
        if self.GMNJEDPKNDE != 0 {
            my_size += ::protobuf::rt::uint32_size(2023, self.GMNJEDPKNDE);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.attacker_id != 0 {
            os.write_uint32(1, self.attacker_id)?;
        }
        if self.damage != 0. {
            os.write_float(2, self.damage)?;
        }
        if self.hit_retreat_angle_compat != 0 {
            os.write_int32(3, self.hit_retreat_angle_compat)?;
        }
        if self.defense_id != 0 {
            os.write_uint32(5, self.defense_id)?;
        }
        if let Some(v) = self.ability_identifier.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.IICFMJEJOBO != 0 {
            os.write_uint32(7, self.IICFMJEJOBO)?;
        }
        if self.is_crit != false {
            os.write_bool(8, self.is_crit)?;
        }
        if let Some(v) = self.resolved_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.BAABHEHFAPH != 0 {
            os.write_uint32(10, self.BAABHEHFAPH)?;
        }
        if self.element_type != 0 {
            os.write_uint32(11, self.element_type)?;
        }
        if let Some(v) = self.hit_eff_result.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if !self.anim_event_id.is_empty() {
            os.write_string(14, &self.anim_event_id)?;
        }
        if let Some(v) = self.hit_collision.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if self.MPBEBAKODGF != 0 {
            os.write_uint32(222, self.MPBEBAKODGF)?;
        }
        if self.EBLEIGGLHLG != 0 {
            os.write_uint32(309, self.EBLEIGGLHLG)?;
        }
        if self.element_amplify_rate != 0. {
            os.write_float(389, self.element_amplify_rate)?;
        }
        if self.element_durability_attenuation != 0. {
            os.write_float(533, self.element_durability_attenuation)?;
        }
        if self.mute_element_hurt != false {
            os.write_bool(590, self.mute_element_hurt)?;
        }
        if self.MFLNDGPEJOE != 0 {
            os.write_uint32(606, self.MFLNDGPEJOE)?;
        }
        if self.damage_shield != 0. {
            os.write_float(779, self.damage_shield)?;
        }
        if self.IFMINIBILFH != 0 {
            os.write_uint32(823, self.IFMINIBILFH)?;
        }
        if self.JKGEMBOBALF != 0 {
            os.write_uint32(1349, self.JKGEMBOBALF)?;
        }
        if self.EKJHPCHCMLF != 0 {
            os.write_uint32(1525, self.EKJHPCHCMLF)?;
        }
        if self.POAFAPLMPEB != 0 {
            os.write_uint32(1640, self.POAFAPLMPEB)?;
        }
        if self.use_gadget_damage_action != false {
            os.write_bool(1733, self.use_gadget_damage_action)?;
        }
        if self.ELIFILCNKFD != 0 {
            os.write_uint32(1756, self.ELIFILCNKFD)?;
        }
        if self.endure_delta != 0. {
            os.write_float(1827, self.endure_delta)?;
        }
        if self.FLPFBAFHGNN != 0 {
            os.write_uint32(1842, self.FLPFBAFHGNN)?;
        }
        if self.NMPEDJOPMMB != 0 {
            os.write_uint32(1859, self.NMPEDJOPMMB)?;
        }
        if self.is_resist_text != false {
            os.write_bool(1978, self.is_resist_text)?;
        }
        if self.GMNJEDPKNDE != 0 {
            os.write_uint32(2023, self.GMNJEDPKNDE)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttackResult {
        AttackResult::new()
    }

    fn clear(&mut self) {
        self.attacker_id = 0;
        self.damage = 0.;
        self.hit_retreat_angle_compat = 0;
        self.defense_id = 0;
        self.ability_identifier.clear();
        self.IICFMJEJOBO = 0;
        self.is_crit = false;
        self.resolved_dir.clear();
        self.BAABHEHFAPH = 0;
        self.element_type = 0;
        self.hit_eff_result.clear();
        self.anim_event_id.clear();
        self.hit_collision.clear();
        self.MPBEBAKODGF = 0;
        self.EBLEIGGLHLG = 0;
        self.element_amplify_rate = 0.;
        self.element_durability_attenuation = 0.;
        self.mute_element_hurt = false;
        self.MFLNDGPEJOE = 0;
        self.damage_shield = 0.;
        self.IFMINIBILFH = 0;
        self.JKGEMBOBALF = 0;
        self.EKJHPCHCMLF = 0;
        self.POAFAPLMPEB = 0;
        self.use_gadget_damage_action = false;
        self.ELIFILCNKFD = 0;
        self.endure_delta = 0.;
        self.FLPFBAFHGNN = 0;
        self.NMPEDJOPMMB = 0;
        self.is_resist_text = false;
        self.GMNJEDPKNDE = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttackResult {
        static instance: AttackResult = AttackResult {
            attacker_id: 0,
            damage: 0.,
            hit_retreat_angle_compat: 0,
            defense_id: 0,
            ability_identifier: ::protobuf::MessageField::none(),
            IICFMJEJOBO: 0,
            is_crit: false,
            resolved_dir: ::protobuf::MessageField::none(),
            BAABHEHFAPH: 0,
            element_type: 0,
            hit_eff_result: ::protobuf::MessageField::none(),
            anim_event_id: ::std::string::String::new(),
            hit_collision: ::protobuf::MessageField::none(),
            MPBEBAKODGF: 0,
            EBLEIGGLHLG: 0,
            element_amplify_rate: 0.,
            element_durability_attenuation: 0.,
            mute_element_hurt: false,
            MFLNDGPEJOE: 0,
            damage_shield: 0.,
            IFMINIBILFH: 0,
            JKGEMBOBALF: 0,
            EKJHPCHCMLF: 0,
            POAFAPLMPEB: 0,
            use_gadget_damage_action: false,
            ELIFILCNKFD: 0,
            endure_delta: 0.,
            FLPFBAFHGNN: 0,
            NMPEDJOPMMB: 0,
            is_resist_text: false,
            GMNJEDPKNDE: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttackResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttackResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttackResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttackResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12AttackResult.proto\x1a\x17AbilityIdentifier.proto\x1a\x0cVector.pr\
    oto\x1a\x1bAttackHitEffectResult.proto\x1a\x12HitCollision.proto\"\xf7\t\
    \n\x0cAttackResult\x12\x1f\n\x0battacker_id\x18\x01\x20\x01(\rR\nattacke\
    rId\x12\x16\n\x06damage\x18\x02\x20\x01(\x02R\x06damage\x127\n\x18hit_re\
    treat_angle_compat\x18\x03\x20\x01(\x05R\x15hitRetreatAngleCompat\x12\
    \x1d\n\ndefense_id\x18\x05\x20\x01(\rR\tdefenseId\x12A\n\x12ability_iden\
    tifier\x18\x06\x20\x01(\x0b2\x12.AbilityIdentifierR\x11abilityIdentifier\
    \x12\x20\n\x0bIICFMJEJOBO\x18\x07\x20\x01(\rR\x0bIICFMJEJOBO\x12\x17\n\
    \x07is_crit\x18\x08\x20\x01(\x08R\x06isCrit\x12*\n\x0cresolved_dir\x18\t\
    \x20\x01(\x0b2\x07.VectorR\x0bresolvedDir\x12\x20\n\x0bBAABHEHFAPH\x18\n\
    \x20\x01(\rR\x0bBAABHEHFAPH\x12!\n\x0celement_type\x18\x0b\x20\x01(\rR\
    \x0belementType\x12<\n\x0ehit_eff_result\x18\r\x20\x01(\x0b2\x16.AttackH\
    itEffectResultR\x0chitEffResult\x12\"\n\ranim_event_id\x18\x0e\x20\x01(\
    \tR\x0banimEventId\x122\n\rhit_collision\x18\x0f\x20\x01(\x0b2\r.HitColl\
    isionR\x0chitCollision\x12!\n\x0bMPBEBAKODGF\x18\xde\x01\x20\x01(\rR\x0b\
    MPBEBAKODGF\x12!\n\x0bEBLEIGGLHLG\x18\xb5\x02\x20\x01(\rR\x0bEBLEIGGLHLG\
    \x121\n\x14element_amplify_rate\x18\x85\x03\x20\x01(\x02R\x12elementAmpl\
    ifyRate\x12E\n\x1eelement_durability_attenuation\x18\x95\x04\x20\x01(\
    \x02R\x1celementDurabilityAttenuation\x12+\n\x11mute_element_hurt\x18\
    \xce\x04\x20\x01(\x08R\x0fmuteElementHurt\x12!\n\x0bMFLNDGPEJOE\x18\xde\
    \x04\x20\x01(\rR\x0bMFLNDGPEJOE\x12$\n\rdamage_shield\x18\x8b\x06\x20\
    \x01(\x02R\x0cdamageShield\x12!\n\x0bIFMINIBILFH\x18\xb7\x06\x20\x01(\rR\
    \x0bIFMINIBILFH\x12!\n\x0bJKGEMBOBALF\x18\xc5\n\x20\x01(\rR\x0bJKGEMBOBA\
    LF\x12!\n\x0bEKJHPCHCMLF\x18\xf5\x0b\x20\x01(\rR\x0bEKJHPCHCMLF\x12!\n\
    \x0bPOAFAPLMPEB\x18\xe8\x0c\x20\x01(\rR\x0bPOAFAPLMPEB\x128\n\x18use_gad\
    get_damage_action\x18\xc5\r\x20\x01(\x08R\x15useGadgetDamageAction\x12!\
    \n\x0bELIFILCNKFD\x18\xdc\r\x20\x01(\rR\x0bELIFILCNKFD\x12\"\n\x0cendure\
    _delta\x18\xa3\x0e\x20\x01(\x02R\x0bendureDelta\x12!\n\x0bFLPFBAFHGNN\
    \x18\xb2\x0e\x20\x01(\rR\x0bFLPFBAFHGNN\x12!\n\x0bNMPEDJOPMMB\x18\xc3\
    \x0e\x20\x01(\rR\x0bNMPEDJOPMMB\x12%\n\x0eis_resist_text\x18\xba\x0f\x20\
    \x01(\x08R\x0cisResistText\x12!\n\x0bGMNJEDPKNDE\x18\xe7\x0f\x20\x01(\rR\
    \x0bGMNJEDPKNDEB\x1b\n\x19emu.grasscutter.net.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::AbilityIdentifier::file_descriptor().clone());
            deps.push(super::Vector::file_descriptor().clone());
            deps.push(super::AttackHitEffectResult::file_descriptor().clone());
            deps.push(super::HitCollision::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AttackResult::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
